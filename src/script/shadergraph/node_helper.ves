import "shader" for ShaderTools
import "render" for Render
import "blueprint.node_helper" for NodeHelper as bp_NodeHelper
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint

class NodeHelper
{
	static init_pins_from_code(node, code, name)
	{
		code = "#version 330 core\n" + code
		var args = Render.get_shader_func_argus("pixel", code, "glsl", name)
		for (var i in 0..args.count - 1) 
		{
			var v = args[i]
			var pin_type = bp_NodeHelper.type_var_to_pin(v[1])
			node.imports.add(Pin(node, v[0], pin_type))
		}
		var v = args[args.count - 1]
		if (v[1] != "void")
		{
			var pin_type = bp_NodeHelper.type_var_to_pin(v[1])
			node.exports.add(Pin(node, "ret", pin_type))
		}

		node.layout()
	}

	static calc_input_inst(gen, node, slot)
	{
		var pin = Blueprint.query_pin(node.imports, slot)
		if (pin.conns.isEmpty) 
		{
			return nil
		} 
		else 
		{
			var f_pin = pin.conns.front().from
			var f_node = f_pin.node
			if (f_node["node_func"] != nil) {
				return f_node.node_func.calc_inst(gen, f_pin.slot_idx)
			} else {
				return f_node.calc_inst(gen, f_pin.slot_idx)
			}
		}
	}
}