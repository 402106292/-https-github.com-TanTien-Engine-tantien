import "shadergraph.node_helper" for NodeHelper
import "blueprint.variant" for VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.node_param" for NodeParam
import "render" for Render

class NodeFunction
{
	init(node, code, func_name, params)
	{
		NodeHelper.init_pins_from_code(node, code, func_name)

		for (var param in params)
		{
			var node_param = NodeParam(param[0], param[1])
			node.params.add(node_param)
			if (param.count > 2) {
				for (var entry in param[2]) {
					node_param[entry.key] = entry.value
				}
			}
		}

		this.node = node
		this.code = code
		this.func_name = func_name
		this.decl_name = "sg_" + node.name
	}

	gen_shader(gen)
	{
		var code = "#version 330 core\n" + this.code

		var lib = gen.add_lib("pixel", code)
		var index = Render.get_shader_func_index("pixel", code, "glsl", this.func_name)
		this.func = gen.get_func(lib, index - 1)	// skip main()

		gen.add_link_decl(this.func, this.decl_name, true)
	}

	calc_inst(gen, idx) 
	{
		var func = gen.create_decl_func(this.func)
		gen.add_link_decl(func, this.decl_name, false)

		var params = []
		for (var pin in this.node.imports)
		{
			var inst = NodeHelper.calc_input_inst(gen, this.node, pin.name)
			if (!inst) 
			{
				var param = this.node.query_param(pin.name)
				if (param)
				{
					if (pin.type == VAR_TYPE_NUMBER) {
						inst = gen.op_const_float(param.value)
					} else if (pin.type == VAR_TYPE_NUMBER2) {
						inst = gen.op_const_float2(param.value.x, param.value.y)
					} else if (pin.type == VAR_TYPE_NUMBER3) {
						inst = gen.op_const_float3(param.value.x, param.value.y, param.value.z)
					} else if (pin.type == VAR_TYPE_NUMBER4) {
						inst = gen.op_const_float4(param.value.x, param.value.y, param.value.z, param.value.w)
					}
				}
				else
				{
					if (pin.type == VAR_TYPE_NUMBER) {
						inst = gen.op_const_float(0)
					} else if (pin.type == VAR_TYPE_NUMBER2) {
						inst = gen.op_const_float2(0, 0)
					} else if (pin.type == VAR_TYPE_NUMBER3) {
						inst = gen.op_const_float3(0, 0, 0)
					} else if (pin.type == VAR_TYPE_NUMBER4) {
						inst = gen.op_const_float4(0, 0, 0, 0)
					}
				}
			}
			params.add(inst)
		}
		return gen.op_call(func, params)
	}
}