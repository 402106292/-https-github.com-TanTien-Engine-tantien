import "shadergraph.node_helper" for NodeHelper
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4

class FragColor is Node
{
	init()
	{
		super.init(FragColor.name)	

		this.imports = [
			Pin(this, "rgba", VAR_TYPE_NUMBER4),
			Pin(this, "rgb",  VAR_TYPE_NUMBER3),
			Pin(this, "grey", VAR_TYPE_NUMBER),			
		]

		this.layout()
	}

	gen_shader(gen)
	{
		gen.import_all()

		var frag_col = gen.add_output("FragColor", "vec4")

		var rgba = NodeHelper.calc_input_inst(gen, this, "rgba")
		if (!rgba) 
		{
			var rgb = NodeHelper.calc_input_inst(gen, this, "rgb")
			if (rgb) {
				var a = gen.op_const_float(1.0)
				rgba = gen.op_compose_float4(rgb, a)
			} else {
				var grey = NodeHelper.calc_input_inst(gen, this, "grey")
				if (grey) {
					var a = gen.op_const_float(1.0)
					rgba = gen.op_compose_float4(grey, grey, grey, a)
				}
			}
		}
		if (rgba) {
			gen.op_store(frag_col, rgba)
		}

		gen.op_return()

		gen.finish_main()
	}
}