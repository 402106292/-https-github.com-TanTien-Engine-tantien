import "blueprint.blueprint" for Blueprint
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_PORT, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4

class FragColor is Node
{
	init()
	{
		super.init(FragColor.name)	

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "rgba", VAR_TYPE_NUMBER4),
			Pin(this, "rgb",  VAR_TYPE_NUMBER3),
			Pin(this, "rg",   VAR_TYPE_NUMBER2),
			Pin(this, "grey", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()
	}

	shader_gen(gen, module, func, bb)
	{
		super.shader_gen(gen, module, func, bb)

		var frag_col = gen.add_output("FragColor", "vec4")

		var rgba = Blueprint.calc_input_inst(gen, this, "rgba", module, func, bb)
		if (!rgba) 
		{
			var r = nil
			var g = nil
			var b = nil
			var a = module.const_float(1.0)

			var rgb = Blueprint.calc_input_inst(gen, this, "rgb", module, func, bb)
			if (rgb) 
			{
				r = bb.compose_extract(rgb, 0)
				g = bb.compose_extract(rgb, 1)
				b = bb.compose_extract(rgb, 2)
			} 
			else 
			{
				var rg = Blueprint.calc_input_inst(gen, this, "rg", module, func, bb)
				if (rg) 
				{
					r = bb.compose_extract(rg, 0)
					g = bb.compose_extract(rg, 1)
					b = module.const_float(0.0)
				} 
				else 
				{
					var grey = Blueprint.calc_input_inst(gen, this, "grey", module, func, bb)
					if (grey) 
					{
						r = grey
						g = grey
						b = grey
					}
					else
					{
						r = module.const_float(0.0)
						g = r
						b = r
					}
				}
			}

			rgba = bb.compose_float4(r, g, b, a)			
		}
		bb.store(frag_col, rgba)
	}
}