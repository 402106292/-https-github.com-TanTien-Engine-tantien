import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "rendergraph.variant" for VAR_TYPE_TEXTURE
import "render" for Cubemap

class SampleTexture is Node
{
	init()
	{
		super.init(SampleTexture.name)

		this.imports = [
			Pin(this, "tex",  VAR_TYPE_TEXTURE),
			Pin(this, "uv",   VAR_TYPE_NUMBER2),
			Pin(this, "lod",  VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "rgba", VAR_TYPE_NUMBER4),
			Pin(this, "rgb",  VAR_TYPE_NUMBER3),
			Pin(this, "r",    VAR_TYPE_NUMBER),
			Pin(this, "g",    VAR_TYPE_NUMBER),
			Pin(this, "b",    VAR_TYPE_NUMBER),
			Pin(this, "a",    VAR_TYPE_NUMBER),
		]

		this.layout()
	}

	calc_inst(idx, ctx) 
	{
		var img = Blueprint.calc_input_inst(this, 0, ctx)

		if (!img) {
			return nil
		}

		var uv = Blueprint.calc_input_inst(this, 1, ctx)		
		if (!uv) {
			return nil
		}		

		var lod = Blueprint.calc_input_inst(this, 2, ctx)
		if (!lod)
		{
			var v_tex = Blueprint.calc_input_value(this, 0)
			if (v_tex and v_tex.value.tex is Cubemap) {
				lod = ctx.module.const_float(0.0)
			}
		}

		var rgba = ctx.bb.image_sample(img, uv, lod)
		if (idx == 0) {
			return rgba
		} else if (idx == 1) {
			var r = ctx.bb.compose_extract(rgba, 0)
			var g = ctx.bb.compose_extract(rgba, 1)
			var b = ctx.bb.compose_extract(rgba, 2)
			return ctx.bb.compose_float3(r, g, b)
		} else if (idx == 2) {
			return ctx.bb.compose_extract(rgba, 0)
		} else if (idx == 3) {
			return ctx.bb.compose_extract(rgba, 1)
		} else if (idx == 4) {
			return ctx.bb.compose_extract(rgba, 2)
		} else if (idx == 5) {
			return ctx.bb.compose_extract(rgba, 3)
		} 

		return nil
	}

	shader_gen2(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var img = ShaderBuilder.gen_child(node, "tex")
		if (!img) {
			return nil
		}

		var uv = ShaderBuilder.gen_child(node, "uv")		
		if (!uv) {
			return nil
		}		

		var lod = ShaderBuilder.gen_child(node, "lod")
		if (!lod)
		{
			var v_tex = Blueprint.calc_input_value(this, 0)
			if (v_tex and v_tex.value.tex is Cubemap) {
				var module = node.find_value("module")
				lod = module.const_float(0.0)
			}
		}

		var bb = node.find_value("bb")
		var rgba = bb.image_sample(img, uv, lod)
		if (idx == 0) {
			return rgba
		} else if (idx == 1) {
			var r = bb.compose_extract(rgba, 0)
			var g = bb.compose_extract(rgba, 1)
			var b = bb.compose_extract(rgba, 2)
			return bb.compose_float3(r, g, b)
		} else if (idx == 2) {
			return bb.compose_extract(rgba, 0)
		} else if (idx == 3) {
			return bb.compose_extract(rgba, 1)
		} else if (idx == 4) {
			return bb.compose_extract(rgba, 2)
		} else if (idx == 5) {
			return bb.compose_extract(rgba, 3)
		} 

		return nil
	}
}