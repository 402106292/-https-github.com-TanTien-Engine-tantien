import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "rendergraph.variant" for VAR_TYPE_TEXTURE

class SampleTexture is Node
{
	init()
	{
		super.init(SampleTexture.name)

		this.imports = [
			Pin(this, "tex",  VAR_TYPE_TEXTURE),
			Pin(this, "uv",   VAR_TYPE_NUMBER2),
			Pin(this, "lod",  VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "rgba", VAR_TYPE_NUMBER4),
			Pin(this, "rgb",  VAR_TYPE_NUMBER3),
			Pin(this, "r",    VAR_TYPE_NUMBER),
			Pin(this, "g",    VAR_TYPE_NUMBER),
			Pin(this, "b",    VAR_TYPE_NUMBER),
			Pin(this, "a",    VAR_TYPE_NUMBER),
		]

		this.layout()
	}

	calc_inst(gen, idx, module, func) 
	{
		var img = Blueprint.calc_input_inst(gen, this, 0, module, func)
		if (!img) {
			return nil
		}

		var uv = Blueprint.calc_input_inst(gen, this, 1, module, func)
		if (!uv) {
			return nil
		}		

		var lod = Blueprint.calc_input_inst(gen, this, 2, module, func)
		var rgba = gen.image_sample(func, img, uv, lod)
		if (idx == 0) {
			return rgba
		} else if (idx == 1) {
			var r = gen.compose_extract(func, rgba, 0)
			var g = gen.compose_extract(func, rgba, 1)
			var b = gen.compose_extract(func, rgba, 2)
			return gen.compose_float3(func, r, g, b)
		} else if (idx == 2) {
			return gen.compose_extract(func, rgba, 0)
		} else if (idx == 3) {
			return gen.compose_extract(func, rgba, 1)
		} else if (idx == 4) {
			return gen.compose_extract(func, rgba, 2)
		} else if (idx == 5) {
			return gen.compose_extract(func, rgba, 3)
		} 

		return nil
	}
}