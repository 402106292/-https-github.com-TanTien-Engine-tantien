import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "rendergraph.variant" for VAR_TYPE_TEXTURE

class Uniform is Node
{
	init()
	{
		super.init(Uniform.name)

		this.imports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()

		this.params.add(NodeParam("unif_name", ""))

		this.unif = nil
	}

    gen_shader(gen)
    {
    	this.unif = nil
    }

	calc_inst(gen, idx, module, func) 
	{
		if (!this.unif) {
			this.unif = this.create_unif(gen, module)
		}
		if (this.unif) {
			return gen.load(func, this.unif)
		} else {
			return nil
		}
	}

	create_unif(gen, module)
	{
		var val = Blueprint.calc_input_value(this, 0)
		if (!val) {
			return nil
		}

		var name = "unif_%(gen.get_unif_num())"
		this.query_param("unif_name").value = name

		var type = ""
		if (val.type == VAR_TYPE_NUMBER) {
			type = "float"
		} else if (val.type == VAR_TYPE_NUMBER2) {
			type = "vec2"
		} else if (val.type == VAR_TYPE_NUMBER3) {
			type = "vec3"
		} else if (val.type == VAR_TYPE_NUMBER4) {
			type = "vec4"
		} else {
			return nil
		}

		return gen.add_uniform(module, name, type)
	}
}