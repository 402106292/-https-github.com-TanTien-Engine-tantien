import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "rendergraph.variant" for VAR_TYPE_TEXTURE

class Uniform is Node
{
	init()
	{
		super.init(Uniform.name)

		this.imports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()

		this.params.add(NodeParam("unif_name", "unif"))

		this.unif = nil
		this.unif_name = nil
	}

    gen_shader(gen)
    {
    	this.unif = nil
    	this.unif_name = nil
    }

	calc_inst(gen, idx, module, func) 
	{
		if (!this.unif) 
		{
			var val = Blueprint.calc_input_value(this, 0)
			if (!val) {
				return nil
			}

			var name = this.query_param("unif_name").value

			var type = ""
			if (val.type == VAR_TYPE_NUMBER) {
				type = "float"
			} else if (val.type == VAR_TYPE_NUMBER2) {
				type = "vec2"
			} else if (val.type == VAR_TYPE_NUMBER3) {
				type = "vec3"
			} else if (val.type == VAR_TYPE_NUMBER4) {
				type = "vec4"
			} else {
				return nil
			}

			this.unif = gen.add_uniform(module, name, type)
			this.unif_name = gen.query_unif_name(this.unif)
		}

		if (this.unif) {
			return gen.load(func, this.unif)
		} else {
			return nil
		}
	}

	bind_uniforms(prog)
	{
		var val = Blueprint.calc_input_value(this, 0)
		if (!val) {
			return nil
		}

		var type = ""
		var value = []
		if (val.type == VAR_TYPE_NUMBER) {
			type = "float"
			value.add(val.value)
		} else if (val.type == VAR_TYPE_NUMBER2) {
			type = "float2"
			value.add(val.value.x)
			value.add(val.value.y)
		} else if (val.type == VAR_TYPE_NUMBER3) {
			type = "float3"
			value.add(val.value.x)
			value.add(val.value.y)
			value.add(val.value.z)
		} else if (val.type == VAR_TYPE_NUMBER4) {
			type = "float4"
			value.add(val.value.x)
			value.add(val.value.y)
			value.add(val.value.z)
			value.add(val.value.w)			
		} else {
			return nil
		}

		prog.set_uniform_value([this.unif_name, type, value])
	}
}