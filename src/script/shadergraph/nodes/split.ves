import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.split" for Split as bp_Split

class Split is bp_Split
{
	init()
	{
		super.init()	
	}

	calc_inst(gen, idx, module, func)
	{
		if (idx == 0)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 0)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return gen.compose_extract(func, xyz, 0)
				} else {
					var xy = Blueprint.calc_input_inst(gen, this, "xy", module, func)
					if (xy) {
						return gen.compose_extract(func, xy, 0)
					}
				}
			}
		}
		else if (idx == 1)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 1)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return gen.compose_extract(func, xyz, 1)
				} else {
					var xy = Blueprint.calc_input_inst(gen, this, "xy", module, func)
					if (xy) {
						return gen.compose_extract(func, xy, 1)
					}
				}
			}
		}
		else if (idx == 2)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 2)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return gen.compose_extract(func, xyz, 2)
				}
			}
		}
		else if (idx == 3)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 3)
			}
		}
		else if (idx == 4)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				var x = gen.compose_extract(func, xyzw, 0)
				var y = gen.compose_extract(func, xyzw, 1)
				var z = gen.compose_extract(func, xyzw, 2)
				return gen.compose_float3(func, x, y, z)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return xyz
				}
			}
		}

		return nil
	}
}