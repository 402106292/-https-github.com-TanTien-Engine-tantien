import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint

class Normalize is Node
{
	init()
	{
		super.init(Normalize.name)

		this.imports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()
	}

	calc_inst(idx, ctx) 
	{
		var v = Blueprint.calc_input_inst(this, 0, ctx)
		if (v) {
			return ctx.bb.normalize(v)		
		} else {
			return nil
		}
	}

	shader_gen2(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var v = ShaderBuilder.gen_child(node, "v")
		if (v) {
			var bb = node.find_value("bb")
			return bb.normalize(v)		
		} else {
			return nil
		}
	}
}