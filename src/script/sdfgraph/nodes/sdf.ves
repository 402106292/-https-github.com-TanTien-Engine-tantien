import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_FUNCTION
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3
import "sdfgraph.closure_builder" for ClosureBuilder

var CODE = "
// from http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/

const int MAX_MARCHING_STEPS = 255;
const float MIN_DIST = 0.0;
const float MAX_DIST = 100.0;
const float EPSILON = 0.0001;

float f_scene(vec3 p)
{
    return 0;
}

float shortest_distance_to_surface(vec3 eye, vec3 marchingDirection, float start, float end)
{
    float depth = start;
    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
        float dist = f_scene(eye + depth * marchingDirection);
        if (dist < EPSILON) {
			return depth;
        }
        depth += dist;
        if (depth >= end) {
            return end;
        }
    }
    return end;
}

vec3 ray_dir(float fov, vec2 size, vec2 frag_coord)
{
    vec2 xy = frag_coord - size / 2.0;
    float z = size.y / tan(radians(fov) / 2.0);
    return normalize(vec3(xy, -z));
}

/**
 * Return a transform matrix that will transform a ray from view space
 * to world coordinates, given the eye point, the camera target, and an up vector.
 *
 * This assumes that the center of the camera is aligned with the negative z axis in
 * view space when calculating the ray marching direction. See rayDirection.
 */
mat4 view_matrix(vec3 eye, vec3 center, vec3 up) 
{
    // Based on gluLookAt man page
    vec3 f = normalize(center - eye);
    vec3 s = normalize(cross(f, up));
    vec3 u = cross(s, f);
    return mat4(
        vec4(s, 0.0),
        vec4(u, 0.0),
        vec4(-f, 0.0),
        vec4(0.0, 0.0, 0.0, 1)
    );
}

vec3 estimate_normal(vec3 p) 
{
    return normalize(vec3(
        f_scene(vec3(p.x + EPSILON, p.y, p.z)) - f_scene(vec3(p.x - EPSILON, p.y, p.z)),
        f_scene(vec3(p.x, p.y + EPSILON, p.z)) - f_scene(vec3(p.x, p.y - EPSILON, p.z)),
        f_scene(vec3(p.x, p.y, p.z  + EPSILON)) - f_scene(vec3(p.x, p.y, p.z - EPSILON))
    ));
}

vec3 phong_contrib_for_light(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,
                             vec3 lightPos, vec3 lightIntensity) 
{
    vec3 N = estimate_normal(p);
    vec3 L = normalize(lightPos - p);
    vec3 V = normalize(eye - p);
    vec3 R = normalize(reflect(-L, N));

    float dotLN = dot(L, N);
    float dotRV = dot(R, V);

    if (dotLN < 0.0) {
        // Light not visible from this point on the surface
        return vec3(0.0, 0.0, 0.0);
    }

    if (dotRV < 0.0) {
        // Light reflection in opposite direction as viewer, apply only diffuse
        // component
        return lightIntensity * (k_d * dotLN);
    }
    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));
}

vec3 phong_illumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) 
{
    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);
    vec3 color = ambientLight * k_a;

    float iTime = 0;

    vec3 light1Pos = vec3(4.0 * sin(iTime),
                          2.0,
                          4.0 * cos(iTime));
    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);

    color += phong_contrib_for_light(k_d, k_s, alpha, p, eye,
                                     light1Pos,
                                     light1Intensity);

    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),
                          2.0 * cos(0.37 * iTime),
                          2.0);
    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);

    color += phong_contrib_for_light(k_d, k_s, alpha, p, eye,
                                     light2Pos,
                                     light2Intensity);
    return color;
}

vec3 sdf(vec2 st, vec2 screen_size, vec3 eye)
{
    vec3 view_dir = ray_dir(45.0, screen_size, st * screen_size);
    mat4 view_to_world = view_matrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));
    vec3 world_dir = (view_to_world * vec4(view_dir, 0.0)).xyz;

    float dist = shortest_distance_to_surface(eye, world_dir, MIN_DIST, MAX_DIST);

    if (dist > MAX_DIST - EPSILON) {
        // Didn't hit anything
        return vec3(0.0, 0.0, 0.0);
    }

    // The closest point on the surface to the eyepoint along the view ray
    vec3 p = eye + dist * world_dir;

    vec3 K_a = vec3(0.2, 0.2, 0.2);
    vec3 K_d = vec3(0.7, 0.2, 0.2);
    vec3 K_s = vec3(1.0, 1.0, 1.0);
    float shininess = 10.0;

    vec3 color = phong_illumination(K_a, K_d, K_s, shininess, p, eye);

    return color;
}
"

class Sdf is Node
{
	init() 
	{
		super.init()

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "sdf", [
            ["eye", Vector3(8.0, 5.0, 7.0)],
        ])

        this.imports.add(Pin(this, "f_scene(p)", VAR_TYPE_FUNCTION))
        this.layout()
	}

    shader_gen(node, idx)
    {
        import "shadergraph.shader_builder" for ShaderBuilder
        ShaderBuilder.gen_child(node, 3)

        var ret = this.node_func.shader_gen(node, idx)
        
        var global = node.tree.ud["global"]
        ClosureBuilder.gen_primitive3d(global.gen, this, node.children[3], "f_scene")

        return ret
    }    
}