import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "shadergraph.node_function" for NodeFunction
import "shadergraph.variant" for VAR_TYPE_FUNCTION
import "sdfgraph.closure_builder" for ClosureBuilder
import "maths.vector" for Vector3

var CODE = "
// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float primitive(vec3 p)
{
    return 0;
}
float infinite_rep(vec3 p, vec3 c)
{
    vec3 q = mod(p+0.5*c,c)-0.5*c;
    return primitive(q);
}
"

class InfiniteRepetition is Node
{
	init() 
	{
		super.init(InfiniteRepetition.name)

		this.node_func = NodeFunction(this, CODE, "infinite_rep", [
			["c", Vector3(5, 5, 5)],
		])

        this.imports.add(Pin(this, "primitive(p)", VAR_TYPE_FUNCTION))
        this.layout()
	}

    gen_shader(gen)
    {
        ClosureBuilder.gen_primitive3d(gen, this, "primitive")
    }	
}