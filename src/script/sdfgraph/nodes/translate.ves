import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "maths.vector" for Vector3

class Translate is Node
{
	init()
	{
		super.init(Translate.name)

		this.imports = [
			Pin(this, "in", VAR_TYPE_NUMBER3),
			Pin(this, "offset", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_NUMBER3),
		]

		this.params.add(NodeParam("offset", Vector3(0, 0, 0)))

		this.layout()
	}

	calc_inst(idx, ctx) 
	{
		var pos = Blueprint.calc_input_inst(this, 0, ctx)
		if (!pos) {
			return nil
		}

		var offset = Blueprint.calc_input_inst(this, 1, ctx)
		if (offset)
		{
			return ctx.bb.sub(pos, offset)
		}
		else
		{
			var offset = this.query_param("offset").value

			var v_off = Blueprint.calc_input_value(this, 1)
			if (v_off) {
				offset.x = v_off.value.x
				offset.y = v_off.value.y
				offset.z = v_off.value.z
			}

			var x = ctx.module.const_float(offset.x)
			var y = ctx.module.const_float(offset.y)
			var z = ctx.module.const_float(offset.z)
			var off_inst = ctx.bb.compose_float3(x, y, z)

			return ctx.bb.sub(pos, off_inst)
		}
	}
}