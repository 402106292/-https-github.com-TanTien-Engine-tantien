import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "maths.vector" for Vector3

class Scale is Node
{
	init()
	{
		super.init(Scale.name)

		this.imports = [
			Pin(this, "in", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_NUMBER3)
		]

		this.params.add(NodeParam("val", Vector3(1, 1, 1)))

		this.layout()
	}

	calc_inst(gen, idx, module, func, bb) 
	{
		var pos = Blueprint.calc_input_inst(gen, this, 0, module, func, bb)
		if (!pos) {
			return nil
		}

		var val = this.query_param("val").value
		var x = module.const_float(val.x)
		var y = module.const_float(val.y)
		var z = module.const_float(val.z)
		var val_inst = bb.compose_float3(x, y, z)

		return bb.div(pos, val_inst)
	}
}