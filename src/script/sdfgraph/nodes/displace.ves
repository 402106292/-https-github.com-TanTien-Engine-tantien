import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_FUNCTION
import "blueprint.node_function" for NodeFunction
import "sdfgraph.closure_builder" for ClosureBuilder
import "maths.vector" for Vector3

var CODE = "
// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float primitive(vec3 p)
{
    return 0;
}
float displacement(vec3 p)
{
//    return sin(20*p.x)*sin(20*p.y)*sin(20*p.z);    
    return sin(2*p.x)*sin(2*p.y)*sin(2*p.z);    
}
float displace(vec3 p)
{
    float d1 = primitive(p);
    float d2 = displacement(p);
    return d1+d2;
}
"

class Displace is Node
{
	init() 
	{
		super.init(Displace.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "displace", [])

        this.imports.add(Pin(this, "primitive(p)", VAR_TYPE_FUNCTION))
        this.layout()
	}

    shader_gen(ctx)
    {
        super.shader_gen(ctx)

        ClosureBuilder.gen_primitive3d(ctx.gen, this, "primitive")
    }	
}