import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_FUNCTION
import "blueprint.node_function" for NodeFunction
import "sdfgraph.closure_builder" for ClosureBuilder
import "maths.vector" for Vector3

var CODE = "
// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float primitive(vec3 p)
{
    return 0;
}
float finite_rep(vec3 p, float c, vec3 l)
{
    vec3 q = p-c*clamp(round(p/c),-l,l);
    return primitive( q );
}
"

class FiniteRepetition is Node
{
	init() 
	{
		super.init(FiniteRepetition.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "finite_rep", [
			["c", 5],
            ["l", Vector3(5, 5, 5)],
		])

        this.imports.add(Pin(this, "primitive(p)", VAR_TYPE_FUNCTION))
        this.layout()
	}

    shader_gen(node, idx)
    {
        import "shadergraph.shader_builder" for ShaderBuilder
        ShaderBuilder.gen_child(node, 3)

        var ret = this.node_func.shader_gen(node, idx)

        var global = node.find_value("global")
        ClosureBuilder.gen_primitive3d(global.gen, this, node.children[3], "primitive")

        return ret
    }
}