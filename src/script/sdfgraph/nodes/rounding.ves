import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_FUNCTION
import "blueprint.node_function" for NodeFunction
import "sdfgraph.closure_builder" for ClosureBuilder

var CODE = "
// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float primitive(vec3 p)
{
    return 0;
}
float round(vec3 p, float rad)
{
    return primitive(p) - rad;
}
"

class Rounding is Node
{
	init() 
	{
		super.init(Rounding.name)

		this.node_func = NodeFunction(this, CODE, "round", [
			["rad", 0.5],
		])

        this.imports.add(Pin(this, "primitive(p)", VAR_TYPE_FUNCTION))
        this.layout()
	}

    shader_gen(gen, module, func, bb)
    {
        super.shader_gen(gen, module, func, bb)

        ClosureBuilder.gen_primitive3d(gen, this, "primitive")
    }	
}