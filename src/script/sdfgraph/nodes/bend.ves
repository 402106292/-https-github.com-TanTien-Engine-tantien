import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_FUNCTION
import "blueprint.node_function" for NodeFunction
import "sdfgraph.closure_builder" for ClosureBuilder
import "maths.vector" for Vector3

var CODE = "
// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float primitive(vec3 p)
{
    return 0;
}
float bend(vec3 p, float k)
{
    float c = cos(k*p.x);
    float s = sin(k*p.x);
    mat2  m = mat2(c,-s,s,c);
    vec3  q = vec3(m*p.xy,p.z);
    return primitive(q);
}
"

class Bend is Node
{
	init() 
	{
		super.init(Bend.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "bend", [
            ["k", 2],
        ])

        this.imports.add(Pin(this, "primitive(p)", VAR_TYPE_FUNCTION))
        this.layout()
	}

    shader_gen(ctx)
    {
        super.shader_gen(ctx)

        ClosureBuilder.gen_primitive3d(ctx.gen, this, "primitive")
    }	
}