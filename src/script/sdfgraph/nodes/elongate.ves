import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_FUNCTION
import "blueprint.node_function" for NodeFunction
import "sdfgraph.closure_builder" for ClosureBuilder

var CODE = "
// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm

float primitive(vec3 p)
{
    return 0;
}

float elongate(vec3 p, vec3 h)
{
    vec3 q = abs(p) - h;
    return primitive(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float elongate2(vec3 p, vec3 h)
{
    vec3 q = p - clamp(p, -h, h);
    return primitive(q);
}
"

class Elongate is Node
{
	init() 
	{
		super.init(Elongate.name)

		this.node_func = NodeFunction(this, CODE, "elongate2", [
			["h", 0.5],
		])

        this.imports.add(Pin(this, "primitive(p)", VAR_TYPE_FUNCTION))
        this.layout()
	}

    shader_gen(gen, module, func, bb)
    {
        super.shader_gen(gen, module, func, bb)

        ClosureBuilder.gen_primitive3d(gen, this, "primitive")
    }	
}