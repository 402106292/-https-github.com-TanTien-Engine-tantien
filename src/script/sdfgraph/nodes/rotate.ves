import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "maths.vector" for Vector3
import "math" for Math

class Rotate is Node
{
	init()
	{
		super.init(Rotate.name)

		this.imports = [
			Pin(this, "in", VAR_TYPE_NUMBER3),
			Pin(this, "theta", VAR_TYPE_NUMBER),			
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_NUMBER3)
		]

		this.params.add(NodeParam("theta", 0.0))

		var axis = NodeParam("axis", 0)
		axis.region = 2.0
		axis.integer = true
		this.params.add(axis)

		this.layout()
	}

	calc_inst(idx, ctx) 
	{
		var val = Blueprint.calc_input_inst(this, 0, ctx)
		if (!val) {
			return nil
		}

		var theta = 0
		var theta_input = Blueprint.calc_input_value(this, 1)
		if (theta_input) {
			theta = theta_input.value
		} else {
			theta = this.query_param("theta").value		
		}
		var c = Math.cos(theta)
		var s = Math.sin(theta)

		var mat = nil
		var axis = this.query_param("axis").value
		if (axis == 0) {
			mat = ctx.module.const_mat3([
				1, 0, 0,
				0, c, -s,
				0, s, c,
			])
		} else if (axis == 1) {
			mat = ctx.module.const_mat3([
				c, 0, s,
				0, 1, 0,
				-s, 0, c,
			])
		} else {
			mat = ctx.module.const_mat3([
				c, -s, 0,
				s, c, 0,
				0, 0, 1,
			])
		}

		return ctx.bb.mul(mat, val)
	}
}