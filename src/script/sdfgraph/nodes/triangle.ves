import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float dot2( in vec3 v ) { return dot(v,v); }
float triangle(vec3 p, vec3 a, vec3 b, vec3 c)
{
  vec3 ba = b - a; vec3 pa = p - a;
  vec3 cb = c - b; vec3 pb = p - b;
  vec3 ac = a - c; vec3 pc = p - c;
  vec3 nor = cross(ba, ac);

  return sqrt(
    (sign(dot(cross(ba, nor), pa)) +
     sign(dot(cross(cb, nor), pb)) +
     sign(dot(cross(ac, nor), pc)) < 2.0)
     ?
     min(min(
     dot2(ba * clamp(dot(ba, pa) / dot2(ba), 0.0, 1.0) - pa),
     dot2(cb * clamp(dot(cb, pb) / dot2(cb), 0.0, 1.0) - pb) ),
     dot2(ac * clamp(dot(ac, pc) / dot2(ac), 0.0, 1.0) - pc) )
     :
     dot(nor, pa) * dot(nor, pa) / dot2(nor));
}
"

class Triangle is Node
{
	init() 
	{
		super.init()

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "triangle", [
			["a", Vector3(0.0, 0.0, 0.0)],
			["b", Vector3(1.0, 0.0, 0.0)],		
			["c", Vector3(0.0, 0.0, 1.0)],
		])
	}
}