import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "physicsgraph.variant" for VAR_TYPE_WORLD, VAR_TYPE_BODY, VAR_TYPE_JOINT, VarWorld
import "geograph.variant" for VAR_TYPE_GEO
import "physics" for World as tt_World, Body

class World is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "bodies", [ VAR_TYPE_BODY, VAR_TYPE_ARRAY ]),
			Pin(this, "joints", [ VAR_TYPE_JOINT, VAR_TYPE_ARRAY ]),			
		]
		this.exports = [
			Pin(this, "world", VAR_TYPE_WORLD),
		]

		this.layout()
	}

	calc_value(idx)
	{
		return Variant(VAR_TYPE_WORLD, this.build_world())
	}

	build_world()
	{
		var world = VarWorld()

		world.world = nil
		world.bodies.clear()
		world.joints.clear()		

		import "logger.logger" for Logger
		Logger.info("build physics world")

		world.world = tt_World.init()

		var v_bodies = Blueprint.calc_input_value(this, 0)
		if (v_bodies) {
			this.add_multi_bodies(world, v_bodies)		
		}

		var v_joints = Blueprint.calc_input_value(this, 1)
		if (v_joints) {
			this.add_joint(world, v_joints)		
		}

		return world
	}

	add_multi_bodies(world, v_bodies)
	{	
		if (v_bodies.type == VAR_TYPE_ARRAY) {
			for (var v_body in v_bodies.value) {
				this.add_multi_bodies(world, v_body)
			}
		} else {
			this.add_single_body(world, v_bodies)
		}
	}

	add_single_body(world, v_body)
	{
		if (v_body.type == VAR_TYPE_BODY) 
		{
			if (v_body.value.body) {
				world.world.add_body(v_body.value.body)
			}
			world.bodies.add(v_body)
		} 
		else if (v_body.type == VAR_TYPE_GEO) 
		{
			var body = Body.init("static", -1)
			body.add_shape(v_body.value.shape, v_body.value.render_style["fill"].value, nil)
			world.world.add_body(body)
		}
	}

	add_joint(world, v_joints)
	{	
		if (v_joints.type == VAR_TYPE_ARRAY) {
			for (var v_joint in v_joints.value) {
				this.add_joint(world, v_joint)
			}
		} else {
			world.world.add_joint(v_joints.value.joint)
			world.joints.add(v_joints)
		}
	}
}