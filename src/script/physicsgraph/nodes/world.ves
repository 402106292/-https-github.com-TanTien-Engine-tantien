import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "physicsgraph.variant" for VAR_TYPE_WORLD, VAR_TYPE_BODY, VarWorld
import "geograph.variant" for VAR_TYPE_GEO
import "physics" for World as tt_World, Body

class World is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "bodies", [ VAR_TYPE_BODY, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "world", VAR_TYPE_WORLD),
		]

		this.layout()

		this.world = VarWorld()
	}

	calc_value(idx)
	{
		if (!this.world.world) {
			this.world.world = this.build_world()
		}
		return Variant(VAR_TYPE_WORLD, this.world)
	}

	render_gen()
	{
		this.world.world = this.build_world()
	}

	build_world()
	{
		import "logger.logger" for Logger
		Logger.info("build physics world")

		var v_bodies = Blueprint.calc_input_value(this, 0)
		var world = tt_World.init()
		this.build_multi(world, v_bodies)
		return world
	}

	build_multi(world, v_bodies)
	{	
		if (v_bodies.type == VAR_TYPE_ARRAY) {
			for (var v_body in v_bodies.value) {
				this.build_multi(world, v_body)
			}
		} else {
			this.build_single(world, v_bodies)
		}
	}

	build_single(world, v_body)
	{
		if (v_body.type == VAR_TYPE_BODY) {
			world.add_body(v_body.value.body)
		} else if (v_body.type == VAR_TYPE_GEO) {
			var body = Body.init("static")
			body.add_shape(v_body.value.shape)
			world.add_body(body)
		}
	}
}