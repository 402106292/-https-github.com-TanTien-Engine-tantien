import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "physicsgraph.variant" for VAR_TYPE_BODY

class BodySelector is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "body_a",      VAR_TYPE_BODY),
			Pin(this, "body_b",      VAR_TYPE_BODY),
			Pin(this, "flag_select", VAR_TYPE_INTEGER),
			Pin(this, "flag_other",  VAR_TYPE_INTEGER),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_BODY),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_a = Blueprint.calc_input_value(this, 0)
		var v_b = Blueprint.calc_input_value(this, 1)
		if ((!v_a and !v_b) or (!v_a.value.body and !v_b.value.body)) {
			return nil
		}

		var v_select = Blueprint.calc_input_value(this, 2)
		var v_other  = Blueprint.calc_input_value(this, 3)
		if (!v_select) {
			return nil
		}

		var select = v_select.value
		var other = select
		if (v_other) {
			other = v_other.value
		}

		if (!v_a or !v_a.value.body) 
		{
			var flag_b = v_b.value.body.get_flag()
			if (flag_b == select) {
				return v_b
			} else {
				return nil
			}
		} 
		else if (!v_b or !v_b.value.body) 
		{
			var flag_a = v_a.value.body.get_flag()
			if (flag_a == select) {
				return v_a
			} else {
				return nil
			}
		}

		var flag_a = v_a.value.body.get_flag()
		var flag_b = v_b.value.body.get_flag()
		if (select == other) 
		{
			if (flag_a == select) {
				return v_a
			} else if (flag_b == select) {
				return v_b
			} else {
				return nil
			}
		}
		else
		{
			if (flag_a == select and flag_b == other) {
				return v_a
			} else if (flag_b == select and flag_a == other) {
				return v_b
			} else {
				return nil
			}
		}

		return nil
	}
}