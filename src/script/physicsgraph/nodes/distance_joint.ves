import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "physicsgraph.variant" for VAR_TYPE_BODY, VAR_TYPE_JOINT
import "maths.vector" for Vector2
import "physics" for DistanceJoint as tt_DistanceJoint

var EDITOR = nil

class DistanceJoint is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "body_a",   VAR_TYPE_BODY),
			Pin(this, "body_b",   VAR_TYPE_BODY),
			Pin(this, "anchor_a", VAR_TYPE_NUMBER2),
			Pin(this, "anchor_b", VAR_TYPE_NUMBER2),			
		]
		this.exports = [
			Pin(this, "joint", VAR_TYPE_JOINT),
		]

		this.params.add(NodeParam("min_len", 0.0))
		this.params.add(NodeParam("max_len", 1000.0))

		this.layout()
	}
	
	calc_value(idx)
	{
		return Variant(VAR_TYPE_JOINT, this.build_joint())
	}

	build_joint()
	{
		var v_a = Blueprint.calc_input_value(this, 0)
		var v_b = Blueprint.calc_input_value(this, 1)
		if (!v_a or !v_b) {
			return nil
		}

		var anchor_a = nil
		var v_anchor_a = Blueprint.calc_input_value(this, 2)
		if (v_anchor_a) {
			anchor_a = v_anchor_a.value
		} else {
			anchor_a = Vector2(0, 0)
		}

		var anchor_b = nil
		var v_anchor_b = Blueprint.calc_input_value(this, 2)
		if (v_anchor_b) {
			anchor_b = v_anchor_b.value
		} else {
			anchor_b = Vector2(0, 0)
		}

		var joint = tt_DistanceJoint.init(v_a.value.body, v_b.value.body, [anchor_a.x, anchor_a.y], [anchor_b.x, anchor_b.y])

		var min = this.query_param("min_len").value
		var max = this.query_param("max_len").value
		joint.set_length(min, max)

		return joint
	}
}