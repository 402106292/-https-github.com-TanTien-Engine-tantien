import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "editorgraph.variant" for VAR_TYPE_EVENT
import "physicsgraph.variant" for VAR_TYPE_BODY, VarBody

class PreSolve is Node
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "event", VAR_TYPE_EVENT),
			Pin(this, "a", VAR_TYPE_BODY),
			Pin(this, "b", VAR_TYPE_BODY),
		]

		this.layout()

		this.a = nil
		this.b = nil
	}

	calc_value(idx)
	{
		if (idx == 0) {
			import "physicsgraph.event_types" for EVENT_PRE_SOLVE
			return Variant(VAR_TYPE_EVENT, EVENT_PRE_SOLVE)
		} else if (idx == 1) {
			var v_body = VarBody()
			v_body.body = this.a
			return Variant(VAR_TYPE_BODY, v_body)
		} else if (idx == 2) {
			var v_body = VarBody()
			v_body.body = this.b
			return Variant(VAR_TYPE_BODY, v_body)
		}
		return nil
	}

	set_event_params(params)
	{
		this.a = params[0]
		this.b = params[1]
	}
}