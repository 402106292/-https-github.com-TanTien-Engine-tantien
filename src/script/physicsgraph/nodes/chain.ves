import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ARRAY, Variant
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VarGeo
import "physicsgraph.variant" for VAR_TYPE_BODY, VAR_TYPE_JOINT, VAR_TYPE_FIXTURE, VarBody, VarJoint, VarFixture
import "scenegraph.variant" for VAR_TYPE_SPRITE
import "physics" for Body, RevoluteJoint, DistanceJoint
import "maths" for Float2

class Chain is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "ground", VAR_TYPE_BODY),
			Pin(this, "geos",   VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "bodies", VAR_TYPE_ARRAY),
			Pin(this, "joints", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("density",  1.0, { "min" : 0.0, "max" : 2.0 }))
		this.params.add(NodeParam("friction", 0.2, { "min" : 0.0, "max" : 1.0 }))
		this.params.add(NodeParam("fix_begin", true))
		this.params.add(NodeParam("fix_end", true))

		this.layout()

		this.bodies = []
		this.joints = []
	}

	calc_value(idx)
	{
		if (this.bodies.isEmpty or this.joints.isEmpty or !this.bodies[0].value.body or !this.joints[0].value.joint) {
			this.build_chain()
		}

		if (idx == 0) {
			return Variant(this.bodies)
		} else if (idx == 1) {
			return Variant(this.joints)		
		}

		return nil
	}

	clear_cache()
	{
		this.bodies = []
		this.joints = []
	}

	build_chain()
	{
		this.bodies.clear()
		this.joints.clear()

		var v_geos = Blueprint.calc_input_value(this, 1)
		if (!v_geos) {
			return
		}

		if (v_geos.value.isEmpty or !v_geos.value[0].value) {
			return
		}

		for (var v_geo in v_geos.value)
		{
			var v_body = VarBody()

			var srt = nil

			var body = Body.init("dynamic", -1)
			var geo = v_geo.value.symbol
			if (geo is VarGeo)
			{
				srt = v_geo.value.transform.decompose()

				body.add_fixture(geo.shape, geo.render_style["fill"].value, nil, [])			
			}
			else if (geo is VarFixture) 
			{
				srt = geo.shape.value.transform.decompose()

				var filter = this.calc_filter(geo)
				var _geo = geo.shape.value.symbol
				var fill = _geo.render_style["fill"]
				body.add_fixture(_geo.shape, fill, nil, filter)
			}

			body.set_density(this.query_param("density").value)
			body.set_friction(this.query_param("friction").value)

			body.set_transform([srt[3], srt[4]], srt[2])

			v_body.body = body

			v_body.spr = v_geo.value

			this.bodies.add(Variant(VAR_TYPE_BODY, v_body))
		}

		var v_ground = Blueprint.calc_input_value(this, 0)

		var fix_begin = this.query_param("fix_begin").value
		var fix_end = this.query_param("fix_end").value

		var prev_body = nil
		if (fix_begin and v_ground) {
			prev_body = v_ground.value.body
		}

		for (var i in 0 .. this.bodies.count)
		{
			if (prev_body)
			{
				var spr = this.get_spr(v_geos.value[i])

				var shape = this.get_shape(v_geos.value[i])

				var rect = shape.get()

				var pos = Float2.init(rect[0], rect[1] + rect[3] * 0.5)
				pos.transform(spr.transform)
				var anchor = [pos.x(), pos.y()]

				var joint = RevoluteJoint.init(prev_body, this.bodies[i].value.body, anchor)

				var v_joint = VarJoint()
				v_joint.joint = joint

				this.joints.add(Variant(VAR_TYPE_JOINT, v_joint))
			}

			prev_body = this.bodies[i].value.body
		}

		if (fix_end and prev_body and v_ground.value.body) 
		{
			var spr = this.get_spr(v_geos.value.back())
			var shape = this.get_shape(v_geos.value.back())
			var rect = shape.get()

			var pos = Float2.init(rect[0] + rect[2], rect[1] + rect[3] * 0.5)
			pos.transform(spr.transform)
			var anchor = [pos.x(), pos.y()]

			var joint = RevoluteJoint.init(prev_body, v_ground.value.body, anchor)

			var v_joint = VarJoint()
			v_joint.joint = joint

			this.joints.add(Variant(VAR_TYPE_JOINT, v_joint))
		}
	}

	calc_filter(fixture)
	{
		var filter = []
		if (fixture.category) {
			filter.add(fixture.category)
		} else {
			filter.add(0)
		}

		if (fixture.not_collide) {
			for (var id in fixture.not_collide) {
				filter.add(id)
			}
		}

		return filter
	}

	get_spr(v_geo)
	{
		if (v_geo.type == VAR_TYPE_SPRITE) 
		{
			if (v_geo.value.symbol is VarGeo) {
				return v_geo.value
			} else if (v_geo.value.symbol is VarFixture) {
				return v_geo.value.symbol.shape.value
			}
		}

		return nil
	}

	get_shape(v_geo)
	{
		if (v_geo.type == VAR_TYPE_SPRITE) 
		{
			if (v_geo.value.symbol is VarGeo) {
				return v_geo.value.symbol.shape
			} else if (v_geo.value.symbol is VarFixture) {
				return v_geo.value.symbol.shape.value.symbol.shape
			}
		}

		return nil
	}	
}