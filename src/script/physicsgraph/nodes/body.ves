import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO
import "physicsgraph.variant" for VAR_TYPE_BODY
import "physics" for Body as tt_Body

class Body is Node
{
	init()
	{
		super.init(Body.name)

		this.imports = [
			Pin(this, "geos", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "body", VAR_TYPE_BODY),
		]

		this.layout()

		this.body = nil
	}

	calc_value(idx)
	{
		if (!this.body) {
			this.body = this.build_body()
		}
		return Variant(VAR_TYPE_BODY, this.body)
	}

	render_gen()
	{
		this.body = this.build_body()
	}

//	render_run() 
//	{
//		this.print_pos()
//	}

	build_body()
	{
		var body = tt_Body.init()

		var v_geos = Blueprint.calc_input_value(this, 0)
		if (v_geos is List)
		{
			for (var geo in v_geos.value) {
				body.add_shape(geo)
			}
		}
		else
		{
			body.add_shape(v_geos.value)
		}

		return body
	}

	print_pos()
	{
		if (this.body) {
			import "logger.logger" for Logger
			Logger.info("pos: %(pos[0]) %(pos[1])")
		}
	}
}