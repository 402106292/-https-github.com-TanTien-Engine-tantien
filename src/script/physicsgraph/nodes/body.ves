import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO
import "physicsgraph.variant" for VAR_TYPE_BODY, VarBody
import "physics" for Body as tt_Body

class Body is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geos", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "flag",   VAR_TYPE_INTEGER),
		]
		this.exports = [
			Pin(this, "body",   VAR_TYPE_BODY),
			Pin(this, "bodies", VAR_TYPE_ARRAY),			
		]

		this.params.add(NodeParam("type", "static", { "combo" : [ "static", "kinematic", "dynamic" ] }))

		this.params.add(NodeParam("gravity",     1.0, { "min" : 0.0, "max" : 2.0 }))
		// todo: need fixture?
		this.params.add(NodeParam("density",     0.0, { "min" : 0.0, "max" : 2.0 }))
		this.params.add(NodeParam("restitution", 0.0, { "min" : 0.0, "max" : 2.0 }))
		this.params.add(NodeParam("friction",    0.2, { "min" : 0.0, "max" : 1.0 }))

		this.layout()

		this.body = VarBody()
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			if (!this.body.body) 
			{
				var v_geos = Blueprint.calc_input_value(this, 0)
				this.body.body   = this.build_body(v_geos)
				this.body.bodies = nil
				this.body.geo    = v_geos
			}
			return Variant(VAR_TYPE_BODY, this.body)
		}
		else if (idx == 1)
		{
			if (!this.body.bodies) 
			{
				var bodies = []

				var v_geos = Blueprint.calc_input_value(this, 0)
				if (v_geos.type == VAR_TYPE_ARRAY)
				{				
					for (var v_geo in v_geos.value)
					{
						var body = this.build_body(v_geo)
						if (body) {
							var v_body = VarBody()
							v_body.body = body
							bodies.add(Variant(VAR_TYPE_BODY, v_body))
						}
					}
				}
				else
				{
					var body = this.build_body(v_geos)
					if (body) {
						var v_body = VarBody()
						v_body.body = bdoy
						bodies.add(Variant(VAR_TYPE_BODY, v_body))
					}
				}

				this.body.body = nil
				this.body.bodies = nil
				if (!bodies.isEmpty) {
					this.body.bodies = bodies
				}
			}

			return Variant(VAR_TYPE_BODY, this.body)
		}

		return nil
	}

	build_body(v_geos)
	{
		var flag = nil
		var v_flag = Blueprint.calc_input_value(this, 1)
		if (v_flag) {
			flag = v_flag.value
		}

		var type = this.query_param("type").value
		var body = tt_Body.init(type, flag)
		
		if (v_geos.type == VAR_TYPE_ARRAY)
		{
			for (var geo in v_geos.value) {
				body.add_shape(geo.value.shape, geo.value.render_style["fill"].value)
			}
		}
		else
		{
			if (!v_geos.value.shape) {
				return nil
			}

			var filled = false
			var v_fill = v_geos.value.render_style["fill"]
			if (v_fill) {
				filled = v_fill.value
			}

			body.add_shape(v_geos.value.shape, filled)
		}

		body.set_gravity_scale(this.query_param("gravity").value)
		body.set_density(this.query_param("density").value)
		body.set_restitution(this.query_param("restitution").value)
		body.set_friction(this.query_param("friction").value)

		return body
	}
}