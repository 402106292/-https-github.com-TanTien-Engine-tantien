import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.array" for Array
import "blueprint.node_editor" for NodeEditor
import "physicsgraph.variant" for VAR_TYPE_BODY, VAR_TYPE_JOINT, VarJoint
import "maths.vector" for Vector2
import "physics" for PrismaticJoint as tt_PrismaticJoint

var EDITOR = nil

class PrismaticJoint is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "body_a", VAR_TYPE_BODY),
			Pin(this, "body_b", VAR_TYPE_BODY),
		]
		this.exports = [
			Pin(this, "joint", VAR_TYPE_JOINT),
		]

		this.params.add(NodeParam("anchor", Vector2(0, 0), { "min" : -10, "max" : 10 }))
		this.params.add(NodeParam("axis",   Vector2(1, 0)))
		this.params.add(NodeParam("lower", -10.0))
		this.params.add(NodeParam("upper", 10.0))

		this.layout()

		this.joint = VarJoint()

		// editor
		this.editor_points = Array()
		this.editor_points.list = [
			Variant(this.query_param("anchor").value),
		]
	}
	
	calc_value(idx)
	{
		if (!this.joint.joint) {
			this.joint.joint = this.build_joint()
		}
		return Variant(VAR_TYPE_JOINT, this.joint)
	}

	build_joint()
	{
		var v_a = Blueprint.calc_input_value(this, 0)
		var v_b = Blueprint.calc_input_value(this, 1)
		if (!v_a or !v_b) {
			return nil
		}

		var anchor = this.query_param("anchor").value
		var axis   = this.query_param("axis").value
		var lower  = this.query_param("lower").value
		var upper  = this.query_param("upper").value

		var joint = tt_PrismaticJoint.init(v_a.value.body, v_b.value.body, [anchor.x, anchor.y], [axis.x, axis.y], lower, upper)
		return joint
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/select_and_translate.ves")
		}

		Blueprint.connect(this.editor_points.exports[0], EDITOR.editor_node.imports[1])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		var anchor = this.query_param("anchor").value
		anchor.x = this.editor_points.list[0].value.x
		anchor.y = this.editor_points.list[0].value.y

		this.joint.joint = nil
		Blueprint.send_pin_dirty_root(this.exports[0])
	}	
}