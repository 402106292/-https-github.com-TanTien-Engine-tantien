import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geometry" for Polyline as tt_Polyline

class Polyline is Node
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("vertices", []))

		this.layout()

		this.geo = nil
		this.geo_dirty = false
	}

	on_pin_dirty(pin)
	{
		this.geo_dirty = true
	}

	calc_value(idx)
	{
		var geo = this.get_geo()
		return Variant(VAR_TYPE_GEO, geo)
	}

	on_gui_dirty() 
	{
		this.geo_dirty = true
	}

	geo_solver_gen(scene)
	{
		var geo = this.get_geo()
		geo.geo_id = scene.add_geo(geo.shape)
	}

	get_geo()
	{
		if (!this.geo) 
		{
			this.geo = VarGeo()
			this.geo.shape = tt_Polyline.init()
			this.update_geo(this.geo)
		}
		else if (this.geo_dirty)
		{
			this.update_geo(this.geo)
		}

		return this.geo
	}

	update_geo(geo)
	{
		var vertices = this.query_param("vertices").value
		geo.shape.set_vertices(vertices)
		this.geo_dirty = false
	}
}