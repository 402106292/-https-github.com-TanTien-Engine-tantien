import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER, VAR_TYPE_INTEGER
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO
import "maths.vector" for Vector2
import "geometry" for Line, Polyline
import "maths.calc" for Calc

class Resample is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "polyline", VAR_TYPE_GEO),
			Pin(this, "length",   VAR_TYPE_NUMBER),
			Pin(this, "count",    VAR_TYPE_INTEGER),			
		]
		this.exports = [
			Pin(this, "points", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("length", 0.0, { "region" : 1000 }))
		this.params.add(NodeParam("count", 0, {  "integer" : true, "region" : 100 }))

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var ret = []

		if (v_geo.value.shape is Polyline)
		{
			var len = nil
			var v_length = Blueprint.calc_input_value(this, 1)
			if (v_length) {
				len = v_length.value
			} else {
				len = this.query_param("length").value
			}

			if (!len or len == 0) {
				return nil
			}

			var pts = v_geo.value.shape.resample(len)
			for (var i = 0; i < pts.count; i = i + 2) {
				ret.add(Vector2(pts[i], pts[i + 1]))
			}
		}
		else if (v_geo.value.shape is Line)
		{
			var count = nil
			var v_count = Blueprint.calc_input_value(this, 1)
			if (v_count) {
				count = v_count.value
			} else {
				count = this.query_param("count").value
			}

			if (!count or count == 0) {
				return nil
			}

			var line = v_geo.value.shape.get()
			for (var i in 1 .. count + 1)
			{
				var d = i / count
				var x = line[0] + (line[2] - line[0]) * d
				var y = line[1] + (line[3] - line[1]) * d
				ret.add(Vector2(x, y))
			}
		}

		return Variant(ret)
	}
}