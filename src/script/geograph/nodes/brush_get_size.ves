import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER3
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO
import "geograph.brush" for Brush, BrushInstanced
import "maths.vector" for Vector3

class BrushGetSize is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "brush", VAR_TYPE_GEO),
		]
		this.exports = [
			Pin(this, "size", VAR_TYPE_NUMBER3),
		]

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var brush = nil
		if (v_geo.value.shape is Brush) {
			brush = v_geo.value.shape
		} else if (v_geo.value.shape is BrushInstanced) {
			brush = v_geo.value.shape.brush
		}

		if (brush) {
			import "model" for Model
			var sz = Model.calc_brush_size(brush.polys)
			return Variant(Vector3(sz[0], sz[1], sz[2]))
		}

		return nil
	}
}