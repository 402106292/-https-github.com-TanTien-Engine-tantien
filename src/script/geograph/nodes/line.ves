import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.nodes.number2" for Number2
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER2
import "blueprint.node_param" for NodeParam
import "blueprint.node_editor" for NodeEditor
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geometry" for Line as tt_Line

var EDITOR = nil

class Line is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "p0", VAR_TYPE_NUMBER2),
			Pin(this, "p1", VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("x0", 0.0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("y0", 0.0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("x1", 100.0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("y1", 100.0, { "min" : -1000, "max" : 1000 }))

		this.layout()

		this.editor_p0 = Number2()
		this.editor_p1 = Number2()		
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}	
	}
	
	calc_value(idx)
	{
		var geo = VarGeo()
		geo.shape = tt_Line.init()
		this.update_geo(geo)
		return Variant(VAR_TYPE_GEO, geo)
	}

	geo_solver_gen(scene)
	{
		var geo = VarGeo()
		geo.shape = tt_Line.init()
		this.update_geo(geo)
		geo.geo_id = scene.add_geo(geo.shape)
	}

	update_geo(geo)
	{
		var x0 = 0
		var y0 = 0
		var x1 = 0
		var y1 = 0

		var v_p0 = Blueprint.calc_input_value(this, 0)
		if (v_p0 and (v_p0.type == VAR_TYPE_NUMBER2 or v_p0.type == VAR_TYPE_GEO)) {
			if (v_p0.type == VAR_TYPE_NUMBER2) {
				x0 = v_p0.value.x
				y0 = v_p0.value.y
			} else {
				var circle = v_p0.value.shape.get()
				x0 = circle[0]
				y0 = circle[1]
			}
		} else {
			x0 = this.query_param("x0").value
			y0 = this.query_param("y0").value
		}

		var v_p1 = Blueprint.calc_input_value(this, 1)
		if (v_p1 and (v_p1.type == VAR_TYPE_NUMBER2 or v_p1.type == VAR_TYPE_GEO)) {
			if (v_p1.type == VAR_TYPE_NUMBER2) {
				x1 = v_p1.value.x
				y1 = v_p1.value.y
			} else {
				var circle = v_p1.value.shape.get()
				x1 = circle[0]
				y1 = circle[1]
			}
		} else {
			x1 = this.query_param("x1").value
			y1 = this.query_param("y1").value
		}

		geo.shape.set(x0, y0, x1, y1)
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/line_edit.ves")
		}

		var x0 = this.query_param("x0").value
		var y0 = this.query_param("y0").value
		var x1 = this.query_param("x1").value
		var y1 = this.query_param("y1").value
		this.editor_p0.value.set(x0, y0)
		this.editor_p1.value.set(x1, y1)

		Blueprint.connect(this.editor_p0.exports[0], EDITOR.editor_node.imports[1])
		Blueprint.connect(this.editor_p1.exports[0], EDITOR.editor_node.imports[2])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.params[0].value = this.editor_p0.value.x
		this.params[1].value = this.editor_p0.value.y
		this.params[2].value = this.editor_p1.value.x
		this.params[3].value = this.editor_p1.value.y

		Blueprint.send_pin_dirty_root(this.exports[0])
	}
}