import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.surface" for Surface
import "geometry" for Sphere as tt_Sphere

class Sphere is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "radius", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("radius", 1.0))

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}
	}

	calc_value(idx)
	{
		var radius = nil
		var v_radius = Blueprint.calc_input_value(this, 0)
		if (v_radius) {
			radius = v_radius.value
		} else {
			radius = this.query_param("radius").value
		}

		var surface = Surface()
		surface.surface = tt_Sphere.init(radius)

		var geo = VarGeo()
		geo.shape = surface
		return Variant(VAR_TYPE_GEO, geo)
	}
}