import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO
import "geograph.brush" for Brush, BrushInstanced

class BrushSetOffset is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "brush",  VAR_TYPE_GEO),
			Pin(this, "offset", VAR_TYPE_NUMBER),			
		]
		this.exports = [
			Pin(this, "brush", VAR_TYPE_GEO),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var offset = 0

		var v_offset = Blueprint.calc_input_value(this, 1)
		if (v_offset) {
			offset = v_offset.value
		}

		var result = []
		this.set_offset_impl(v_geo, offset, result)
		if (result.count == 0) {
			return nil
		} else if (result.count == 1) {
			return result[0]
		} else {
			return Variant(result)
		}
	}

	set_offset_impl(v_geo, offset, result)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			var list = []
			for (var v in v_geo.value) {
				this.set_offset_impl(v, offset, list)
			}
			result.add(Variant(list))
		}
		else if (v_geo.type == VAR_TYPE_GEO) 
		{
			var brush = v_geo.value
			if (brush.shape is Brush) {
				brush.shape.set_offsets(offset)
			} else if (brush.shape is BrushInstanced) {
				brush.shape.brush.set_offsets(offset)
			}
			result.add(Variant(VAR_TYPE_GEO, brush))
		}
	}
}