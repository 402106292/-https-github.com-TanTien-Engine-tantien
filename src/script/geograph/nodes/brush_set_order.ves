import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_INTEGER, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO
import "geograph.brush" for Brush, BrushInstanced

class BrushSetOrder is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "order", VAR_TYPE_INTEGER),			
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo) {
			return nil
		}

		var order = 0

		var v_order = Blueprint.calc_input_value(this, 1)
		if (v_order) {
			order = v_order.value
		}

		var result = []
		this.set_order_impl(v_geo, order, result)
		if (result.count == 0) {
			return nil
		} else if (result.count == 1) {
			return result[0]
		} else {
			return Variant(result)
		}
	}

	set_order_impl(v_geo, order, result)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			var list = []
			for (var v in v_geo.value) {
				this.set_order_impl(v, order, list)
			}
			result.add(Variant(list))
		}
		else if (v_geo.type == VAR_TYPE_GEO) 
		{
			var new_brush = v_geo.value.clone()
			if (new_brush.shape is Brush) {
				new_brush.shape.order = order
			} else if (new_brush.shape is BrushInstanced) {
				new_brush.shape.brush.order = order
			}
			result.add(Variant(VAR_TYPE_GEO, new_brush))
		}
	}
}