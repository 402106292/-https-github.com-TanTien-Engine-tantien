import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ARRAY, VAR_TYPE_PORT
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VAR_TYPE_CONS
import "geometry" for ConstraintSolver as tt_ConstraintSolver

class ConstraintSolver is Node
{
	init()
	{
		super.init(ConstraintSolver.name)

		this.imports = [
			Pin(this, "prev",   VAR_TYPE_PORT),
			Pin(this, "geos", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "cons", [ VAR_TYPE_CONS, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.cons_solver = nil
		this.update_list = nil
	}

	render_gen()
	{
		this.cons_solver = this.build_solver()
	}

	render_run() 
	{
		for (var node in this.update_list) {
			node.geo_solver_update(this.cons_solver)
		}

		this.cons_solver.solve()
	}

	build_solver()
	{
		import "logger.logger" for Logger
		Logger.info("build genmetry solver")

		var solver = tt_ConstraintSolver.init()

		this.update_list = []

		var prev_nodes = Blueprint.get_precursor_nodes(this)
		var sorted = Blueprint.topo_sort(prev_nodes)
		for (var node in sorted) 
		{
			if (node.has_method("geo_solver_gen(_)")) {
				node.geo_solver_gen(solver)
			}
			if (node.has_method("geo_solver_update(_)")) {
				this.update_list.add(node)
			}
		}

		return solver
	}
}