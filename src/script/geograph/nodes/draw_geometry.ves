import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_ARRAY, VAR_TYPE_PORT, VAR_TYPE_RECT, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.config" for POINT_RADIUS
import "graphics" for Painter, Graphics
import "geometry" for Line, Rect, Circle, Polyline
import "maths.vector" for Vector2, Vector3
import "maths.rect" for Rect as tt_Rect

class DrawGeometry is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev",   VAR_TYPE_PORT),
			Pin(this, "geos", [ VAR_TYPE_NUMBER2, VAR_TYPE_RECT, VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "color",  VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.params.add(NodeParam("skip", false))

		this.layout()
	}

	render_run() 
	{
		if (this.query_param("skip").value) {
			return
		}

		var v_geos = Blueprint.calc_input_value(this, 1)
		if (!v_geos or !v_geos.value) {
			return
		}

		var color = nil
		var v_color = Blueprint.calc_input_value(this, 2)
		if (v_color) {
			color = v_color.value
		}

		var pt = Painter.init()

		if (v_geos.type == VAR_TYPE_ARRAY) {
			for (var geo in v_geos.value) {
				this.draw_geo(pt, geo.value, color)
			}
		} else {
			this.draw_geo(pt, v_geos.value, color)
		}

		import "blueprint.blackboard" for BLACKBOARD
		var cam = BLACKBOARD.editor_cam
		Graphics.on_cam_update(cam.pos.x, cam.pos.y, cam.scale)
		Graphics.draw_painter(pt)
	}

	draw_geo(pt, geo, color)
	{
		if (geo is VarGeo) {
			this.draw_geo_shape(pt, geo, color)
		} else {
			this.draw_prim_val(pt, geo, color)		
		}
	}

	draw_prim_val(pt, geo, color)
	{
		if (!color) {
			color = Vector3(1.0, 0.0, 0.0)
		}
		var col_array = [255 * color.x, 255 * color.y, 255 * color.z, 255]

		if (geo is Vector2)
		{
			pt.add_circle_filled(geo.x, geo.y, POINT_RADIUS, col_array, 24)
		}
		else if (geo is tt_Rect)
		{
			pt.add_rect([ geo.x, geo.y, geo.w, geo.h ], col_array, 2)
		}
	}

	draw_geo_shape(pt, geo, color)
	{
		if (!color) {
			color = geo.render_style["color"]
		}
		if (!color) {
			color = Vector3(1.0, 0.0, 0.0)
		}
		var col_array = [255 * color.x, 255 * color.y, 255 * color.z, 255]

		var shape = geo.shape
		if (shape is Line)
		{
			var line = shape.get()
			pt.add_line(line, col_array, 2)			
		}
		else if (shape is Rect)
		{
			var rect = shape.get()

			var fill = geo.render_style["fill"]
			if (fill) {
				pt.add_rect_filled(rect, col_array)
			} else {
				pt.add_rect(rect, col_array, 2)	
			}
		}
		else if (shape is Circle)
		{
			var c = shape.get()

			var fill = geo.render_style["fill"]
			if (fill) {
				pt.add_circle_filled(c[0], c[1], c[2], col_array, 24)
			} else {
				pt.add_circle(c[0], c[1], c[2], col_array, 2.0, 24)
			}
		}
		else if (shape is Polyline)
		{
			var verts = shape.get_vertices()

			pt.add_polyline(verts, col_array, 2.0)
		}
	}
}