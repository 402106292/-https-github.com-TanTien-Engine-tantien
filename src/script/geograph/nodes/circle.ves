import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geometry" for Circle as tt_Circle
import "maths.vector" for Vector3

class Circle is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "center", VAR_TYPE_NUMBER2),
			Pin(this, "raduis", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
			Pin(this, "new_geo", VAR_TYPE_GEO),
		]

		// shape
		this.params.add(NodeParam("x", 0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("y", 0, { "min" : -1000, "max" : 1000 }))
		this.params.add(NodeParam("r", 100, { "region" : 1000 }))

		// draw
		this.params.add(NodeParam("fill", false))
		this.params.add(NodeParam("color", Vector3(1.0, 0.0, 0.0)))

		this.layout()

		this.geo = nil
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var geo = this.get_geo()
			return Variant(VAR_TYPE_GEO, geo)
		}
		else if (idx == 1)
		{
			var geo = VarGeo()
			geo.shape = tt_Circle.init()
			this.update_geo(geo)
			return Variant(VAR_TYPE_GEO, geo)
		}
		return nil
	}

	on_gui_dirty() 
	{
		var geo = this.get_geo()
		this.update_geo(geo)
	}

	geo_solver_gen(scene)
	{
		var geo = this.get_geo()
		geo.geo_id = scene.add_geo(geo.shape)
	}

	get_geo()
	{
		if (!this.geo) 
		{
			this.geo = VarGeo()
			this.geo.shape = tt_Circle.init()
			this.update_geo(this.geo)
		}

		return this.geo
	}

	update_geo(geo)
	{
		var x = 0
		var y = 0
		var v_center = Blueprint.calc_input_value(this, 0)
		if (v_center) {
			x = v_center.value.x
			y = v_center.value.y
		} else {
			x = this.query_param("x").value
			y = this.query_param("y").value
		}

		var r = 0
		var v_radius = Blueprint.calc_input_value(this, 1)
		if (v_radius) {
			r = v_radius.value.x
		} else {
			r = this.query_param("r").value
		}
		
		geo.shape.set(x, y, r)

		geo.render_style["fill"] = this.query_param("fill").value
		geo.render_style["color"] = this.query_param("color").value.clone()
	}
}