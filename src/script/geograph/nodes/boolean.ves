import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "geometry" for Polytope

class Boolean is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "a", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
			Pin(this, "b", [ VAR_TYPE_GEO, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.params.add(NodeParam("operator", "intersect", { "combo" : [ "union", "intersect", "subtract" ] }))

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}
	}	

	calc_value(idx)
	{
		var v_a = Blueprint.calc_input_value(this, 0)
		if (!v_a) {
			return nil
		}
		var v_b = Blueprint.calc_input_value(this, 1)
		if (!v_b) {
			return nil
		}

		var a = []
		var b = []
		this.get_polys(a, v_a)
		this.get_polys(b, v_b)

		var operator = this.query_param("operator").value

		var polys = Polytope.boolean(operator, a, b)
		if (polys.isEmpty) {
			return nil
		}

		var geo = VarGeo()
		geo.shape = Brush(polys)
		return Variant(VAR_TYPE_GEO, geo)		
	}

	get_polys(dst, src)
	{
		if (src.type == VAR_TYPE_ARRAY) {
			for (var v in src.value) {
				this.get_polys(dst, v)
			}
		} else if (src.type == VAR_TYPE_GEO and src.value.shape is Brush) {
			for (var p in src.value.shape.polys) {
				dst.add(p)
			}
		}
	}
}