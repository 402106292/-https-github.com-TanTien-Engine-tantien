import "blueprint.blueprint" for Blueprint
import "blueprint.tree" for TreeNode
import "shadergraph.nodes.parameter" for Parameter

class ClosureBuilder
{
	static gen_noise(gen, node, node_tree, proxy_name)
	{
        var f_idx = node.imports.count - 1
        if (node.imports[f_idx].conns.isEmpty) {
            return nil
        }
        var f_pin = node.imports[f_idx].conns.front().from
        var f_node = f_pin.node
        if (!f_node) {
            return
        }

        var new_func = this.build_real_func(node, node_tree, gen, f_node, proxy_name)
        if (new_func) {
            var old_func = node.node_func.module.query_func(proxy_name)
            gen.func_replace(old_func, new_func)
        }		
	}
    
    static build_real_func(node, node_tree, gen, f_node, proxy_name)
    {
        if (f_node["node_func"] == nil) {
            return nil
        }

        var node_func = f_node.node_func
        if (node_func["func"] == nil) {
            return nil
        }

        var callee_src = node_func.func

        var callee = node.node_func.module.create_decl_func(callee_src)
        gen.add_link_decl(callee, node_func.decl_name, false)

        var caller = node.node_func.module.create_func(proxy_name, "float", [ "vec2", "float" ])
        var pos = caller.get_param(0)
        var seed = caller.get_param(1)

        var prev_nodes = Blueprint.get_precursor_nodes(f_node)
        for (var pn in prev_nodes) {
            if (pn is Parameter) {
                if (pn.var_name == "p") {
                    pn.var_inst = pos
                }
                if (pn.var_name == "seed") {
                    pn.var_inst = seed
                }                
            }
        }        
        var args = this.get_func_args(node, node_tree, callee_src, f_node)

        var bb = caller.get_block()
        var ret = caller.call(callee, args)
        bb.return_value(ret)

        return caller
    }

    static get_func_args(node, node_tree, callee_src, f_node)
    {
        var args = []
        var names = callee_src.get_args()
        for (var name in names)
        {
            var pin = Blueprint.query_pin(f_node.imports, name)
            args.add(f_node.node_func.calc_pin_inst(pin, node_tree, node.node_func.module))
        }
        return args
    }	
}