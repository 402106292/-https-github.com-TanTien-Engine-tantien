import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction

var CODE = "
// from https://www.decarpentier.nl/scape
uniform sampler2D perlin_perm2d_tex;
uniform sampler2D perlin_grad2d_tex;
vec3 perlin_noise_deriv(vec2 p, float seed)
{
	// Calculate 2D integer coordinates i and fraction p.
	vec2 i = floor(p);
	vec2 f = p - i;

	// Get weights from the coordinate fraction
	vec2 w = f * f * f * (f * (f * 6 - 15) + 10); // 6f^5 - 15f^4 + 10f^3
	vec4 w4 = vec4(1, w.x, w.y, w.x * w.y);

	// Get the derivative dw/df
	vec2 dw = f * f * (f * (f * 30 - 60) + 30); // 30f^4 - 60f^3 + 30f^2

	// Get the derivative d(w*f)/df
	vec2 dwp = f * f * f * (f * (f * 36 - 75) + 40); // 36f^5 - 75f^4 + 40f^3

	// Get the four randomly permutated indices from the noise lattice nearest to
	// p and offset these numbers with the seed number.
	vec4 perm = texture(perlin_perm2d_tex, i / 256) + seed;

	// Permutate the four offseted indices again and get the 2D gradient for each
	// of the four permutated coordinates-seed pairs.
	vec4 g1 = texture(perlin_grad2d_tex, perm.xy) * 2 - 1;
	vec4 g2 = texture(perlin_grad2d_tex, perm.zw) * 2 - 1;

	// Evaluate the four lattice gradients at p
	float a = dot(g1.xy, f);
	float b = dot(g2.xy, f + vec2(-1,  0));
	float c = dot(g1.zw, f + vec2( 0, -1));
	float d = dot(g2.zw, f + vec2(-1, -1));

	// Bi-linearly blend between the gradients, using w4 as blend factors.
	vec4 grads = vec4(a, b - a, c - a, a - b - c + d);
	float n = dot(grads, w4);

	// Calculate the derivatives dn/dx and dn/dy
	float dx = (g1.x + (g1.z-g1.x)*w.y) + ((g2.y-g1.y)*f.y - g2.x + ((g1.y-g2.y-g1.w+g2.w)*f.y + g2.x +
	           g1.w - g2.z - g2.w)*w.y)*dw.x + ((g2.x-g1.x) + (g1.x-g2.x-g1.z+g2.z)*w.y)*dwp.x;
	float dy = (g1.y + (g2.y-g1.y)*w.x) + ((g1.z-g1.x)*f.x - g1.w + ((g1.x-g2.x-g1.z+g2.z)*f.x + g2.x +
	           g1.w - g2.z - g2.w)*w.x)*dw.y + ((g1.w-g1.y) + (g1.y-g2.y-g1.w+g2.w)*w.x)*dwp.y;

	return vec3(n, dx, dy) * 1.5;
}

"

class PerlinNoiseDeriv is Node
{
	init() 
	{
		super.init(PerlinNoiseDeriv.name)

		this.node_func = NodeFunction(this, CODE, "perlin_noise_deriv", [
			["seed", 0],
		])
	}
}