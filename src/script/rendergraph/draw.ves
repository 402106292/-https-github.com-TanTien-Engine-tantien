import "render" for Render
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.Blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_PORT
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "rendergraph.variant" for VAR_TYPE_SHADER, VAR_TYPE_VERTEX_ARRAY, VAR_TYPE_FRAME_BUFFER

class Draw is Node
{
	init()
	{
		super.init(Draw.name)

		this.imports = [
			Pin(this, "prev",   VAR_TYPE_PORT),
			Pin(this, "shader", VAR_TYPE_SHADER),
			Pin(this, "va",     VAR_TYPE_VERTEX_ARRAY),
			Pin(this, "fbo",    VAR_TYPE_FRAME_BUFFER)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.prim_types = [ "triangles", "tri_strip" ]
		this.prim_selected = 0

		// { "depth_test" : bool, "cull" : string }
		this.render_state = { 
			"depth_test" : false, 
			"depth_func" : "less", 
			"cull" : "disable"
		}

		// for gui
		this.depth_func_items = ["never", "less", "equal", "lequal", "greater", "notequal", "gequal", "always"]
		this.depth_func_selected = -1
		this.cull_items = ["disable", "front", "back", "front_and_back"]
		this.cull_selected = -1

		this.layout()
	}

	execute() 
	{
		var va = nil
		var conns = this.imports[2].conns
		if (!conns.isEmpty) {
			var f_pin = conns.front().from
			va = f_pin.node.calc(f_pin.slot_idx).value
		}

		var shader = Blueprint.getInputNode(this, 1)
		if (!shader or !shader.prog or !va) {
			return
		}

		var v_fbo = Blueprint.get_input_value(this, 3)
		if (v_fbo) {
			v_fbo.value.bind()
		}

		shader.updateUniforms()
		Render.draw(this.prim_types[this.prim_selected], shader.prog, va, this.render_state)

		if (v_fbo) {
			v_fbo.value.unbind()
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 4
	}

	toString(name) {
		return "
%(name).set_prim_type(\"%(this.prim_types[this.prim_selected])\")
%(name).render_state = %(this.render_state)
"
	}

	drawGUI(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calcPanelHeight() - DEFAULT_HEIGHT

		var item = GUI.combo(ctx, "prim", this.prim_selected, this.prim_types, x, y, 80)
		if (item != this.prim_selected) {
			this.prim_selected = item
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var depth_test = this.render_state["depth_test"]
		var _depth_test = GUI.checkbox(ctx, "depth test", depth_test, x, y)
		if (_depth_test != depth_test) {
			this.render_state["depth_test"] = _depth_test
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.depth_func_selected < 0) {
			var depth_func = this.render_state["depth_func"]
			this.depth_func_selected = this.depth_func_items.query_index(depth_func)
		}
		item = GUI.combo(ctx, "depth_func", this.depth_func_selected, this.depth_func_items, x, y, 80)
		if (item != this.depth_func_selected) {
			this.depth_func_selected = item
			this.render_state["depth_func"] = this.depth_func_items[this.depth_func_selected]
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.cull_selected < 0) {
			var cull = this.render_state["cull"]
			this.cull_selected = this.cull_items.query_index(cull)
		}

		item = GUI.combo(ctx, "cull", this.cull_selected, this.cull_items, x, y, 80)
		if (item != this.cull_selected) {
			this.cull_selected = item
			this.render_state["cull"] = this.cull_items[this.cull_selected]
			dirty = true				
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}

	set_prim_type(prim)
	{
		for (var i in 0..this.prim_types.count) {
			if (this.prim_types[i] == prim) {
				this.prim_selected = i
				// todo break
			}		
		}
	}
}