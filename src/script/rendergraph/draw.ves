import "render" for Render
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.Blueprint" for Blueprint
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT

class Draw is Node
{
	init()
	{
		super.init(Draw.name)

		this.imports = [
			Pin(this, "prev", "port"),
			Pin(this, "shader", "shader"),
			Pin(this, "va", "va")				
		]
		this.exports = [
			Pin(this, "next", "port")
		]

		// [ "triangles" ]
		this.prim_type = "triangles"

		// { "depth_test" : bool, "cull" : string }
		this.render_state = { 
			"depth_test" : false, 
			"depth_func" : "never", 
			"cull" : "disable"
		}

		// for gui
		this.depth_func_items = ["never", "less", "equal", "lequal", "greater", "notequal", "gequal", "always"]
		this.depth_func_selected = -1
		this.cull_items = ["disable", "front", "back", "front_and_back"]
		this.cull_selected = -1

		this.layout()
	}

	execute() 
	{
		var shader = Blueprint.getInputNode(this, 1)
		var va = Blueprint.getInputNode(this, 2)
		if (shader and shader.prog and va and va.va) {
			shader.updateUniforms()
			Render.draw(this.prim_type, shader.prog, va.va, this.render_state)
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 3
	}

	toString(name) {
		return "
%(name).prim_type = \"%(this.prim_type)\"
%(name).render_state = %(this.render_state)
"
	}

	drawGUI(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calcPanelHeight() - DEFAULT_HEIGHT

		var depth_test = this.render_state["depth_test"]
		var _depth_test = GUI.checkbox(ctx, "depth test", depth_test, x, y)
		if (_depth_test != depth_test) {
			this.render_state["depth_test"] = _depth_test
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.depth_func_selected < 0) {
			var depth_func = this.render_state["depth_func"]
			this.depth_func_selected = this.query_item_index(this.depth_func_items, depth_func)
		}
		var item = GUI.combo(ctx, "depth_func", this.depth_func_selected, this.depth_func_items, x, y, 80)
		if (item != this.depth_func_selected) {
			this.depth_func_selected = item
			this.render_state["depth_func"] = this.depth_func_items[this.depth_func_selected]
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.cull_selected < 0) {
			var cull = this.render_state["cull"]
			this.cull_selected = this.query_item_index(this.cull_items, cull)
		}

		item = GUI.combo(ctx, "cull", this.cull_selected, this.cull_items, x, y, 80)
		if (item != this.cull_selected) {
			this.cull_selected = item
			this.render_state["cull"] = this.cull_items[this.cull_selected]
			dirty = true				
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}

	query_item_index(items, name)
	{
		for (var i in 0..items.count) {
			if (items[i] == name) {
				return i
			}		
		}
		return -1
	}
}