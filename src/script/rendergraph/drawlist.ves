import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.subgraph" for Subgraph
import "rendergraph.nodes.pass" for Pass
import "rendergraph.nodes.draw" for Draw
import "rendergraph.nodes.compute" for Compute

class Drawlist
{
	init(nodes)
	{
		this.lists = []

		this.build_lists(nodes)
	}

	build_lists(nodes)
	{
		// 0. find Pass, Draw and Compute
		for (var node in nodes) 
		{
			if (node is Pass and node.exports[0].conns.isEmpty) {
				this.build_list([ node ])
			} else if ((node is Draw or node is Compute) and node.exports[0].conns.isEmpty) {
				var prev_nodes = Blueprint.get_precursor_nodes(node)
				this.build_list(prev_nodes)
			}
		}
		if (!this.lists.isEmpty) {
			return
		}

		// 1. find Subgraph
		if (this.lists.isEmpty) {
			for (var node in nodes) {
				if (node is Subgraph and node.exports[0].conns.isEmpty) {
					var prev_node = Blueprint.get_input_node(node, 0)
					if (prev_node) {
						var prev_nodes = Blueprint.get_precursor_nodes(prev_node)
						this.build_list(prev_nodes)
					}
				}
			}
		}
		if (!this.lists.isEmpty) {
			return
		}

		// 2. all
		this.build_list(nodes)
	}

	build_list(nodes)
	{
		var sorted = Blueprint.topo_sort(nodes)

		for (var node in sorted) {
			if (node.has_method("render_gen()")) {
				node.render_gen()
			}
		}

		var list = []
		for (var node in sorted) {
			if (node.has_method("render_run()")) {
				list.add(node)
			}
		}
		if (!list.isEmpty) {
			this.lists.add(list)
		}
	}

	run()
	{
		for (var list in this.lists) 
		{
			var skip = false
			if (!list.isEmpty and list[list.count - 1] is Draw and list[list.count - 1].skip) {
				skip = true
			}
			if (!skip)
			{
				for (var node in list) {
					if (node.has_method("render_run()")) {
						node.render_run()
					}
				}
			}
		}
	}
}