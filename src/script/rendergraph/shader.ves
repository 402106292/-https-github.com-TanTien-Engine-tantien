import "render" for Shader as r_Shader, Render
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "maths" for Matrix44

class Shader is Node
{
	init() 
	{
		super.init(Shader.name)

		this.exports = [
			Pin(this, "out", "shader")
		]

		this.vs = nil
		this.fs = nil

		this.prog = nil
		this.dirty = true

		this.uniforms = []

		this.layout()
	}

	getShaderUniforms(stage, code)
	{
		var uniforms = Render.getShaderUniforms(stage, code, "glsl")
		// init
		for (var unif in uniforms)
		{
			if (unif[1] == "mat4") {
				unif[2] = Matrix44.init()
			} else if (unif[1] == "sampler") {
				unif[2] = nil
				unif[3] = nil
			}
		}
		return uniforms
	}

	execute() 
	{
		if (!this.vs or !this.fs or !this.dirty) {
			return
		}

		this.uniforms = this.getShaderUniforms("vertex", this.vs)
		var fs_unifs = this.getShaderUniforms("pixel", this.fs)
		for (var unif in fs_unifs) {
			this.uniforms.add(unif)
		}
		for (var unif in this.uniforms) {
			this.imports.add(Pin(this, unif[0], unif[1]))
		}

		this.layout()

		this.prog = r_Shader.init(this.vs, this.fs)
		this.dirty = false
	}

	layout() 
	{
		super.layout()

		// uniforms
		for (var unif in this.uniforms)
		{
			if (unif[1] == "float") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT
			} else if (unif[1] == "float2") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 2
			} else if (unif[1] == "float3") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 3
			} else if (unif[1] == "float4") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 4
			}
		}
	}

	toString(name) {
		return "
%(name).vs = \"%(this.vs)\"
%(name).fs = \"%(this.fs)\"
%(name).execute()
"
	}

	drawGUI(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calcPanelHeight()

		for (var unif in this.uniforms)
		{
			y = y - DEFAULT_HEIGHT
			if (unif[1] != "sampler" and unif[1] != "mat2" and unif[1] != "mat3" and unif[1] != "mat4") {
		    	GUI.label(ctx, unif[0], x, y)	
			}

			if (unif[1] == "float")
			{
				var unif_dirty = false

				y = y - DEFAULT_HEIGHT
			    var r = GUI.slider(ctx, "x", unif[2], x, y, this.style.width - 20, 1, false)
			    if (r != unif[2]) {
			    	unif[2] = r
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.setUniformValue(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float2")
			{
				var unif_dirty = false

				y = y - DEFAULT_HEIGHT
			    var r = GUI.slider(ctx, "x", unif[2], x, y, this.style.width - 20, 1, false)
			    if (r != unif[2]) {
			    	unif[2] = r
			    	unif_dirty = true
			    }

				y = y - DEFAULT_HEIGHT
			    var g = GUI.slider(ctx, "y", unif[3], x, y, this.style.width - 20, 1, false)
			    if (g != unif[3]) {
			    	unif[3] = g
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.setUniformValue(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float3")
			{
				var unif_dirty = false

				y = y - DEFAULT_HEIGHT
			    var r = GUI.slider(ctx, "x", unif[2], x, y, this.style.width - 20, 1, false)
			    if (r != unif[2]) {
			    	unif[2] = r
			    	unif_dirty = true
			    }

				y = y - DEFAULT_HEIGHT
			    var g = GUI.slider(ctx, "y", unif[3], x, y, this.style.width - 20, 1, false)
			    if (g != unif[3]) {
			    	unif[3] = g
			    	unif_dirty = true
			    }

				y = y - DEFAULT_HEIGHT
			    var b = GUI.slider(ctx, "z", unif[4], x, y, this.style.width - 20, 1, false)
			    if (b != unif[4]) {
			    	unif[4] = b
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.setUniformValue(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float4")
			{
				var unif_dirty = false

				y = y - DEFAULT_HEIGHT
			    var r = GUI.slider(ctx, "x", unif[2], x, y, this.style.width - 20, 1, false)
			    if (r != unif[2]) {
			    	unif[2] = r
			    	unif_dirty = true
			    }

				y = y - DEFAULT_HEIGHT
			    var g = GUI.slider(ctx, "y", unif[3], x, y, this.style.width - 20, 1, false)
			    if (g != unif[3]) {
			    	unif[3] = g
			    	unif_dirty = true
			    }

				y = y - DEFAULT_HEIGHT
			    var b = GUI.slider(ctx, "z", unif[4], x, y, this.style.width - 20, 1, false)
			    if (b != unif[4]) {
			    	unif[4] = b
			    	unif_dirty = true
			    }

				y = y - DEFAULT_HEIGHT
			    var a = GUI.slider(ctx, "w", unif[5], x, y, this.style.width - 20, 1, false)
			    if (a != unif[4]) {
			    	unif[5] = a
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.setUniformValue(unif)
			    	dirty = true
			    }
			}
		}

		return dirty
	}

	updateUniforms()
	{
		for (var i = 0; i < this.uniforms.count; i = i + 1)
		{
			var unif = this.uniforms[i]
			var conns = this.imports[i].conns
			if (!conns.isEmpty)
			{
				var f_pin = conns.front().from
				var val = f_pin.node.calc(f_pin.slot_idx)
				if (unif[1] == "float") {
					unif[2] = val.value
				} else if (unif[1] == "float2") {
					unif[2] = val.value.x
					unif[3] = val.value.y
				} else if (unif[1] == "float3") {
					unif[2] = val.value.x
					unif[3] = val.value.y
					unif[4] = val.value.z
				}  else if (unif[1] == "float4") {
					unif[2] = val.value.x
					unif[3] = val.value.y
					unif[4] = val.value.z
					unif[5] = val.value.w
				} else if (unif[1] == "mat2") {
					unif[2] = val.value
				} else if (unif[1] == "mat3") {
					unif[2] = val.value
				} else if (unif[1] == "mat4") {
					unif[2] = val.value
				} else if (unif[1] == "sampler") {
					unif[2] = val.value[0]
					unif[3] = val.value[1]
				}
			}
			this.prog.setUniformValue(unif)
		}
	}
}