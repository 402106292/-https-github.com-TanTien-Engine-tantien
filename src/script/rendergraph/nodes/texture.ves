import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.node_param" for NodeParam
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "rendergraph.variant" for VarTexture, VAR_TYPE_TEXTURE
import "image" for ImageData
import "graphics" for Graphics
import "render" for Texture2D, TextureSampler
import "gui" for GUI

class Texture is Node
{
	init() 
	{
		super.init(Texture.name)

		this.exports = [
			Pin(this, "tex", VAR_TYPE_TEXTURE),
			Pin(this, "width", VAR_TYPE_NUMBER),
			Pin(this, "height", VAR_TYPE_NUMBER),
		]

		this.layout()

		this.tex = nil
		this.sampler = nil

		this.tex_filepath = ""

		this.width  = 0
		this.height = 0
		this.format = "rgba8"

		this.gamma_correction = false

		this.params.add(NodeParam("unif_name", "u_tex"))

		this.unif = nil
		this.unif_name = nil

		// for gui
		this.sampler_items = ["null", "nearest_clamp", "linear_clamp", "linear_clamp_mipmap", "nearest_repeat", "linear_repeat"]
		this.sampler_selected = 0
		this.fomat_items = ["rgb", "rgba8", "rgba16f", "rg16f", "r16"]
		this.format_selected = 0
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var ret = VarTexture()
			ret.tex = this.tex
			ret.sampler = this.sampler
			return Variant(VAR_TYPE_TEXTURE, ret)
		}
		else if (idx == 1)
		{
			var width = 0
			if (this.tex) {
				width = this.tex.get_width()		
			}
			return Variant(VAR_TYPE_NUMBER, width)
		}
		else if (idx == 2)
		{
			var height = 0
			if (this.tex) {
				height = this.tex.get_height()
			}
			return Variant(VAR_TYPE_NUMBER, height)
		}

		return nil
	}

    shader_gen(ctx)
    {
		super.shader_gen(ctx)

    	this.unif = nil
    	this.unif_name = nil
    }

	calc_inst(idx, ctx) 
	{
		if (!this.unif) 
		{
			var name = this.query_param("unif_name").value
			this.unif = ctx.gen.add_uniform(ctx.module, name, "texture")
			this.unif_name = ctx.gen.query_unif_name(this.unif)
		}

		if (this.unif) {
			return ctx.bb.load(this.unif)
		} else {
			return nil
		}
	}

	bind_uniforms(prog)
	{
		if (this.unif) {
			prog.set_uniform_value([this.unif_name, "sampler", [this.tex, this.sampler]])
		}
	}

	draw(mt, cam_mt)
	{
		super.draw(mt, cam_mt)

		if (this.tex)
		{
			var scale = this.style.width / this.tex.get_width()
			var x = this.pos.x
			var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT - this.tex.get_height() * scale * 0.5 - DEFAULT_HEIGHT
			Graphics.draw_texture(this.tex, x, y, scale)
		}
	}

	layout()
	{
		super.layout()

		// sampler
		this.style.width = 200
		this.style.height = this.style.height + DEFAULT_HEIGHT

		// gamma_correction
		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) 
	{
		var ret = super.to_string(name)
		ret = ret + "%(name).gamma_correction = %(this.gamma_correction)\n"
		if (this.width != 0 and this.height != 0) {
			ret = ret + "%(name).init_texture(%(this.width), %(this.height), \"%(this.format)\")\n"
		} else {
			ret = ret + "%(name).init_texture(\"%(this.tex_filepath)\")\n"
		}
		if (this.sampler) {
			ret = ret + "%(name).set_sampler(\"%(this.sampler_items[this.sampler_selected])\")\n"
		}
		return ret
	}

	draw_gui(ctx)
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var item = GUI.combo(ctx, "sampler", this.sampler_selected, this.sampler_items, x, y, 130)
		if (item != this.sampler_selected) {
			this.sampler_selected = item
			this.sampler = TextureSampler.init(this.sampler_items[this.sampler_selected])
			dirty = true
		}

		y = y - DEFAULT_HEIGHT
		var _gamma_correction = GUI.checkbox(ctx, "gamma_correction", this.gamma_correction, x, y)
		if (_gamma_correction != this.gamma_correction) 
		{
			this.gamma_correction = _gamma_correction
			dirty = true
			this.init_texture(this.tex_filepath)
		}

		return dirty
	}

	init_texture(filepath)
	{
		this.tex_filepath = filepath

		var img = ImageData.init(filepath)
		this.tex = Texture2D.init(img, this.gamma_correction)
	}

	init_texture(width, height, format)
	{
		this.width  = width
		this.height = height
		this.format = format

		this.tex = Texture2D.init(width, height, format)
	}

	set_sampler(name)
	{
		for (var i in 0..this.sampler_items.count) {
			if (this.sampler_items[i] == name) {
				this.sampler_selected = i
				this.sampler = TextureSampler.init(name)
				return
			}
		}
	}

	init_unif_name(name)
	{
		if (this.query_param("unif_name").value == "u_tex") {
			this.query_param("unif_name").value = name
		}
	}
}