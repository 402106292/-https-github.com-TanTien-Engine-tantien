import "render" for Render
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.Blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_PORT
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "rendergraph.variant" for VAR_TYPE_SHADER, VAR_TYPE_VERTEX_ARRAY, VAR_TYPE_FRAME_BUFFER, VAR_TYPE_MODEL
import "math" for Math

class Draw is Node
{
	init()
	{
		super.init(Draw.name)

		this.imports = [
			Pin(this, "prev",   VAR_TYPE_PORT),
			Pin(this, "shader", VAR_TYPE_SHADER),
			Pin(this, "va",     VAR_TYPE_VERTEX_ARRAY),
			Pin(this, "fbo",    VAR_TYPE_FRAME_BUFFER),
			Pin(this, "model",  VAR_TYPE_MODEL)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.prim_types = [ "points", "triangles", "tri_strip", "patches" ]
		this.prim_selected = 1

		this.render_state = { 
			"depth_test" : false, 
			"depth_func" : "less", 
			"stencil_test" : false, 
			"stencil_mask" : 255,
			"stencil_func" : "always",
			"stencil_ref" : 0,
			"cull" : "disable",
			"rasterization" : "fill",
			"clip_plane" : false,
			"blend" : false,
		}

		// for gui
		this.depth_func_items = ["never", "less", "equal", "lequal", "greater", "notequal", "gequal", "always"]
		this.depth_func_selected = -1
		this.cull_items = ["disable", "front", "back", "front_and_back"]
		this.cull_selected = -1
		this.rasterization_items = ["point", "line", "fill"]
		this.rasterization_selected = 2

		this.skip = false

		this.layout()
	}

	execute() 
	{
		if (this.skip) {
			return
		}

		var v_shader = Blueprint.calc_input_value(this, 1).value
		if (!v_shader or !v_shader.prog) {
			return
		}

		var v_fbo = Blueprint.calc_input_value(this, 3).value

		var model = Blueprint.calc_input_value(this, 4).value
		if (model and model.model)
		{
			this.draw_model(v_shader, model.model, v_fbo)
			return
		}

		var va = nil
		var v_va = Blueprint.calc_input_value(this, 2)
		if (v_va) {
			va = v_va.value
		}
		if (!va) {
			return
		}

		var count = v_shader.get_frame_count()
		if (va is List) {
			count = Math.max(count, va.count)
			if (va.isEmpty)	{
				return
			}	
		}

		if (v_fbo is List) {
			count = Math.max(count, v_fbo.count)	
		}

		for (var i in 0..count) 
		{
			v_shader.update_uniforms(i)

			var _va = va
			if (va is List) 
			{
				if (i < va.count) {
					_va = va[i].value
				} else {
					_va = va[va.count - 1].value
				}
			}

			var _fbo = v_fbo
			if (v_fbo and v_fbo is List)
			{
				if (i < v_fbo.count) {
					_fbo = v_fbo[i].value
				} else {
					_fbo = v_fbo[v_fbo.count - 1].value
				}
			}

			if (_fbo) {
				_fbo.bind()
			}
			Render.draw(this.prim_types[this.prim_selected], v_shader.prog, _va, this.render_state)
			if (_fbo) {
				_fbo.unbind()
			}
		}
	}

	draw_model(shader, model, fbo)
	{
		if (fbo and !(fbo is List)) {
			fbo.bind()
		}

		var count = shader.get_frame_count()
		for (var i in 0..count) 
		{
			shader.update_uniforms(i)
			Render.draw_model(shader.prog, model, this.render_state)
		}

		if (fbo and !(fbo is List)) {
			fbo.unbind()
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 7
	}

	to_string(name) 
	{
		return "
%(name).set_prim_type(\"%(this.prim_types[this.prim_selected])\")
%(name).render_state = %(this.render_state)
%(name).skip = %(this.skip)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var skip = GUI.checkbox(ctx, "skip", this.skip, x, y)
		if (skip != this.skip) {
			this.skip = skip
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var item = GUI.combo(ctx, "prim", this.prim_selected, this.prim_types, x, y, 80)
		if (item != this.prim_selected) {
			this.prim_selected = item
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var depth_test = this.render_state["depth_test"]
		var _depth_test = GUI.checkbox(ctx, "depth test", depth_test, x, y)
		if (_depth_test != depth_test) {
			this.render_state["depth_test"] = _depth_test
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.depth_func_selected < 0) {
			var depth_func = this.render_state["depth_func"]
			this.depth_func_selected = this.depth_func_items.query_index(depth_func)
		}
		item = GUI.combo(ctx, "depth_func", this.depth_func_selected, this.depth_func_items, x, y, 80)
		if (item != this.depth_func_selected) {
			this.depth_func_selected = item
			this.render_state["depth_func"] = this.depth_func_items[this.depth_func_selected]
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.cull_selected < 0) {
			var cull = this.render_state["cull"]
			this.cull_selected = this.cull_items.query_index(cull)
		}

		item = GUI.combo(ctx, "cull", this.cull_selected, this.cull_items, x, y, 80)
		if (item != this.cull_selected) {
			this.cull_selected = item
			this.render_state["cull"] = this.cull_items[this.cull_selected]
			dirty = true				
		}
		y = y - DEFAULT_HEIGHT

		item = GUI.combo(ctx, "rasterization", this.rasterization_selected, this.rasterization_items, x, y, 80)
		if (item != this.rasterization_selected) {
			this.rasterization_selected = item
			this.render_state["rasterization"] = this.rasterization_items[this.rasterization_selected]
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.render_state["clip_plane"] == nil) {
			this.render_state["clip_plane"] = false
		}
		var clip_plane = GUI.checkbox(ctx, "clip_plane", this.render_state["clip_plane"], x, y)
		if (clip_plane != this.render_state["clip_plane"]) {
			this.render_state["clip_plane"] = clip_plane
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (this.render_state["blend"] == nil) {
			this.render_state["blend"] = false
		}
		var blend = GUI.checkbox(ctx, "blend", this.render_state["blend"], x, y)
		if (blend != this.render_state["blend"]) {
			this.render_state["blend"] = blend
			dirty = true
		}
		y = y - DEFAULT_HEIGHT
		
		return dirty
	}

	set_prim_type(prim)
	{
		for (var i in 0..this.prim_types.count) {
			if (this.prim_types[i] == prim) {
				this.prim_selected = i
				// todo break
			}		
		}
	}
}