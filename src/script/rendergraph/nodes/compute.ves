import "blueprint.node" for Node
import "rendergraph.variant" for VAR_TYPE_SHADER
import "render" for Render
import "blueprint.blueprint" for Blueprint
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_PORT

class Compute is Node
{
	init()
	{
		super.init(Compute.name)

		this.imports = [
			Pin(this, "prev",   VAR_TYPE_PORT),
			Pin(this, "shader", VAR_TYPE_SHADER),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.num_groups = [1, 1, 1]

		this.layout()

		this.dirty = true
	}

	execute() 
	{
		if (!this.dirty) {
			return
		}

		var v_shader = Blueprint.calc_input_value(this, 1).value
		if (!v_shader or !v_shader.prog) {
			return
		}

		var count = v_shader.get_frame_count()
		for (var i in 0..count) 
		{
			v_shader.update_uniforms(i)
			Render.compute(v_shader.prog, this.num_groups[0], this.num_groups[1], this.num_groups[2])
		}

		this.dirty = false
	}

	to_string(name) 
	{
		return "
%(name).num_groups = %(this.num_groups)
"
	}	
}