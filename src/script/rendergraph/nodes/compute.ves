import "blueprint.node" for Node
import "rendergraph.variant" for VAR_TYPE_SHADER
import "render" for Render
import "blueprint.blueprint" for Blueprint
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_PORT, VAR_TYPE_NUMBER3

class Compute is Node
{
	init()
	{
		super.init(Compute.name)

		this.imports = [
			Pin(this, "prev",       VAR_TYPE_PORT),
			Pin(this, "shader",     VAR_TYPE_SHADER),
			Pin(this, "num_groups", VAR_TYPE_NUMBER3),			
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.num_groups = [1, 1, 1]

		this.layout()

		this.need_rebuild = true
	}

	render_gen()
	{
		this.need_rebuild = true
	}

	render_run() 
	{
		if (!this.need_rebuild) {
			return
		}

		var v_shader = Blueprint.calc_input_value(this, 1).value
		if (!v_shader or !v_shader.prog) {
			return
		}

		var num_groups = []
		var v_num_groups = Blueprint.calc_input_value(this, 2)
		if (v_num_groups) {
			num_groups.add(v_num_groups.value.x)
			num_groups.add(v_num_groups.value.y)
			num_groups.add(v_num_groups.value.z)			
		} else {
			num_groups.add(this.num_groups[0])
			num_groups.add(this.num_groups[1])
			num_groups.add(this.num_groups[2])			
		}

		var count = v_shader.get_frame_count()
		for (var i in 0..count) 
		{
			v_shader.update_uniforms(i)
			Render.compute(v_shader.prog, num_groups[0], num_groups[1], num_groups[2])
		}

//		this.need_rebuild = false
	}

	to_string(name) 
	{
		return "
%(name).num_groups = %(this.num_groups)
"
	}	
}