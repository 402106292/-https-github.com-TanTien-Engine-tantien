import "render" for Shader as tt_Shader, Render
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.variant" for VAR_TYPE_UNKNOWN, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_MATRIX2, VAR_TYPE_MATRIX3, VAR_TYPE_MATRIX4, VAR_TYPE_ARRAY
import "maths" for Matrix44
import "rendergraph.variant" for VAR_TYPE_SHADER, VAR_TYPE_TEXTURE
import "math" for Math

class Shader is Node
{
	init() 
	{
		super.init(Shader.name)

		this.exports = [
			Pin(this, "out", VAR_TYPE_SHADER)
		]

		this.vs = ""
		this.fs = ""
		this.gs = ""

		this.prog = nil
		this.dirty = true

		this.uniforms = []

		this.layout()

		this.fold_array = false
	}

	get_shader_uniforms(stage, code)
	{
		var uniforms = Render.get_shader_uniforms(stage, code, "glsl")
		// init
		for (var unif in uniforms)
		{
			if (unif[1] == "mat4") {
				unif[2][0] = Matrix44.init()
			} else if (unif[1] == "sampler") {
				unif[2][0] = nil
				unif[2][1] = nil
			}
		}
		return uniforms
	}

	get_shader_uniforms()
	{
		var uniforms = this.get_shader_uniforms("vertex", this.vs)
		var fs_unifs = this.get_shader_uniforms("pixel", this.fs)
		for (var unif in fs_unifs) {
			uniforms.add(unif)
		}
		if (this.gs) {
			var gs_unifs = this.get_shader_uniforms("geometry", this.gs)
			for (var unif in gs_unifs) {
				uniforms.add(unif)
			}	
		}
		return uniforms
	}

	add_uniform_to_imports(unif)
	{
		if ((!this.fold_array and unif[1] == "array") or unif[1] == "struct") {
			for (var u in unif[2]) {
				this.add_uniform_to_imports(u)
			}
		} else {
			var pin_type = this.type_uniform_to_pin(unif[1])
			var pin = Pin(this, unif[0], pin_type)
			pin.unif = unif
			this.imports.add(pin)
		}
	}

	execute() 
	{
		if (!this.vs or !this.fs or !this.dirty) {
			return
		}

		this.uniforms = this.get_shader_uniforms()
		for (var unif in this.uniforms) {
			this.add_uniform_to_imports(unif)
		}

		this.layout()

		this.prog = tt_Shader.init(this.vs, this.fs, this.gs)
		this.dirty = false
	}

	layout(unif)
	{
		if ((!this.fold_array and unif[1] == "array") or unif[1] == "struct")
		{
			for (var u in unif[2]) {
				this.layout(u)
			}
		}
		else
		{
			if (unif[1] == "float" or unif[1] == "int") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT
			} else if (unif[1] == "float2" or unif[1] == "int2") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 2
			} else if (unif[1] == "float3" or unif[1] == "int3") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 3
			} else if (unif[1] == "float4" or unif[1] == "int4") {
				this.style.height = this.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 4
			}
		}
	}

	layout() 
	{
		super.layout()

		this.style.width = 180

		for (var unif in this.uniforms) {
			this.layout(unif)
		}
	}

	set_uniform(unif, name, value)
	{
		if (unif[1] == "array" or unif[1] == "struct")
		{
			for (var u in unif[2]) {
				this.set_uniform(u, name, value)
			}		
		}
		else if (unif[0] == name)
		{
			for (var i in 0..value.count) {
				unif[2][i] = value[i]
			}
		}
	}

	set_uniform(name, value)
	{
		for (var unif in this.uniforms) {
			this.set_uniform(unif, name, value)
		}
	}

	uniform_to_string(name, unif)
	{
		var ret = ""

		for (var p in this.imports) {
			if (p.name == unif[0]) {
				if (!p.conns.isEmpty) {
					return ret
				}
			}
		}

		if (unif[1] == "array" or unif[1] == "struct") 
		{
			for (var u in unif[2]) {
				ret = ret + this.uniform_to_string(name, u)
			}
		} 
		else 
		{
			if (unif[1] == "float" or unif[1] == "int") {
				ret = "%(name).set_uniform(\"%(unif[0])\", [ %(unif[2][0]) ])\n"
			} else if (unif[1] == "float2" or unif[1] == "int2") {
				ret = "%(name).set_uniform(\"%(unif[0])\", [ %(unif[2][0]), %(unif[2][1]) ])\n"
			} else if (unif[1] == "float3" or unif[1] == "int3") {
				ret = "%(name).set_uniform(\"%(unif[0])\", [ %(unif[2][0]), %(unif[2][1]), %(unif[2][2]) ])\n"
			} else if (unif[1] == "float4" or unif[1] == "int4") {
				ret = "%(name).set_uniform(\"%(unif[0])\", [ %(unif[2][0]), %(unif[2][1]), %(unif[2][2]), %(unif[2][3]) ])\n"
			}
		}

		return ret
	}

	to_string(name) 
	{
		var code = "
%(name).vs = \"%(this.vs)\"
%(name).fs = \"%(this.fs)\"
%(name).gs = \"%(this.gs)\"
%(name).execute()
"
		for (var unif in this.uniforms) {
			code = code + this.uniform_to_string(name, unif)
		}
		return code
	}

	draw_gui(ctx, unif, x, y)
	{
		var dirty = false

		if ((!this.fold_array and unif[1] == "array") or unif[1] == "struct")
		{
			for (var u in unif[2]) {
				var y_d = this.draw_gui(ctx, u, x, y)
				y = y_d[0]
				if (y_d[1]) {
					dirty = true
				}
			}
		}
		else
		{			
			if (unif[1] != "sampler" and unif[1] != "mat2" and unif[1] != "mat3" and unif[1] != "mat4") {
		    	GUI.label(ctx, unif[0], x, y)
				y = y - DEFAULT_HEIGHT
			}

			var region = 10
			if (unif[1] == "int" or unif[1] == "int2" or unif[1] == "int3" or unif[1] == "int4") {
				region = 10
			}

			if (unif[1] == "float" or unif[1] == "int")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float2" or unif[1] == "int2")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    var g = GUI.slider(ctx, "y", unif[2][1], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (g != unif[2][1]) {
			    	unif[2][1] = g
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float3" or unif[1] == "int3")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    var g = GUI.slider(ctx, "y", unif[2][1], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (g != unif[2][1]) {
			    	unif[2][1] = g
			    	unif_dirty = true
			    }

			    var b = GUI.slider(ctx, "z", unif[2][2], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (b != unif[2][2]) {
			    	unif[2][2] = b
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float4" or unif[1] == "int4")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    var g = GUI.slider(ctx, "y", unif[2][1], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (g != unif[2][1]) {
			    	unif[2][1] = g
			    	unif_dirty = true
			    }

			    var b = GUI.slider(ctx, "z", unif[2][2], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (b != unif[2][2]) {
			    	unif[2][2] = b
			    	unif_dirty = true
			    }

			    var a = GUI.slider(ctx, "w", unif[2][3], x, y, this.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (a != unif[2][3]) {
			    	unif[2][3] = a
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	this.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
		}

		return [y, dirty]
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calcPanelHeight() - DEFAULT_HEIGHT

		for (var unif in this.uniforms) {
			var y_d = this.draw_gui(ctx, unif, x, y)
			y = y_d[0]
			if (y_d[1]) {
				dirty = true
			}
		}

		return dirty
	}

	get_frame_count()
	{
		var count = 1
		for (var i in 0..this.imports.count) 
		{
			if (this.imports[i].unif[1] != "array") {
				var v = Blueprint.calc_input_value(this, i)
				if (v.value is List) {
					count = Math.max(count, v.value.count)
				}
			}
		}
		return count
	}

	update_uniforms(frame, unif)
	{
		if (unif[1] == "array" or unif[1] == "struct") {
			for (var u in unif[2]) {
				this.update_uniforms(frame, u)
			}
		} else {
			this.prog.set_uniform_value(unif)
		}
	}

	set_uniform_value(dst, src)
	{
		if (dst[1] == "float" or dst[1] == "int") {
			dst[2][0] = src
		} else if (dst[1] == "float2" or dst[1] == "int2") {
			dst[2][0] = src.x
			dst[2][1] = src.y
		} else if (dst[1] == "float3" or dst[1] == "int3") {
			dst[2][0] = src.x
			dst[2][1] = src.y
			dst[2][2] = src.z
		}  else if (dst[1] == "float4" or dst[1] == "int4") {
			dst[2][0] = src.x
			dst[2][1] = src.y
			dst[2][2] = src.z
			dst[2][3] = src.w
		} else if (dst[1] == "mat2") {
			dst[2][0] = src
		} else if (dst[1] == "mat3") {
			dst[2][0] = src
		} else if (dst[1] == "mat4") {
			dst[2][0] = src
		} else if (dst[1] == "sampler") {
			dst[2][0] = src.tex
			dst[2][1] = src.sampler
		}
	}

	update_unif_values_from_conns(frame)
	{
		for (var pin in this.imports)
		{
			var conns = pin.conns
			if (!conns.isEmpty)
			{
				var f_pin = conns.front().from
				var val = f_pin.node.calc(f_pin.slot_idx)
				if (val)
				{
					var unif = pin.unif

					var _v = nil
					if (val.type == VAR_TYPE_ARRAY)
					{
						if (unif[1] == "array")
						{
							var n = Math.min(val.value.count, unif[2].count)
							for (var i in 0..n) {
								this.set_uniform_value(unif[2][i], val.value[i].value)
							}
						}
						else
						{
							if (frame < val.value.count) {
								_v = val.value[frame].value
							} else if (!val.value.isEmpty) {
								_v = val.value[val.value.count - 1].value
							}
						}
					}
					else
					{
						_v = val.value
					}
					if (_v) {
						this.set_uniform_value(unif, _v)
					}
				}
			}
		}
	}

	update_uniforms(frame)
	{
		this.update_unif_values_from_conns(frame)

		for (var unif in this.uniforms) {
			this.update_uniforms(frame, unif)
		}
	}

	type_uniform_to_pin(unif_type)
	{
		var pin_type = VAR_TYPE_UNKNOWN
		if (unif_type == "bool" or unif_type == "int" or unif_type == "float") {
			pin_type = VAR_TYPE_NUMBER
		} else if (unif_type == "int2" or unif_type == "float2") {
			pin_type = VAR_TYPE_NUMBER2
		} else if (unif_type == "int3" or unif_type == "float3") {
			pin_type = VAR_TYPE_NUMBER3
		} else if (unif_type == "int4" or unif_type == "float4") {
			pin_type = VAR_TYPE_NUMBER4
		} else if (unif_type == "mat2") {
			pin_type = VAR_TYPE_MATRIX2
		} else if (unif_type == "mat3") {
			pin_type = VAR_TYPE_MATRIX3
		} else if (unif_type == "mat4") {
			pin_type = VAR_TYPE_MATRIX4
		} else if (unif_type == "sampler") {
			pin_type = VAR_TYPE_TEXTURE
		}
		return pin_type
	}
}