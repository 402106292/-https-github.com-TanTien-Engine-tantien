import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_PORT
import "rendergraph.variant" for VAR_TYPE_FRAME_BUFFER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_helper" for node_setup
import "render" for Render
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI

class Pass is Node
{
	init()
	{
		super.init(Pass.name)

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "fbo",  VAR_TYPE_FRAME_BUFFER)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.imports[0].stop_port_pass = true
		this.imports[1].stop_port_pass = true
		
		this.layout()

		this.drawlist = []

		this.once = false
		this.executed = false
	}

	setup()
	{
		var prev = Blueprint.get_input_node(this, 0)
		if (prev)
		{
			var nodes = Blueprint.get_precursor_nodes(prev)
			this.drawlist = Blueprint.topo_sort(nodes)

			for (var node in this.drawlist) {
				node_setup(node)
			}
		}

		var fbo = Blueprint.get_input_node(this, 1)
		if (fbo) {
			var prev_nodes = Blueprint.get_precursor_nodes(fbo)
			var sorted = Blueprint.topo_sort(prev_nodes)
			for (var node in sorted) {
				node_setup(node)
			}
		}
	}

	execute() 
	{
		if (this.once and this.executed) {
			return
		}

		var prev_fbo = nil
		var prev_vp = nil
		var v_fbo = Blueprint.calc_input_value(this, 1).value
		var count = 1
		if (v_fbo and v_fbo is List) {
			count = v_fbo.count
		}

		for (var i in 0..count) 
		{
			var _fbo = v_fbo
			if (v_fbo and v_fbo is List)
			{
				if (i < v_fbo.count) {
					_fbo = v_fbo[i].value
				} else {
					_fbo = v_fbo[v_fbo.count - 1].value
				}
			}

			if (_fbo) {
				_fbo.bind()
			}

			for (var node in this.drawlist) {
				if (node.has_method("execute()")) {
					node.execute()
				}
			}

			if (_fbo) {
				_fbo.unbind()
			}
		}

		this.executed = true
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) {
		return "
%(name).once = %(this.once)
"
	}	

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var once = GUI.checkbox(ctx, "once", this.once, x, y)
		if (once != this.once) {
			this.once = once
			dirty = true
		}

		return dirty
	}
}