import "render" for Render, Framebuffer
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "rendergraph.variant_type" for VAR_TYPE_TEXTURE, VAR_TYPE_FRAME_BUFFER
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant

class RenderTarget is Node
{
	init() 
	{
		super.init(RenderTarget.name)
	
		this.imports = [
			Pin(this, "col0",  VAR_TYPE_TEXTURE),
			Pin(this, "col1",  VAR_TYPE_TEXTURE),
			Pin(this, "col2",  VAR_TYPE_TEXTURE),
			Pin(this, "col3",  VAR_TYPE_TEXTURE),
			Pin(this, "depth", VAR_TYPE_TEXTURE),
		]
		this.exports = [
			Pin(this, "fbo", VAR_TYPE_FRAME_BUFFER)
		]

		this.width  = 0
		this.height = 0

		this.rbo_depth = false
		this.rbo_color = false

		this.layout()

		this.fbo = nil
	}

	calc(idx)
	{
		if (!this.fbo) 
		{
			this.fbo = Framebuffer.init()

			for (var i in 0..this.imports.count)
			{
				var v = Blueprint.get_input_value(this, i)
				if (v) 
				{
					this.fbo.attachment(v.value[0], this.imports[i].name)
					if (this.width == 0) {
						this.width = v.value[0].getWidth()
						this.height = v.value[0].getHeight()
					}
				}
			}
		}

		return Variant(VAR_TYPE_FRAME_BUFFER, [this.fbo, this.width, this.height])
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 2
	}

	toString(name) 
	{
		return "
%(name).width = %(this.width)
%(name).height = %(this.height)
%(name).rbo_depth = %(this.rbo_depth)
%(name).rbo_color = %(this.rbo_color)
"
	}

	drawGUI(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calcPanelHeight() - DEFAULT_HEIGHT

		var _rbo_depth = GUI.checkbox(ctx, "rbo_depth", this.rbo_depth, x, y)
		if (_rbo_depth != this.rbo_depth) {
			this.rbo_depth = _rbo_depth
			dirty = true
		}

		y = y - DEFAULT_HEIGHT
		var _rbo_color = GUI.checkbox(ctx, "rbo_color", this.rbo_color, x, y)
		if (_rbo_color != this.rbo_color) {
			this.rbo_color = _rbo_color
			dirty = true
		}

		return dirty
	}
}