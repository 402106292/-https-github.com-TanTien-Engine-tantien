import "blueprint.pin" for Pin
import "blueprint.node_helper" for NodeHelper
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "maths" for Matrix44
import "render" for Render
import "gui" for GUI

var FOLD_ARRAY = true

class ShaderUniforms
{
	static init_shader_uniforms(unif)
	{
		if (unif[1] == "array" or unif[1] == "struct")
		{
			for (var u in unif[2]) {
				ShaderUniforms.init_shader_uniforms(u)
			}		
		}
		else
		{
			if (unif[1] == "mat4") {
				unif[2] = [ Matrix44.init() ]
			} else if (unif[1] == "sampler") {
				unif[2] = [ nil, nil ]
			}
		}
	}

	static get_shader_uniforms(stage, code, uniforms)
	{
		var unifs = Render.get_shader_uniforms(stage, code, "glsl")

		// init
		for (var unif in unifs) {
			ShaderUniforms.init_shader_uniforms(unif)
		}

		for (var unif in unifs) {
			uniforms.add(unif)
		}		
	}

	static add_uniform_to_imports(node, unif)
	{
		if ((!FOLD_ARRAY and unif[1] == "array") or unif[1] == "struct") {
			for (var u in unif[2]) {
				ShaderUniforms.add_uniform_to_imports(node, u)
			}
		} else {
			var pin_type = NodeHelper.type_var_to_pin(unif[1])
			var pin = Pin(node, unif[0], pin_type)
			pin.unif = unif
			node.imports.add(pin)
		}
	}

	static layout(node, unif)
	{
		if ((!FOLD_ARRAY and unif[1] == "array") or unif[1] == "struct")
		{
			for (var u in unif[2]) {
				ShaderUniforms.layout(node, u)
			}
		}
		else
		{
			if (unif[1] == "float" or unif[1] == "int" or unif[1] == "bool") {
				node.style.height = node.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT
			} else if (unif[1] == "float2" or unif[1] == "int2") {
				node.style.height = node.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 2
			} else if (unif[1] == "float3" or unif[1] == "int3") {
				node.style.height = node.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 3
			} else if (unif[1] == "float4" or unif[1] == "int4") {
				node.style.height = node.style.height + DEFAULT_HEIGHT + DEFAULT_HEIGHT * 4
			}
		}
	}

	static draw_gui(node, ctx, unif, x, y)
	{
		var dirty = false

		if (unif[1] == "array" or unif[1] == "struct")
		{
			var skip = unif[1] == "array" and FOLD_ARRAY
			if (!skip) 
			{
				for (var u in unif[2]) {
					var y_d = this.draw_gui(node, ctx, u, x, y)
					y = y_d[0]
					if (y_d[1]) {
						dirty = true
					}
				}
			}
		}
		else
		{			
			if (unif[1] != "sampler" and unif[1] != "image" and unif[1] != "mat2" and unif[1] != "mat3" and unif[1] != "mat4") {
		    	GUI.label(ctx, unif[0], x, y)
				y = y - DEFAULT_HEIGHT
			}

			var region = 1.0
			if (unif[1] == "int" or unif[1] == "int2" or unif[1] == "int3" or unif[1] == "int4") {
				region = 10
			}

			if (unif[1] == "bool")
			{
				var unif_dirty = false

				var value = GUI.checkbox(ctx, "b", unif[2][0], x, y)
				if (value != unif[2][0]) {
					unif[2][0] = value
					unif_dirty = true
				}

			    if (unif_dirty) {
			    	node.shader.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float" or unif[1] == "int")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	node.shader.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float2" or unif[1] == "int2")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    var g = GUI.slider(ctx, "y", unif[2][1], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (g != unif[2][1]) {
			    	unif[2][1] = g
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	node.shader.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float3" or unif[1] == "int3")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    var g = GUI.slider(ctx, "y", unif[2][1], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (g != unif[2][1]) {
			    	unif[2][1] = g
			    	unif_dirty = true
			    }

			    var b = GUI.slider(ctx, "z", unif[2][2], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (b != unif[2][2]) {
			    	unif[2][2] = b
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	node.shader.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
			else if (unif[1] == "float4" or unif[1] == "int4")
			{
				var unif_dirty = false

			    var r = GUI.slider(ctx, "x", unif[2][0], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (r != unif[2][0]) {
			    	unif[2][0] = r
			    	unif_dirty = true
			    }

			    var g = GUI.slider(ctx, "y", unif[2][1], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (g != unif[2][1]) {
			    	unif[2][1] = g
			    	unif_dirty = true
			    }

			    var b = GUI.slider(ctx, "z", unif[2][2], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (b != unif[2][2]) {
			    	unif[2][2] = b
			    	unif_dirty = true
			    }

			    var a = GUI.slider(ctx, "w", unif[2][3], x, y, node.style.width - 20, region, false)
				y = y - DEFAULT_HEIGHT
			    if (a != unif[2][3]) {
			    	unif[2][3] = a
			    	unif_dirty = true
			    }

			    if (unif_dirty) {
			    	node.shader.prog.set_uniform_value(unif)
			    	dirty = true
			    }
			}
		}

		return [y, dirty]
	}	
}