import "render" for Render, SAMPLER_LINEAR_CLAMP
import "graphics" for Graphics
import "render" for Cubemap as tt_Cubemap, Texture2D
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "maths" for Matrix2D

var VAR_TYPE_VERTEX_ARRAY  = "va"
var VAR_TYPE_SHADER        = "shader"
var VAR_TYPE_TEXTURE       = "texture"
var VAR_TYPE_FRAME_BUFFER  = "fbo"

class VarTexture
{
	init() 
	{
		this.tex = nil
		this.sampler = SAMPLER_NEAREST_REPEAT

		this.cubemap_idx = -1		
	}

	print(x, y, width, cam_mt)
	{
		if (!this.tex) {
			return
		}

		if (this.tex is tt_Cubemap)
		{
			var mt = Matrix2D.init()
			mt.transform(x, y + 80, 0, 1, 1, 0, 0, 0, 0)

			import "rendergraph.draw_cubemap" for DRAW_CUBEMAP			
			DRAW_CUBEMAP.draw(this.tex, mt, width, cam_mt)
		}
		else if (this.tex is Texture2D)
		{
			var scale = width / this.tex.getWidth()
			Graphics.drawTexture(this.tex, x, y - DEFAULT_HEIGHT, scale)
		}
	}
}

class VarFrameBuffer
{
	init()
	{
		this.fbo = nil
		this.width  = 0
		this.height = 0
		this.attached = false

		this.prev_fbo = nil
		this.prev_vp = nil
	}

	bind()
	{
		if (!this.fbo or this.width <= 0 or this.height <= 0 or !this.attached) {
			return
		}

		this.prev_fbo = Render.get_fbo()
		this.prev_vp  = Render.get_viewport()

		Render.set_fbo(this.fbo)
		Render.set_viewport([ 0, 0, this.width, this.height ])		
	}

	unbind()
	{
		if (!this.prev_fbo) {
			return
		}

		Render.set_fbo(this.prev_fbo)
		Render.set_viewport(this.prev_vp)

		this.prev_fbo = nil
		this.prev_vp = nil		
	}
}