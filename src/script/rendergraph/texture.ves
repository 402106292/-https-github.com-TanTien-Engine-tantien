import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "image" for ImageData
import "graphics" for Graphics
import "render" for Texture2D, SAMPLER_NEAREST_CLAMP, SAMPLER_LINEAR_CLAMP, SAMPLER_NEAREST_REPEAT, SAMPLER_LINEAR_REPEAT
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "rendergraph.variant_type" for VAR_TYPE_TEXTURE

class Texture is Node
{
	init() 
	{
		super.init(Texture.name)

		this.exports = [
			Pin(this, "tex", VAR_TYPE_TEXTURE)
		]

		this.layout()

		this.tex = nil

		this.tex_filepath = ""

		this.width  = 0
		this.height = 0
		this.format = "rgba8"

		this.gamma_correction = false

		// for gui
		this.sampler_items = ["nearest clamp", "linear clamp", "nearest repeat", "linear repeat"]
		this.set_sampler("linear repeat")
		this.fomat_items = ["rgb", "rgba8", "rgba16f", "r16"]
		this.format_selected = 0
	}

	calc(idx)
	{
		var sampler
		if (this.sampler_selected == 0) {
			sampler = SAMPLER_NEAREST_CLAMP
		} else if (this.sampler_selected == 1) {
			sampler = SAMPLER_LINEAR_CLAMP
		} else if (this.sampler_selected == 2) {
			sampler = SAMPLER_NEAREST_REPEAT
		} else if (this.sampler_selected == 3) {
			sampler = SAMPLER_LINEAR_REPEAT
		}

		return Variant(VAR_TYPE_TEXTURE, [this.tex, sampler])
	}

	draw(mt)
	{
		super.draw(mt)

		if (this.tex)
		{
			var scale = this.style.width / this.tex.getWidth()
			var x = this.pos.x
			var y = this.pos.y + this.style.height * 0.5 - this.calcPanelHeight() - DEFAULT_HEIGHT - this.tex.getHeight() * scale * 0.5 - DEFAULT_HEIGHT
			Graphics.drawTexture(this.tex, x, y, scale)
		}
	}

	layout()
	{
		super.layout()

		// sampler
		this.style.width = 200
		this.style.height = this.style.height + DEFAULT_HEIGHT

		// gamma_correction
		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	toString(name) 
	{
		var ret = "%(name).gamma_correction = %(this.gamma_correction)\n"
		if (this.width != 0 and this.height != 0) {
			ret = ret + "%(name).init_texture(%(this.width), %(this.height), \"%(this.format)\")\n"
		} else {
			ret = ret + "%(name).init_texture(\"%(this.tex_filepath)\")\n"
		}
		ret = ret + "%(name).set_sampler(\"%(this.sampler_items[this.sampler_selected])\")\n"
		return ret
	}

	drawGUI(ctx)
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calcPanelHeight() - DEFAULT_HEIGHT

		var item = GUI.combo(ctx, "sampler", this.sampler_selected, this.sampler_items, x, y, 130)
		if (item != this.sampler_selected) {
			this.sampler_selected = item
			dirty = true
		}

		y = y - DEFAULT_HEIGHT
		var _gamma_correction = GUI.checkbox(ctx, "gamma_correction", this.gamma_correction, x, y)
		if (_gamma_correction != this.gamma_correction) 
		{
			this.gamma_correction = _gamma_correction
			dirty = true
			this.init_texture(this.tex_filepath)
		}

		return dirty
	}

	init_texture(filepath)
	{
		this.tex_filepath = filepath

		var img = ImageData.init(filepath)
		this.tex = Texture2D.init(img, this.gamma_correction)
	}

	init_texture(width, height, format)
	{
		this.width  = width
		this.height = height
		this.format = format

		this.tex = Texture2D.init(width, height, format)
	}

	set_sampler(name)
	{
		for (var i in 0..this.sampler_items.count) {
			if (this.sampler_items[i] == name) {
				this.sampler_selected = i
				return
			}
		}
	}
}