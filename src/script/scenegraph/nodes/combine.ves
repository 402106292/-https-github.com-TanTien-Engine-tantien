import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_helper" for NodeHelper
import "scenegraph.variant" for VAR_TYPE_SPRITE, VarSprite

class Combine is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "child0", VAR_TYPE_SPRITE),
			Pin(this, "child1", VAR_TYPE_SPRITE),
		]
		this.exports = [
			Pin(this, "parent", VAR_TYPE_SPRITE),
		]

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}
	}

	calc_value(idx)
	{
		var spr = VarSprite()
		for (var i in 0..this.imports.count) {
			var v_child = Blueprint.calc_input_value(this, i)
			this.add_child(spr, v_child)
		}
		return Variant(VAR_TYPE_SPRITE, spr)
	}

	add_child(spr, v_child)
	{
		if (!v_child) {
			return
		}

		if (v_child.type == VAR_TYPE_ARRAY) {
			for (var v in v_child.value) {
				this.add_child(spr, v)
			}
		} else {
			spr.children.add(v_child.value)
		}
	}

	on_connected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, 0, "child", VAR_TYPE_SPRITE)
		}
	}

	on_disconnected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, 0, "child", VAR_TYPE_SPRITE)
		}
	}
}