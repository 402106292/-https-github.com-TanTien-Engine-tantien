import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_PORT, VAR_TYPE_ARRAY
import "blueprint.node_param" for NodeParam
import "scenegraph.variant" for VAR_TYPE_SPRITE
import "rendergraph.variant" for VarTexture
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.nodes.draw_geometry" for DrawGeometry
import "geograph.config" for POINT_RADIUS
import "physicsgraph.variant" for VarFixture
import "maths" for Matrix2D
import "render" for Texture2D
import "graphics" for Painter, Graphics
import "maths.vector" for Vector2, Vector3
import "geometry" for Line, Rect, Circle, Polyline, Polygon
import "maths.calc" for Calc
import "maths.rect" for Rect as tt_Rect

class DrawSprite is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "spr",  [ VAR_TYPE_SPRITE, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.params.add(NodeParam("skip", false))

		this.layout()
	}

	render_run() 
	{
		if (this.query_param("skip").value) {
			return
		}

		var v_obj = Blueprint.calc_input_value(this, 1)
		if (!v_obj) {
			return
		}

		var pt = Painter.init()

		this.draw_impl(v_obj, pt)

		import "blueprint.blackboard" for BLACKBOARD
		var cam = BLACKBOARD.editor_cam
		Graphics.on_cam_update(cam.pos.x, cam.pos.y, cam.scale)
		Graphics.draw_painter(pt)	
	}

	draw_impl(v_obj, pt)
	{
		if (v_obj is Vector2 or v_obj is tt_Rect)
		{
			this.draw_prim(pt, v_obj)
		}
		else if (v_obj.type == VAR_TYPE_ARRAY)
		{
			for (var v in v_obj.value) {
				this.draw_impl(v, pt)
			}
		}
		else if (v_obj.type == VAR_TYPE_SPRITE)
		{
			var mat = v_obj.value.transform
			this.draw_spr(v_obj.value, mat, pt)
		}
		else if (v_obj.type == VAR_TYPE_GEO)
		{
			this.draw_geo(v_obj.value, nil, pt, nil)
		}
	}

	draw_spr(spr, mat, pt)
	{
		if (spr.hide) {
			return
		}

		if (spr.symbol)
		{
			if (spr.symbol is VarTexture) {
				this.draw_tex(spr.symbol, mat)
			} else if (spr.symbol is VarGeo) {
				this.draw_geo(spr.symbol, mat, pt, spr.color)
			} else if (spr.symbol is VarFixture) {
				if (spr.symbol.shape.value.transform and !mat) {
					this.draw_spr(spr.symbol.shape.value, spr.symbol.shape.value.transform, pt)
				} else {
					this.draw_spr(spr.symbol.shape.value, mat, pt)
				}
			}
		}
		else
		{
			for (var child in spr.children) 
			{
				if (child.transform or mat)
				{
					var c_mat = Matrix2D.init()
					if (child.transform) {
						c_mat.transform_mat(child.transform)
					}
					if (mat) {
						c_mat.transform_mat(mat)
					}
					this.draw_spr(child, c_mat, pt)
				}
				else
				{
					this.draw_spr(child, nil, pt)
				}
			}
		}
	}

	draw_tex(v_tex, mat)
	{
		var tex = v_tex.tex
		if (tex) {
			Graphics.draw_texture2(tex, mat)
		}
	}

	draw_prim(pt, geo)
	{
		var col = [255, 255, 255, 255]
		if (geo is Vector2)
		{
			pt.add_circle_filled(nil, geo.x, geo.y, POINT_RADIUS, col, 24)
		}
		else if (geo is tt_Rect)
		{
			pt.add_rect(nil, [ geo.x, geo.y, geo.w, geo.h ], col, 2)
		}
	}

	draw_geo(v_geo, mat, pt, color)
	{
		var col = [255, 255, 255, 128]

		if (color)
		{
			col[0] = col[0] * color.x
			col[1] = col[1] * color.y
			col[2] = col[2] * color.z
		}
		else
		{
			var geo_col = v_geo.render_style["color"]
			if (geo_col) {
				col[0] = col[0] * geo_col.x
				col[1] = col[1] * geo_col.y
				col[2] = col[2] * geo_col.z
			}
		}

		var shape = v_geo.shape
		if (shape is Line) {
			this.draw_line(v_geo, mat, pt, col)
		} else if (shape is Rect) {
			this.draw_rect(v_geo, mat, pt, col)
		} else if (shape is Circle) {
			this.draw_circle(v_geo, mat, pt, col)
		} else if (shape is Polyline) {
			this.draw_polyline(v_geo, mat, pt, col)
		} else if (shape is Polygon) {
			this.draw_polygon(v_geo, mat, pt, col)
		}
	}

	draw_line(v_geo, mat, pt, col)
	{
		var line = v_geo.shape.get()
		pt.add_line(mat, line, col, 2)
	}

	draw_rect(v_geo, mat, pt, col)
	{
		var rect = v_geo.shape.get()
		var fill = v_geo.render_style["fill"]
		if (fill) {
			pt.add_rect_filled(mat, rect, col)
		} else {
			pt.add_rect(mat, rect, col, 2)
		}
	}

	draw_circle(v_geo, mat, pt, col)
	{
		var circle = v_geo.shape.get()
		var fill = v_geo.render_style["fill"]
		if (fill) {
			pt.add_circle_filled(mat, circle[0], circle[1], circle[2], col, 24)
		} else {
			pt.add_circle(mat, circle[0], circle[1], circle[2], col, 2.0, 24)
		}
	}

	draw_polyline(v_geo, mat, pt, col)
	{
		var verts = v_geo.shape.get_vertices()
		if (verts.count < 2) {
			return
		}
		if (v_geo.shape.get_closed()) {
			verts.add(verts[0])
			verts.add(verts[1])
		}

		pt.add_polyline(mat, verts, col, 2.0)
	}

	draw_polygon(v_geo, mat, pt, col)
	{
		var verts = v_geo.shape.get_vertices()
		pt.add_polygon_filled(mat, verts, col)
	}	
}