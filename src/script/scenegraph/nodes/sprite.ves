import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3
import "scenegraph.variant" for VAR_TYPE_SPRITE, VarSprite
import "rendergraph.variant" for VAR_TYPE_TEXTURE
import "geograph.variant" for VAR_TYPE_GEO
import "physicsgraph.variant" for VAR_TYPE_FIXTURE
import "maths" for Matrix2D
import "maths.vector" for Vector2, Vector3

class Sprite is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "symbol", [ VAR_TYPE_TEXTURE, VAR_TYPE_GEO, VAR_TYPE_FIXTURE, VAR_TYPE_ARRAY ]),
			Pin(this, "size",  VAR_TYPE_NUMBER2),
			Pin(this, "color", VAR_TYPE_NUMBER3),			
		]
		this.exports = [
			Pin(this, "spr", [ VAR_TYPE_SPRITE, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_sym = Blueprint.calc_input_value(this, 0)
		var v_size = Blueprint.calc_input_value(this, 1)
		if (!v_sym) {
			return nil
		}

		if (v_sym.type == VAR_TYPE_ARRAY) 
		{
			var ret = []
			for (var v in v_sym.value) {
				ret.add(this.build_sprite(v, v_size))
			}
			return Variant(ret)
		}
		else
		{
			return this.build_sprite(v_sym, v_size)
		}
	}

	build_sprite(v_sym, v_size)
	{
		var spr = VarSprite()

		if (v_sym) {
			spr.symbol = v_sym.value
		}

		if (v_size) 
		{
			if (v_sym and v_sym.type == VAR_TYPE_TEXTURE) 
			{
				var tex = v_sym.value.tex
				var w = tex.get_width()
				var h = tex.get_height()

				var sx = v_size.value.x / w
				var sy = v_size.value.y / h
				spr.transform = Matrix2D.init()
				spr.transform.transform(0, 0, 0, sx, sy, 0, 0, 0, 0)
			}
		}

		// size
		if (v_size) 
		{
			spr.size = v_size.value
		} 
		else if (v_sym and v_sym.type == VAR_TYPE_TEXTURE) 
		{
			var tex = v_sym.value.tex
			var w = tex.get_width()
			var h = tex.get_height()
			spr.size = Vector2(w, h)
		}

		// color
		var v_col = Blueprint.calc_input_value(this, 2)
		if (v_col) {
			spr.color = Vector3(v_col.value)
		}

		return Variant(VAR_TYPE_SPRITE, spr)
	}
}