import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER3
import "blueprint.blueprint" for Blueprint
import "blueprint.shader_builder" for ShaderBuilder
import "rendergraph.variant" for VAR_TYPE_SHADER
import "rendergraph.variates.shader" for Shader as var_Shader
import "rendergraph.components.shader_uniforms" for ShaderUniforms
import "shader" for ShaderGen
import "render" for Shader

var DEFAULT_VS = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

void main() 
{
   TexCoord = vec2(aTexCoord.x, aTexCoord.y);
   gl_Position = vec4(aPos, 1.0);
}
"


class Shadergraph is Node
{
	init() 
	{
		super.init(Shadergraph.name)

		this.imports = [
			Pin(this, "rgb", VAR_TYPE_NUMBER3)
		]
		this.exports = [
			Pin(this, "shader", VAR_TYPE_SHADER)
		]

		this.vs = DEFAULT_VS

		this.shader = var_Shader(this)
		this.dirty = true

		this.uniforms = []
		ShaderUniforms.get_shader_uniforms("vertex", this.vs, this.uniforms)
		for (var unif in this.uniforms) {
			ShaderUniforms.add_uniform_to_imports(this, unif)
		}

		this.layout()
	}

	calc_value(idx)
	{
		return Variant(VAR_TYPE_SHADER, this.shader)
	}

	execute() 
	{
		this.bind_uniforms()
	}

	gen_shader(gen)
	{
		gen.import_all()

		var frag_col = gen.add_output("FragColor", "vec4")

		var module = gen.get_main_module()
		var func = gen.get_main_func()
		var rgb = Blueprint.calc_input_inst(gen, this, "rgb", module, func)
		var r = nil
		var g = nil
		var b = nil
		var a = gen.const_float(module, 1.0)
		if (rgb)
		{
			r = gen.compose_extract(func, rgb, 0)
			g = gen.compose_extract(func, rgb, 1)
			b = gen.compose_extract(func, rgb, 2)
		}
		else
		{
			r = gen.const_float(module, 0.0)
			g = gen.const_float(module, 0.0)
			b = gen.const_float(module, 0.0)
		}
		var rgba = gen.compose_float4(func, r, g, b, a)
		gen.store(func, frag_col, rgba)

		gen.func_return(func)

		gen.finish_main()
	}

	rebuild_shader()
	{
		this.builder = ShaderBuilder()
		var gen = this.builder.build(this)
		this.shader.prog = Shader.init(DEFAULT_VS, "", "", "", gen)
	}

	bind_uniforms()
	{
		if (this.builder) {
			this.builder.bind_uniforms(this.shader.prog)		
		}
	}
}