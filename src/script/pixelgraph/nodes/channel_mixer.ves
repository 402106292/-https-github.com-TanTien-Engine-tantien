import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "maths.vector" for Vector3

class ChannelMixer is Node
{
	init()
	{
		super.init(ChannelMixer.name)

		this.imports = [
			Pin(this, "in", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_NUMBER3),
		]

		this.layout()

		var r = NodeParam("r", Vector3(1, 0, 0))
		var g = NodeParam("g", Vector3(0, 1, 0))
		var b = NodeParam("b", Vector3(0, 0, 1))
		r.gui = false
		g.gui = false
		b.gui = false
		this.params.add(r)
		this.params.add(g)
		this.params.add(b)
	}

	// vec3(dot(in, this.r), dot(in, this.g), dot(in, this.b))
	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var val = ShaderBuilder.gen_child(node, "in")
		if (!val) {
			return nil
		}

		var r = this.query_param("r").value
		var g = this.query_param("g").value
		var b = this.query_param("b").value

		var module = node.find_value("module")
		var bb = node.find_value("bb")

		var r_inst = module.const_float3(r.x, r.y, r.z)
		var g_inst = module.const_float3(g.x, g.y, g.z)
		var b_inst = module.const_float3(b.x, b.y, b.z)

		var x = bb.dot(val, r_inst)
		var y = bb.dot(val, g_inst)
		var z = bb.dot(val, b_inst)

		return bb.compose_float3(x, y, z)
	}
}