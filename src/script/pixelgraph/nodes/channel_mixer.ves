import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER3
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "maths.vector" for Vector3

class ChannelMixer is Node
{
	init()
	{
		super.init(ChannelMixer.name)

		this.imports = [
			Pin(this, "in", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_NUMBER3),
		]

		this.layout()

		var r = NodeParam("r", Vector3(1, 0, 0))
		var g = NodeParam("g", Vector3(0, 1, 0))
		var b = NodeParam("b", Vector3(0, 0, 1))
		r.gui = false
		g.gui = false
		b.gui = false
		this.params.add(r)
		this.params.add(g)
		this.params.add(b)
	}

    // vec3(dot(in, this.r), dot(in, this.g), dot(in, this.b))
	calc_inst(idx, ctx) 
	{
		var val = Blueprint.calc_input_inst(this, 0, ctx)
		if (!val) {
			return nil
		}

		var r = this.query_param("r").value
		var g = this.query_param("g").value
		var b = this.query_param("b").value

		var r_inst = ctx.module.const_float3(r.x, r.y, r.z)
		var g_inst = ctx.module.const_float3(g.x, g.y, g.z)
		var b_inst = ctx.module.const_float3(b.x, b.y, b.z)

		var x = ctx.bb.dot(val, r_inst)
		var y = ctx.bb.dot(val, g_inst)
		var z = ctx.bb.dot(val, b_inst)

		return ctx.bb.compose_float3(x, y, z)
	}
}