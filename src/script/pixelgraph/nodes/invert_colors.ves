import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER4
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint

class InvertColors is Node
{
	init()
	{
		super.init(InvertColors.name)

		this.imports = [
			Pin(this, "in", VAR_TYPE_NUMBER4),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_NUMBER4),
		]

		this.params.add(NodeParam("r", false))
		this.params.add(NodeParam("g", false))
		this.params.add(NodeParam("b", false))
		this.params.add(NodeParam("a", false))

		this.layout()
	}

	calc_inst(gen, idx, module, func, _bb) 
	{
		var val = Blueprint.calc_input_inst(gen, this, 0, module, func, _bb)
		if (!val) {
			return nil
		}

		var r = gen.compose_extract(func, val, 0)
		var g = gen.compose_extract(func, val, 1)
		var b = gen.compose_extract(func, val, 2)
		var a = gen.compose_extract(func, val, 3)

		var br = this.query_param("r").value
		var bg = this.query_param("g").value
		var bb = this.query_param("b").value
		var ba = this.query_param("a").value

		var one = gen.const_float(module, 1.0)
		if (br) { r = gen.sub(func, one, r) }
		if (bg) { g = gen.sub(func, one, g) }
		if (bb) { b = gen.sub(func, one, b) }
		if (ba) { a = gen.sub(func, one, a) }

		return gen.compose_float4(func, r, g, b, a)
	}
}