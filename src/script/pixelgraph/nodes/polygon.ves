import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction

var CODE = "
// proposed solution from
// http://stackoverflow.com/questions/26070410/robust-atany-x-on-glsl-for-converting-xy-coordinate-to-angle
// swaps params when |x| <= |y|
float atan2(float y, float x)
{
    bool s = (abs(x) > abs(y));
    return mix(3.14159265358979/2.0 - atan(x,y), atan(y,x), s);
}

// https://docs.unity3d.com/Packages/com.unity.shadergraph@9.0/manual/Polygon-Node.html
float polygon(vec2 st, float sides, float width, float height)
{
    float pi = 3.14159265359;
    float aWidth = width * cos(pi / sides);
    float aHeight = height * cos(pi / sides);
    vec2 _st = (st * 2 - 1) / vec2(aWidth, aHeight);
    _st.y *= -1;
    float pCoord = atan2(_st.x, _st.y);
    float r = 2 * pi / sides;
    float distance = cos(floor(0.5 + pCoord / r) * r - pCoord) * length(_st);
    return clamp((1 - distance) / fwidth(distance), 0.0, 1.0);
}
"

class Polygon is Node
{
	init() 
	{
		super.init(Polygon.name)

		this.node_func = NodeFunction(this, CODE, "polygon", [
			["sides", 3, { "region" : 10, "integer" : true }],
			["width", 0.5],
			["height", 0.5],
		])
	}
}