import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction

var CODE = "
// from https://github.com/google/filament
float V_SmithGGXCorrelated(float roughness, float NoV, float NoL) 
{
    // Heitz 2014, \"Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs\"
    float a2 = roughness * roughness;
    // TODO: lambdaV can be pre-computed for all the lights, it should be moved out of this function
    float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);
    float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);
    float v = 0.5 / (lambdaV + lambdaL);
    // a2=0 => v = 1 / 4*NoL*NoV   => min=1/4, max=+inf
    // a2=1 => v = 1 / 2*(NoL+NoV) => min=1/4, max=+inf
    // clamp to the maximum value representable in mediump
    return v;
}
"

class V_SmithGGXCorrelated is Node
{
	init()
	{
		super.init(V_SmithGGXCorrelated.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "V_SmithGGXCorrelated", [
            ["roughness", 1.0],
        ])	
	}
}