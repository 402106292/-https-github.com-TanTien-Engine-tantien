import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NUMBER3
import "blueprint.blueprint" for Blueprint

class LightingDirs is Node
{
	init()
	{
		super.init(LightingDirs.name)

		this.imports = [
			Pin(this, "world_pos", VAR_TYPE_NUMBER3),
			Pin(this, "cam_pos",   VAR_TYPE_NUMBER3),
			Pin(this, "light_pos", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "V", VAR_TYPE_NUMBER3),
			Pin(this, "L", VAR_TYPE_NUMBER3),
			Pin(this, "H", VAR_TYPE_NUMBER3),
		]

		this.layout()
	}

	calc_inst_v(gen, idx, module, func)
	{
		var world_pos = Blueprint.calc_input_inst(gen, this, 0, module, func)
		var cam_pos = Blueprint.calc_input_inst(gen, this, 1, module, func)
		return gen.normalize(func, gen.sub(func, cam_pos, world_pos))
	}

	calc_inst_l(gen, idx, module, func)
	{
		var world_pos = Blueprint.calc_input_inst(gen, this, 0, module, func)
		var light_pos = Blueprint.calc_input_inst(gen, this, 2, module, func)
		return gen.normalize(func, gen.sub(func, light_pos, world_pos))
	}

	calc_inst_h(gen, idx, module, func)
	{
		var V = this.calc_inst_v(gen, idx, module, func)
		var L = this.calc_inst_l(gen, idx, module, func)
		return gen.normalize(func, gen.add(func, V, L))
	}

	calc_inst(gen, idx, module, func) 
	{
		if (idx == 0) {
			return this.calc_inst_v(gen, idx, module, func)
		} else if (idx == 1) {
			return this.calc_inst_l(gen, idx, module, func)
		} else if (idx == 2) {
			return this.calc_inst_h(gen, idx, module, func)
		}
	}
}