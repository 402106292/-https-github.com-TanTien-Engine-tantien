import "scene.component" for Component
import "maths.rect" for Rect
import "maths.vector" for Vector2
import "graphics" for Painter, Graphics

class BoundingBox2 is Component
{
	init(size)
	{
		this.rect = Rect()
		this.set_size(size)

		this.pos = Vector2()
		this.angle = 0
	}

	set_size(size)
	{
		this.rect.x = -size.x * 0.5
		this.rect.y = -size.y * 0.5
		this.rect.w = size.x
		this.rect.h = size.y
	}	

	draw(mt, cam_mt)
	{
		//var pt = Painter.init()

		//pt.add_rect_filled(nil, [this.rect.x + this.pos.x, this.rect.y + this.pos.y, this.rect.w, this.rect.h], [255, 128, 0])

		//Graphics.draw_painter(pt)
	}

	is_contain(pos)
	{
		var p = Vector2()
		p.x = pos.x - this.pos.x
		p.y = pos.y - this.pos.y
		p.rotate(-this.angle)
		return p.x > this.rect.x and p.x < this.rect.x + this.rect.w and
		       p.y > this.rect.y and p.y < this.rect.y + this.rect.h
	}

	get_border_points()
	{
		var pts = [
			Vector2(this.rect.x, this.rect.y),
			Vector2(this.rect.x + this.rect.w, this.rect.y),
			Vector2(this.rect.x + this.rect.w, this.rect.y + this.rect.h),
			Vector2(this.rect.x, this.rect.y + this.rect.h)
		]
		for (var p in pts)
		{
			p.rotate(this.angle)
			p.x = p.x + this.pos.x
			p.y = p.y + this.pos.y
		}
		return pts		
	}

	get_region_no_rot()
	{
		var r = Rect()
		r.x = this.pos.x + this.rect.x
		r.y = this.pos.y + this.rect.y
		r.w = this.rect.w
		r.h = this.rect.h
		return r
	}	

	transform(pos, angle, offset)
	{
		// todo: scale and shear rect

		var rot_offset = Vector2(-offset.x, -offset.y)
		rot_offset.rotate(angle)
		this.pos.x = pos.x + rot_offset.x + offset.x
		this.pos.y = pos.y + rot_offset.y + offset.y

		this.angle = angle
	}

	translate(offset)
	{
		this.pos.x = this.pos.x + offset.x
		this.pos.y = this.pos.y + offset.y
	}
}