import "graphics" for Painter, Graphics
import "blueprint.node_layout" for TITLE_HEIGHT, PIN_RADIUS
import "blueprint.node_style" for TB_TITLE
import "network.vertex_shape" for VertexShape, SHAPE_CIRCLE_RADIUS, SHAPE_CAPSULE_WIDTH, SHAPE_CAPSULE_LENGTH, SHAPE_CIRCLE, SHAPE_CAPSULE_H, SHAPE_CAPSULE_V

class Render
{
	static draw_vertex(vert)
	{
		this.draw_vert_panel(vert)

		// todo: LOD
		this.draw_vert_pins(vert)
		this.draw_vert_edge(vert)
	}

	static draw_vert_panel(vert)
	{
		var pt = Painter.init()

		var hh = 0
		if (vert.shape == SHAPE_CIRCLE)
		{
			pt.add_circle_filled(vert.pos.x, vert.pos.y, SHAPE_CIRCLE_RADIUS, vert.color, 24)
		}
		else if (vert.shape == SHAPE_CAPSULE_H)
		{
			var hw = SHAPE_CAPSULE_LENGTH * 0.5
			var hh = SHAPE_CAPSULE_WIDTH * 0.5
			pt.add_capsule_filled([vert.pos.x - hw, vert.pos.y - hh, SHAPE_CAPSULE_LENGTH, SHAPE_CAPSULE_WIDTH], vert.color, true)
		}
		else if (vert.shape == SHAPE_CAPSULE_V)
		{
			var hw = SHAPE_CAPSULE_WIDTH * 0.5
			var hh = SHAPE_CAPSULE_LENGTH * 0.5
			pt.add_capsule_filled([vert.pos.x - hw, vert.pos.y - hh, SHAPE_CAPSULE_WIDTH, SHAPE_CAPSULE_LENGTH], vert.color, false)
		}

		Graphics.draw_painter(pt)

		// todo: LOD
		Graphics.draw_text(vert.get_title(), vert.pos.x, vert.pos.y + hh, 0.7, TB_TITLE)
	}

	static draw_vert_pins(vert)
	{
		for (var pin in vert.pins)
		{
			var p_pos = VertexShape.calc_pin_pos(pin)
			this.draw_pin(p_pos.x, p_pos.y, pin)
		}
	}	

	static draw_pin(x, y, pin)
	{
		var pt = Painter.init()
		if (pin.edge) {
			pt.add_circle_filled(x, y, PIN_RADIUS, pin.color, 12)		
		} else {
			pt.add_circle(x, y, PIN_RADIUS, pin.color, 1.0, 12)
		}
		Graphics.draw_painter(pt)
	}

	static draw_vert_edge(vert)
	{
		var pt = Painter.init()
		for (var pin in vert.pins)
		{
			var edge = pin.edge
			if (edge and edge.curve) {
				pt.add_bezier(edge.curve, edge.pin0.color, 2)			
			}
		}
		Graphics.draw_painter(pt)
	}
}