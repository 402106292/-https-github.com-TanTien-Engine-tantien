import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_UNKNOWN, VAR_TYPE_BOOLEAN, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_MATRIX2, VAR_TYPE_MATRIX3, VAR_TYPE_MATRIX4
import "render" for Render
import "rendergraph.components.shader_uniforms" for ShaderUniforms

class NodeHelper
{
	static type_var_to_pin(type)
	{
		var pin_type = VAR_TYPE_UNKNOWN
		if (type == "bool") {
			pin_type = VAR_TYPE_BOOLEAN
		} else if (type == "int") {
			pin_type = VAR_TYPE_INTEGER
		} else if (type == "float") {
			pin_type = VAR_TYPE_NUMBER
		} else if (type == "float2") {
			pin_type = VAR_TYPE_NUMBER2
		} else if (type == "float3") {
			pin_type = VAR_TYPE_NUMBER3
		} else if (type == "float4") {
			pin_type = VAR_TYPE_NUMBER4
		} else if (type == "mat2") {
			pin_type = VAR_TYPE_MATRIX2
		} else if (type == "mat3") {
			pin_type = VAR_TYPE_MATRIX3
		} else if (type == "mat4") {
			pin_type = VAR_TYPE_MATRIX4
		}
		return pin_type
	}

	static init_pins_from_code(node, code, lang, name)
	{
		// func params
		var args = Render.get_shader_func_argus("pixel", code, lang, name)
		if (!args) {
			return
		}
		for (var i in 0..args.count - 1) 
		{
			var v = args[i]
			var pin_type = this.type_var_to_pin(v[1])
			node.imports.add(Pin(node, v[0], pin_type))
		}

		// uniforms
		var uniforms = []
		ShaderUniforms.get_shader_uniforms("pixel", code, lang, uniforms, name)
		for (var unif in uniforms) {
			ShaderUniforms.add_uniform_to_imports(node, unif)
		}

		// func return
		var v = args[args.count - 1]
		if (v[1] != "void")
		{
			var pin_type = this.type_var_to_pin(v[1])
			node.exports.add(Pin(node, "ret", pin_type))
		}

		node.layout()

		return args.count - 1
	}

	static var_type_to_string(var_type)
	{
		if (var_type is String)
		{
			return "\"%(var_type)\""
		}
		else if (var_type is List)
		{
			var ret = ""
			for (var type in var_type)
			{
				var str = this.var_type_to_string(type)
				if (ret == "") {
					ret = str
				} else {
					ret = ret + ", %(str)"
				}
			}
			return "[ %(ret) ]"
		}
		else
		{
			return ""
		}
	}
}