import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_BOOLEAN, VAR_TYPE_INTEGER, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4, VAR_TYPE_MATRIX2, VAR_TYPE_MATRIX3, VAR_TYPE_MATRIX4, VAR_TYPE_FUNCTION
import "blueprint.node_param" for NodeParam
import "blueprint.node_helper" for NodeHelper
import "render" for Render

class NodeFunction
{
	init(node, code, func_name, params)
	{
		NodeHelper.init_pins_from_code(node, code, func_name)

		for (var param in params)
		{
			var node_param = NodeParam(param[0], param[1])
			node.params.add(node_param)
			if (param.count > 2) {
				for (var entry in param[2]) {
					node_param[entry.key] = entry.value
				}
			}
		}

		this.node = node
		this.code = code
		this.func_name = func_name
		this.decl_name = "sg_" + node.name

		this.module = nil

		node.layout()
	}

	gen_shader(gen)
	{
		var code = "#version 330 core\n" + this.code
		this.module = gen.add_module("pixel", code, this.decl_name)

		this.func = gen.query_func(this.module, this.func_name)

		gen.add_link_decl(this.func, this.decl_name, true)
	}

	calc_value_inst(gen, module, type, value)
	{
		if (value)
		{
			if (type == VAR_TYPE_BOOLEAN) {
				return gen.const_bool(module, value)
			} else if (type == VAR_TYPE_INTEGER) {
				return gen.const_int(module, value)
			} else if (type == VAR_TYPE_NUMBER) {
				return gen.const_float(module, value)
			} else if (type == VAR_TYPE_NUMBER2) {
				return gen.const_float2(module, value.x, value.y)
			} else if (type == VAR_TYPE_NUMBER3) {
				return gen.const_float3(module, value.x, value.y, value.z)
			} else if (type == VAR_TYPE_NUMBER4) {
				return gen.const_float4(module, value.x, value.y, value.z, value.w)
			}
		}
		else
		{
			if (type == VAR_TYPE_BOOLEAN) {
				return gen.const_bool(module, false)
			} else if (type == VAR_TYPE_INTEGER) {
				return gen.const_int(module, 0)
			} else if (type == VAR_TYPE_NUMBER) {
				return gen.const_float(module, 0.0)
			} else if (type == VAR_TYPE_NUMBER2) {
				return gen.const_float2(module, 0.0, 0.0)
			} else if (type == VAR_TYPE_NUMBER3) {
				return gen.const_float3(module, 0.0, 0.0, 0.0)
			} else if (type == VAR_TYPE_NUMBER4) {
				return gen.const_float4(module, 0.0, 0.0, 0.0, 0.0)
			} else if (type == VAR_TYPE_MATRIX2) {
				return gen.const_mat2(module, [1.0, 0.0, 1.0, 0.0])
			} else if (type == VAR_TYPE_MATRIX3) {
				return gen.const_mat3(module, [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
			} else if (type == VAR_TYPE_MATRIX4) {
				return gen.const_mat4(module, [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0])
			}
		}
		return nil
	}	

	calc_inst_from_pin(gen, pin, module, func)
	{
		var inst = Blueprint.calc_input_inst(gen, this.node, pin.name, module, func)	
		if (!inst) 
		{
			var param = this.node.query_param(pin.name)
			if (param)
			{
				inst = this.calc_value_inst(gen, module, pin.type, param.value)
			}
			else
			{
				var v = Blueprint.calc_input_value(this.node, pin.slot_idx)
				if (v) {
					inst = this.calc_value_inst(gen, module, pin.type, v.value)
				} else {
					inst = this.calc_value_inst(gen, module, pin.type, nil)
				}
			}
		}
		return inst
	}

	calc_inst(gen, idx, module, func)
	{
		if (!this["func"]) {
			return nil
		}

		var callee = gen.create_decl_func(module, this.func)
		gen.add_link_decl(callee, this.decl_name, false)

		var params = []
		for (var pin in this.node.imports) {
			if (pin.type != VAR_TYPE_FUNCTION) {
				var inst = this.calc_inst_from_pin(gen, pin, module, func)
				if (!inst) {
					return nil
				}
				params.add(inst)
			}
		}
		return gen.func_call(func, callee, params)
	}
}