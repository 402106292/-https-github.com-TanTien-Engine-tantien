import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.subgraph" for Subgraph
import "shader" for ShaderGen

class ShaderBuilder
{
	init()
	{
		this.uniform_nodes = []
		this.uniform_funcs = []
	}

	build(node)
	{
		this.uniform_nodes = []
		this.uniform_funcs = []

		var gen = ShaderGen.init()

		var prev_nodes = Blueprint.get_precursor_nodes(node)
		var list = Blueprint.topo_sort(prev_nodes)
		for (var node in list) {
			if (node is Subgraph) {
				node.shader_build(this, gen)
			} else {
				this.build(node, gen)
			}
		}

		return gen
	}

	build(node, gen)
	{
		if (node["node_func"]) {
			node.node_func.gen_shader(gen)
			if (node.node_func.has_uniforms()) {
				this.uniform_funcs.add(node.node_func)
			}
		} 
		if (node.has_method("gen_shader(_)")) {
			node.gen_shader(gen)
		}
		if (node.has_method("bind_uniforms(_)")) {
			this.uniform_nodes.add(node)
		}
	}

	bind_uniforms(prog)
	{
		for (var node in this.uniform_nodes) {
			node.bind_uniforms(prog)
		}
		for (var func in this.uniform_funcs) {
			func.bind_uniforms(prog)
		}
	}
}