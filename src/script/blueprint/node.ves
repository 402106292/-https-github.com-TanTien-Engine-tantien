import "math" for Math
import "maths.vector" for Vector2
import "maths" for Float2
import "blueprint.blueprint" for Blueprint
import "blueprint.node_render" for NodeRender
import "blueprint.node_layout" for DEFAULT_HEIGHT

class Style
{
	init()
	{
		this.width = 0
		this.height = 0

		this.line_num = 0
	}
}

class Node
{
	init(name) 
	{
		this.name = name
		this.title = nil

		this.imports = []
		this.exports = []

		this.style = Style()

		this.pos = Vector2()

		// for aabb update
		this.aabb_dirty = false

		this.dummy = false
	}

	calc(idx) {}

	get_size() {
		return Vector2(this.style.width, this.style.height)
	}

	update(mt)
	{
		var pos = Float2.init()
		pos.transform(mt)
		if (this.pos.x == pos.x() and this.pos.y == pos.y()) {
			return
		}
		this.pos.x = pos.x()
		this.pos.y = pos.y()

		for (var p in this.imports) {
			for (var c in p.conns) {
				c.update()
			}
		}
		for (var p in this.exports) {
			for (var c in p.conns) {
				c.update()
			}
		}		
	}

	draw(mt, cam_mt)
	{
		NodeRender.draw_node(this)
	}

	layout()
	{
		this.style.width = 120
		this.style.height = this.calcPanelHeight()

		for (var i = 0; i < this.imports.count; i = i + 1) {
			this.imports[i].is_input = true
			this.imports[i].slot_idx = i
		}
		for (var i = 0; i < this.exports.count; i = i + 1) {
			this.exports[i].is_input = false
			this.exports[i].slot_idx = i
		}

		this.aabb_dirty = true
	}

	to_string(name) {
		return ""
	}

	draw_gui(ctx) {}

	on_key_pressed(key) {}
	on_key_released(key) {}
	on_mouse_pressed(x, y, btn) {}
	on_mouse_released(x, y, btn) {}
	on_mouse_moved(x, y, btn) {}
	on_mouse_dragged(x, y, btn) {}
	on_mouse_scrolled(x, y, dx, dy) {}

	calcPanelHeight() {
		return DEFAULT_HEIGHT + Math.max(this.imports.count, this.exports.count) * DEFAULT_HEIGHT
	}

	disconnect()
	{
		for (var p in this.imports) {
			while (!p.conns.isEmpty) {
				Blueprint.disconnect(p.conns.front())
			}
		}
		for (var p in this.exports) {
			while (!p.conns.isEmpty) {
				Blueprint.disconnect(p.conns.front())
			}
		}
	}
}