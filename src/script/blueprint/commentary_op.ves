import "editor.message" for MSG_SELECTION_MOVED, MSG_SELECTION_MOVING
import "blueprint.nodes.commentary" for Commentary
import "blueprint.nodes.subgraph" for Subgraph
import "maths.vector" for Vector2
import "maths.rect" for Rect

class CommentaryOP
{
	init(scene_stack)
	{
		this.scene_stack = scene_stack

		scene_stack.add_msg_handler(MSG_SELECTION_MOVED, this.on_selection_moved)
		scene_stack.add_msg_handler(MSG_SELECTION_MOVING, this.on_selection_moving)		
	}

	rebuild()
	{
		var scene = this.scene_stack.top()
		for (var node in scene.nodes)
		{
			var bp_node = node.components["bp"]
			if (bp_node is Commentary) 
			{
				bp_node.children.clear()

				var r = bp_node.get_comment_region(node.components["transform"].position)
				for (var node2 in scene.nodes)
				{
					var cr = node2.components["bounding"].get_region_no_rot()
					if (node2 != node and r.is_contain_rect(cr)) {
						bp_node.children.add(node2.components["bp"])
					}
				}
			}
			else if (bp_node is Subgraph)
			{
				this.rebuild_sub(bp_node)
			}
		}
	}

	rebuild_sub(node)
	{
		for (var item in node.all_items)
		{
			var cnode = item[0]
			if (cnode is Commentary)
			{
				var r = cnode.get_comment_region(Vector2(item[1], item[2]))

				cnode.children.clear()
				for (var citem in node.all_items) {
					if (r.is_contain_pos(Vector2(citem[1], citem[2]))) {
						cnode.children.add(citem[0])
					}
				}
			}
			else if (cnode is Subgraph)
			{
				this.rebuild_sub(cnode)
			}
		}
	}

	on_selection_moved(scene, args)
	{
		for (var node in scene.selection)
		{
			var bp_node = node.components["bp"]
			if (!(bp_node is Commentary)) {
				this.move_to(scene, node, args[0])
			}
		}
	}

	on_selection_moving(scene, args)
	{
		if (scene.selection.count != 1) {
			return
		}

		var node = scene.selection.front()
		var comm = node.components["bp"]
		if (!(comm is Commentary)) {
			return
		}

		for (var node in scene.nodes)
		{
			var bp_node = node.components["bp"]
			if (bp_node and comm.children.contains(bp_node)) 
			{			
				var bb = node.components["bounding"]
				if (bb) {
					bb.translate(args[0])
				}

				var trans = node.components["transform"]
				if (trans) {
					trans.translate(args[0])
				}
			}
		}
	}

	query_comm_by_pos(scene, pos)	
	{
		for (var node in scene.nodes)
		{
			var bp_node = node.components["bp"]
			if (bp_node is Commentary) 
			{
				var r = bp_node.get_comment_region(bp_node.pos)
				if (r.is_contain_pos(pos)) {
					return bp_node
				}
			}
		}
		return nil
	}

	move_to(scene, node, pos)
	{
		// remove from old
		for (var comm_node in scene.nodes) 
		{
			var bp_node = comm_node.components["bp"]
			if (bp_node is Commentary) {
				bp_node.children.remove(node.components["bp"])
			}
		}

		// insert to new
		var new_comm = this.query_comm_by_pos(scene, pos)
		var r = node.components["bounding"].get_region_no_rot()
		if (new_comm and new_comm.get_comment_region(new_comm.pos).is_contain_rect(r)) {
			new_comm.children.add(node.components["bp"])
		}
	}
}