import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint

class ListFlatten is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "list", VAR_TYPE_ARRAY),
			Pin(this, "deep", VAR_TYPE_INTEGER),
		]
		this.exports = [
			Pin(this, "list", VAR_TYPE_ARRAY),
		]

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin.is_input) {
			Blueprint.send_pin_dirty(this.exports[0])
		}
	}

	calc_value(idx)
	{
		var v_list = Blueprint.calc_input_value(this, 0)
		if (!v_list) {
			return nil
		}

		var max_deep = -1
		var v_deep = Blueprint.calc_input_value(this, 1)
		if (v_deep) {
			max_deep = v_deep.value
		}

		var ret = []
		var curr_deep = 0
		this.add_to_list(ret, v_list, curr_deep, max_deep)
		return Variant(ret)
	}

	add_to_list(dst, src, curr_deep, max_deep)
	{
		if (src.type == VAR_TYPE_ARRAY) 
		{
			if (max_deep > 0 and curr_deep >= max_deep) {
				dst.add(src)
			} else {
				for (var v in src.value) {
					this.add_to_list(dst, v, curr_deep + 1, max_deep)
				}
			}
		} 
		else 
		{
			dst.add(src)
		}
	}
}