import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_MATRIX4
import "maths" for Matrix44
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI

class Orthographic is Node
{
	init() 
	{
		super.init(Orthographic.name)

		this.exports = [
			Pin(this, "mat", VAR_TYPE_MATRIX4),
		]

		this.layout()

		this.left   = 0
		this.right  = 1
		this.bottom = 0
		this.top    = 1
		this.near   = 1
		this.far    = -1
	}

	calc_value(idx) 
	{
		var mat = Matrix44.init()
		mat.orthographic(this.left, this.right, this.bottom, this.top, this.near, this.far)
		return Variant(VAR_TYPE_MATRIX4, mat)
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 4
	}

	to_string(name) {
		return "
%(name).left = %(this.left)
%(name).right = %(this.right)
%(name).bottom = %(this.bottom)
%(name).top = %(this.top)
%(name).near = %(this.near)
%(name).far = %(this.far)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var REGION = 1

		var left = GUI.slider(ctx, "left", this.left, x, y, this.style.width - 20, REGION, false)
		if (left != this.left) {
			this.left = left
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var right = GUI.slider(ctx, "right", this.right, x, y, this.style.width - 20, REGION, false)
		if (right != this.right) {
			this.right = right
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var bottom = GUI.slider(ctx, "bottom", this.bottom, x, y, this.style.width - 20, REGION, false)
		if (bottom != this.bottom) {
			this.bottom = bottom
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var top = GUI.slider(ctx, "top", this.top, x, y, this.style.width - 20, REGION, false)
		if (top != this.top) {
			this.top = top
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}
}