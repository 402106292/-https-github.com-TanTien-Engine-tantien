import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER

class Divide is Node
{
	init() 
	{
		super.init(Divide.name)

		this.imports = [
			Pin(this, "a", VAR_TYPE_NUMBER),
			Pin(this, "b", VAR_TYPE_NUMBER)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_NUMBER)
		]

		this.layout()
	}

	calc(idx)
	{
		var a = 0
		var b = 0
		
		var v_a = Blueprint.calc_input_value(this, 0)
		if (v_a) {
			a = v_a.value
		}
		var v_b = Blueprint.calc_input_value(this, 1)
		if (v_b) {
			b = v_b.value
		}

		if (b == 0) {
			return Variant(VAR_TYPE_NUMBER, 0)
		} else {
			return Variant(VAR_TYPE_NUMBER, a / b)
		}
	}

	calc_inst(gen, idx, module, func) 
	{
		var a = Blueprint.calc_input_inst(gen, this, 0, module, func)
		var b = Blueprint.calc_input_inst(gen, this, 1, module, func)
		
		if (!a and !b) {
			return nil
		} else if (!a) {
			return b
		} else if (!b) {
			return a
		} else {
			return gen.div(func, a, b)
		}
	}
}