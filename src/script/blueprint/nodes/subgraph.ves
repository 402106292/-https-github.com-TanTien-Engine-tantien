import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_PORT, VAR_TYPE_ANY, VAR_TYPE_NUMBER
import "io" for IO
import "filesystem" for Filesystem
import "blueprint.nodes.input" for Input
import "blueprint.nodes.output" for Output
import "blueprint.nodes.property" for Property
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI

class SubGraph is Node
{
	init()
	{
		super.init(SubGraph.name)

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.filepath = ""

		this.all_nodes  = []
		this.in_nodes   = []
		this.out_nodes  = []
		this.prop_nodes = []
		this.exec_list  = []
	}

	calc(idx)
	{
		var name = this.exports[idx].name
		for (var node in this.out_nodes) {
			if (node.var_name == name) {
				return Blueprint.calc_input_value(node, 0)
			}
		}
	}

	execute()
	{
		// setup input vars
		for (var i in 1..this.imports.count) {
			var name = this.imports[i].name
			for (var node in this.in_nodes)	{
				if (node.var_name == name) {
					node.value = Blueprint.calc_input_value(this, i)
				}
				// todo break
			}
		}

		for (var pass in this.exec_list) {
			for (var node in pass) {
				if (node.execute) {
					node.execute()
				}
			}
		}
	}

	layout()
	{
		super.layout()

		this.style.width = 220
		//System.print(this.prop_nodes)
		//this.style.height = this.style.height + DEFAULT_HEIGHT * this.prop_nodes.count
		this.style.height = this.style.height + DEFAULT_HEIGHT * 1
	}

	to_string(name) 
	{
		var ret = "%(name).load_from_file(_editor, \"%(this.filepath)\")\n"
		for (var prop in this.prop_nodes) {
			ret = ret + "%(name).set_prop_value(\"%(prop.var_name)\", %(prop.value))\n"
		}
		return ret
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		for (var prop in this.prop_nodes)
		{
			if (prop.value and prop.var_type == VAR_TYPE_NUMBER)
			{
				var value = GUI.slider(ctx, prop.var_name, prop.value, x, y, this.style.width - 20, 10.0, false)
				if (value != prop.value) {
					prop.value = value
					dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
		}

		return dirty
	}

	load_from_file(editor, filepath)
	{
		this.all_nodes.clear()
		this.in_nodes.clear()
		this.prop_nodes.clear()		
		this.out_nodes.clear()

		var absolute = Filesystem.get_absolute_path(filepath)
		var old_dir = Filesystem.get_asset_base_dir()
		Filesystem.set_asset_base_dir(Filesystem.get_file_dir(absolute))
		var file = IO.open(absolute, "r")
		var body = file.read()
		IO.close(file)
		Filesystem.set_asset_base_dir(old_dir)

		if (!body) {
			return
		}

		this.filepath = filepath

		var old_func = editor.add_node
		editor.add_node = this.add_node

		this.title = Filesystem.get_filename(this.filepath)

		var header = "import \"editor\" for _editor\n" + editor.load_file_imports()
		var source = header + body
		Basic.loadstring(filepath, source)

		editor.add_node = old_func

		this.exec_list = editor.build_exec_list(this.all_nodes)
	}

	add_node(node, x, y)
	{
		this.all_nodes.add(node)

		var dirty = false
		if (node is Input) 
		{
			this.in_nodes.add(node)
			this.imports.add(Pin(this, node.var_name, node.var_type))
			dirty = true
		} 
		else if (node is Output) 
		{
			this.out_nodes.add(node)
			this.exports.add(Pin(this, node.var_name, node.var_type))
			dirty = true
		} 
		else if (node is Property) 
		{
			if (!node.value) 
			{
				if (node.var_type == VAR_TYPE_NUMBER) {
					node.value = 0
				}
			}
			this.prop_nodes.add(node)
			dirty = true
		}

		if (dirty) {
			this.layout()
		}
	}

	set_prop_value(name, value)
	{
		for (var prop in this.prop_nodes) {
			if (prop.var_name == name) {
				prop.value = value
			}
		}
	}
}