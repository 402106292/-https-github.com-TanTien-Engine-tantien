import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_NODE, VAR_TYPE_PORT, VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "io" for IO
import "filesystem" for Filesystem
import "blueprint.nodes.input" for Input
import "blueprint.nodes.output" for Output
import "blueprint.nodes.property" for Property
import "blueprint.nodes.proxy" for Proxy
import "blueprint.nodes.camera3d" for Camera3d
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "maths.vector" for Vector2, Vector3, Vector4

class Subgraph is Node
{
	init()
	{
		super.init(Subgraph.name)

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.filepath = ""
		this.file_content = nil

		this.all_nodes   = []
		this.in_nodes    = []
		this.out_nodes   = []
		this.prop_nodes  = []
		this.proxy_nodes = []
		this.exec_list   = []

		this.op_node = nil
	}

	calc(idx)
	{
		var name = this.exports[idx].name
		for (var node in this.out_nodes) {
			if (node.var_name == name) {
				return Blueprint.calc_input_value(node, 0)
			}
		}
	}

	execute()
	{
		// setup input vars
		for (var i in 1..this.imports.count) 
		{
			var name = this.imports[i].name
			for (var node in this.in_nodes)	{
				if (node.var_name == name) {
					node.value = Blueprint.calc_input_value(this, i)
				}
				// todo break
			}
			for (var node in this.proxy_nodes) {
				if (node.real_name == name) {
					node.real_node = Blueprint.calc_input_value(this, i).value
				}
				// todo break
			}
		}

		for (var pass in this.exec_list) {
			for (var node in pass) {
				if (node.has_method("execute()")) {
					node.execute()
				}
			}
		}
	}

	layout()
	{
		super.layout()

		this.style.width = 220
		//this.style.height = this.style.height + DEFAULT_HEIGHT * this.prop_nodes.count
		this.style.height = this.style.height + DEFAULT_HEIGHT * 1
	}

	to_string(name) 
	{
		var ret = ""
		if (this.file_content) {
			var source = this.file_content.replace("\"", "\\\"")
			ret = ret + "
%(name).file_content = \"\n%(source)\"
%(name).load_from_string(_editor, %(name).file_content, _editor, \"subgraph\")
"
		} else if (this.filepath != "") {
			ret = ret + "%(name).load_from_file(_editor, \"%(this.filepath)\")\n"
		}

		for (var prop in this.prop_nodes) 
		{
			var val = nil
			if (prop.value.has_method("to_list()")) {
				val = prop.value.to_list()
			} else {
				val = prop.value
			}
			ret = ret + "%(name).set_prop_value(\"%(prop.var_name)\", %(val))\n"
		}

		if (this.op_node) {
			var op_name = name + ".op_node"
			ret = ret + this.op_node.to_string(op_name)
		}

		return ret
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var REGION = 10
		for (var prop in this.prop_nodes)
		{
			if (prop.value and prop.var_type == VAR_TYPE_NUMBER)
			{
				var value = GUI.slider(ctx, prop.var_name, prop.value, x, y, this.style.width - 20, REGION, false)
				if (value != prop.value) {
					prop.value = value
					dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
			else if (prop.value and prop.var_type == VAR_TYPE_NUMBER2)
			{
				var vx = GUI.slider(ctx, "x", prop.value.x, x, y, this.style.width - 20, REGION, false)
				if (vx != prop.value.x) {
					prop.value.x = vx
					dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vy = GUI.slider(ctx, "y", prop.value.y, x, y, this.style.width - 20, REGION, false)
				if (vy != prop.value.y) {
					prop.value.y = vy
					dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
			else if (prop.value and prop.var_type == VAR_TYPE_NUMBER3)
			{
				var vx = GUI.slider(ctx, "x", prop.value.x, x, y, this.style.width - 20, REGION, false)
				if (vx != prop.value.x) {
					prop.value.x = vx
					dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vy = GUI.slider(ctx, "y", prop.value.y, x, y, this.style.width - 20, REGION, false)
				if (vy != prop.value.y) {
					prop.value.y = vy
					dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vz = GUI.slider(ctx, "z", prop.value.z, x, y, this.style.width - 20, REGION, false)
				if (vz != prop.value.z) {
					prop.value.z = vz
					dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
			else if (prop.value and prop.var_type == VAR_TYPE_NUMBER4)
			{
				var vx = GUI.slider(ctx, "x", prop.value.x, x, y, this.style.width - 20, REGION, false)
				if (vx != prop.value.x) {
					prop.value.x = vx
					dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vy = GUI.slider(ctx, "y", prop.value.y, x, y, this.style.width - 20, REGION, false)
				if (vy != prop.value.y) {
					prop.value.y = vy
					dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vz = GUI.slider(ctx, "z", prop.value.z, x, y, this.style.width - 20, REGION, false)
				if (vz != prop.value.z) {
					prop.value.z = vz
					dirty = true
				}
				y = y - DEFAULT_HEIGHT

				var vw = GUI.slider(ctx, "w", prop.value.w, x, y, this.style.width - 20, REGION, false)
				if (vw != prop.value.w) {
					prop.value.w = vw
					dirty = true
				}
				y = y - DEFAULT_HEIGHT
			}
		}

		return dirty
	}

	load_from_string(editor, str, sub_editor, module_name)
	{
		this.all_nodes.clear()
		this.in_nodes.clear()
		this.prop_nodes.clear()
		this.proxy_nodes.clear()		
		this.out_nodes.clear()

		if (!str) {
			return false
		}

		var old_func = editor.add_node
		editor.add_node = this.add_node

		var header = "import \"editor\" for _editor\n" + sub_editor.load_file_imports()
		var source = header + str
		Basic.loadstring(module_name, source)

		editor.add_node = old_func

		if (sub_editor.has_method("build_exec_list(_)")) {
			this.exec_list = sub_editor.build_exec_list(this.all_nodes)		
		}

		for (var node in this.all_nodes) {
			if (node is Camera3d) {
				this.op_node = node
			}
		}

		return true
	}

	load_from_file(editor, filepath)
	{
		this.load_from_file(editor, filepath, editor)
	}

	load_from_file(editor, filepath, sub_editor)
	{
		var absolute = Filesystem.get_absolute_path(filepath)
		var old_dir = Filesystem.get_asset_base_dir()
		Filesystem.set_asset_base_dir(Filesystem.get_file_dir(absolute))
		var file = IO.open(absolute, "r")
		var body = file.read()
		IO.close(file)
		Filesystem.set_asset_base_dir(old_dir)

		var module_name = filepath
		if (this.load_from_string(editor, body, sub_editor, module_name))
		{
			this.filepath = filepath
			this.title = Filesystem.get_filename(filepath)
		}
	}

	add_node(node, x, y)
	{
		this.all_nodes.add(node)

		var dirty = false
		if (node is Input) 
		{
			this.in_nodes.add(node)
			this.imports.add(Pin(this, node.var_name, node.var_type))
			dirty = true
		} 
		else if (node is Output) 
		{
			this.out_nodes.add(node)
			this.exports.add(Pin(this, node.var_name, node.var_type))
			dirty = true
		} 
		else if (node is Property) 
		{
			if (!node.value) 
			{
				if (node.var_type == VAR_TYPE_NUMBER) {
					node.value = 0
				} else if (node.var_type == VAR_TYPE_NUMBER2) {
					node.value = Vector2()
				} else if (node.var_type == VAR_TYPE_NUMBER3) {
					node.value = Vector3()
				} else if (node.var_type == VAR_TYPE_NUMBER4) {
					node.value = Vector4()
				}
			}
			this.prop_nodes.add(node)
			dirty = true
		}
		else if (node is Proxy)
		{
			this.proxy_nodes.add(node)
			this.imports.add(Pin(this, node.real_name, VAR_TYPE_NODE))
			dirty = true
		}

		if (dirty) {
			this.layout()
		}
	}

	set_prop_value(name, value)
	{
		for (var prop in this.prop_nodes) 
		{
			if (prop.var_name == name) 
			{
				if (prop.value.has_method("from_list(_)")) {
					prop.value.from_list(value)
				} else {
					prop.value = value
				}
				return
			}
		}
	}

	on_key_pressed(key) {
		if (this.op_node) {
			this.op_node.on_key_pressed(key)
		}
	}
	on_key_released(key) {
		if (this.op_node) {
			this.op_node.on_key_release(key)
		}
	}
	on_mouse_pressed(x, y, btn) {
		if (this.op_node) {
			this.op_node.on_mouse_pressed(x, y, btn)
		}
	}
	on_mouse_released(x, y, btn) {
		if (this.op_node) {
			this.op_node.on_mouse_released(x, y, btn)
		}	
	}
	on_mouse_moved(x, y, btn) {
		if (this.op_node) {
			this.op_node.on_mouse_moved(x, y, btn)
		}	
	}
	on_mouse_dragged(x, y, btn) {
		if (this.op_node) {
			this.op_node.on_mouse_dragged(x, y, btn)
		}
	}
	on_mouse_scrolled(x, y, dx, dy) {
		if (this.op_node) {
			this.op_node.on_mouse_scrolled(x, y, dx, dy)
		}	
	}
}