import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI

class Store is Node
{
	init() 
	{
		super.init(Store.name)

		this.imports = [
			Pin(this, "var", VAR_TYPE_ANY),
			Pin(this, "dst", VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "var", VAR_TYPE_ANY),
		]

		this.layout()

		this.exports[0].hide = true

		this.var_name = "store"

		this.insts = []
	}

	setup(ctx)
	{
		this.insts.clear()
	}

	calc_value(idx)
	{
		return Blueprint.calc_input_value(this, 0)
	}

	query_inst(key)
	{
		for (var pair in this.insts) {
			if (pair[0] == key) {
				return pair[1]
			}
		}	
		return nil
	}

	shader_gen(ctx)
 	{
 		super.shader_gen(ctx)

		var v = Blueprint.calc_input_inst(this, 0, ctx)
		var dst = Blueprint.calc_input_inst(this, 1, ctx)
		if (dst) 
		{
			var pair = this.query_inst(ctx.bb)
			if (!pair) {
				ctx.bb.store(dst, v)
				this.insts.add([ctx.bb, dst])
			}
		} 
		else 
		{
			var pair = this.query_inst(ctx.func)
			if (!pair) {
				var inst = ctx.func.add_variable(this.var_name, v)
				this.insts.add([ctx.func, inst])
			}
		} 		
 	}

 	shader_gen2(node, idx)
 	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var src = ShaderBuilder.gen_child(node, "var")
		var dst = ShaderBuilder.gen_child(node, "dst")
		if (dst)
		{
			var bb = node.find_value("bb")
			bb.store(dst, src)
			return dst
		}
		else
		{
			var func = node.find_value("func").impl
			return func.add_variable(this.var_name, src)
		}
 	}

	calc_inst(idx, ctx) 
	{
		var dst = Blueprint.calc_input_inst(this, 1, ctx)
		if (dst) {
			return this.query_inst(ctx.bb)
		} else {
			return this.query_inst(ctx.func)
		}
	}

	to_string(name) 
	{
		if (this.var_name == "store")
		{
			var f_pin = Blueprint.get_first_connect_pin(this.imports[0])
			if (f_pin) {
				this.var_name = f_pin.name
			}
		}

		return "
%(name).var_name = \"%(this.var_name)\"
"
	}

	get_title()
	{
		if (this.var_name == "store") {
			return super.get_title()
		} else {
			return "%(this.var_name)(S)"
		}
	}

	on_selected() 
	{
		this.exports[0].hide = false
	}

	on_deselected() 
	{
		this.exports[0].hide = true
	}
}