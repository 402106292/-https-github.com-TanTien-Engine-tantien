import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_ANY

class Array is Node
{
	init() 
	{
		super.init(Array.name)

		this.imports = [
			Pin(this, "index", VAR_TYPE_NUMBER)
		]
		this.exports = [
			Pin(this, "all", VAR_TYPE_ANY),
			Pin(this, "one", VAR_TYPE_ANY)
		]

		this.layout()

		this.list = []
	}

	calc(idx) 
	{
		if (idx == 0) {
			return Variant(VAR_TYPE_ANY, this.list)
		} else if (idx == 1) {
			var conns = this.imports[0].conns
			if (!conns.isEmpty) {
				var f_pin = conns.front().from
				var idx = f_pin.node.calc(f_pin.slot_idx).value
				if (idx < this.list.count) {
					return Variant(VAR_TYPE_ANY, this.list[idx])
				}
			}
		}
	}

	toString(name) {
		return "
%(name).list = %(this.list)
"
	}
 }