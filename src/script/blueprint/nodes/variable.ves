import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.node_helper" for NodeHelper

class Variable is Node
{
	init() 
	{
		super.init()

		this.exports = [
			Pin(this, "var", VAR_TYPE_ANY),
		]

		this.layout()

		this.var_name = "variable"
		this.var_type = VAR_TYPE_NUMBER
	}

	shader_gen(node, idx)
	{
		var w_func = node.find_value("func")

		var inst = w_func.variants[this.var_name]
		if (inst) {
			return inst
		}

		var func = w_func.impl	
		if (this.var_type == VAR_TYPE_NUMBER) {
			inst = func.variable_float(this.var_name)
		} else if (this.var_type == VAR_TYPE_NUMBER2) {
			inst = func.variable_float2(this.var_name)
		} else if (this.var_type == VAR_TYPE_NUMBER3) {
			inst = func.variable_float3(this.var_name)
		} else if (this.var_type == VAR_TYPE_NUMBER4) {
			inst = func.variable_float4(this.var_name)
		}

		w_func.variants[this.var_name] = inst

		return inst
	}

	to_string(name) 
	{
		var type_str = NodeHelper.var_type_to_string(this.var_type)
		return "
%(name).var_name = \"%(this.var_name)\"
%(name).var_type = %(type_str)
"
	}

	get_title()
	{
		if (this.var_name == "variable") {
			return super.get_title()
		} else {
			return "%(this.var_name)(V)"
		}
	}	
}