import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_ARRAY, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint

class ForEachF is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "items", VAR_TYPE_ARRAY),
			Pin(this, "count", VAR_TYPE_INTEGER),			
			Pin(this, "eval",  VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "result",    VAR_TYPE_ARRAY),
			Pin(this, "curr_item", VAR_TYPE_ANY),
		]

		this.layout()

		this.exports[1].stop_port_pass = true

		this.curr_item = nil
	}

	calc_value(idx) 
	{
		if (idx == 0) {
			return this.calc_result()
		} else if (idx == 1) {
			return this.curr_item
		}
		return nil
	}

	calc_result()
	{
		var v_items = Blueprint.calc_input_value(this, 0)
		if (v_items.value)
		{
			if (!v_items.value is List and !v_items.value is Map) {
				return nil
			}

			var result = []

			this.curr_item = nil
			for (var entry in v_items.value) 
			{
				this.curr_item = Variant(entry)

				var v_eval = Blueprint.calc_input_value(this, 2)
				result.add(v_eval)
			}

			this.curr_item = nil

			return Variant(result)
		}

		var v_count = Blueprint.calc_input_value(this, 1)
		if (v_count.value)
		{
			var result = []

			this.curr_item = nil
			for (var i in 0..v_count.value)
			{
				this.curr_item = Variant(i)

				var v_eval = Blueprint.calc_input_value(this, 2)
				result.add(v_eval)
			}
			this.curr_item = nil

			return Variant(result)
		}
	}
}