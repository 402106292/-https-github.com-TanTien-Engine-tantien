import "blueprint.node" for Node
import "blueprint.nodes.number2" for Number2
import "blueprint.node_style" for COL_PANEL_BG, COL_PANEL_BG_LIGHT
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.node_editor" for NodeEditor
import "blueprint.blueprint" for Blueprint
import "graphics" for Painter, Graphics
import "gui" for GUI
import "maths.rect" for Rect

var EDITOR = nil

class Commentary is Node
{
	init() 
	{
		super.init()

		this.width = 400
		this.height = 400

		this.size_gui = false

		this.layout()

		this.children = Set.new()

		this.line_width = 2

		this.title = "Commentary"

		this.editor_in_min = Number2()
		this.editor_in_max = Number2()
	}

	draw(mt, cam_mt)
	{
		super.draw(mt, cam_mt)

		var pt = Painter.init()

		var r = this.get_comment_region(this.pos)
		var line_width = 1.0 / cam_mt.get_scale()[0] * this.line_width
		pt.add_rect(nil, [r.x, r.y, r.w, r.h], COL_PANEL_BG, line_width)
	
		Graphics.draw_painter(pt)
	}

	layout()
	{
		super.layout()

		this.style.width = this.width

		if (this.size_gui) {
			this.style.height = this.style.height + DEFAULT_HEIGHT		
		}
	}

	to_string(name) 
	{
		return "
%(name).set_size(%(this.width), %(this.height))
%(name).title = \"%(this.title)\"
"
	}

	draw_gui(ctx) 
	{
		if (!this.size_gui) {
			return false
		}

		var dirty = false

		var ITEM_WIDTH = 150

		var x = this.pos.x - ITEM_WIDTH
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var width = GUI.slider(ctx, "width", this.width, x, y, ITEM_WIDTH - 80, 2048, false)
		if (width != this.width) {
			this.width = width
			dirty = true
		}

		x = x + ITEM_WIDTH
		var height = GUI.slider(ctx, "height", this.height, x, y, ITEM_WIDTH - 80, 2048, false)
		if (height != this.height) {
			this.height = height
			dirty = true
		}

		if (dirty) {
			this.layout()
		}

		return dirty
	}

	set_size(width, height)
	{
		if (this.width == width and this.height == height) {
			return
		}

		this.width = width
		this.height = height

		this.layout()
	}

	get_comment_region(pos)
	{
		var ret = Rect()
		ret.x = pos.x - this.width * 0.5 + this.line_width * 0.5
		ret.y = pos.y - this.height - DEFAULT_HEIGHT * 0.5
		if (this.size_gui) {
			ret.y = ret.y - DEFAULT_HEIGHT * 0.5
		}
		ret.w = this.width - this.line_width
		ret.h = this.height
		return ret
	}

	get_title()
	{
		return this.title
	}

	bind_editor()
	{
		if (!EDITOR) {
			EDITOR = NodeEditor("assets/blueprints/editorgraph/rect_edit.ves")
		}

		var r = this.get_comment_region(this.pos)
		this.editor_in_min.value.set(r.x, r.y)
		this.editor_in_max.value.set(r.x + r.w, r.y + r.h)

		Blueprint.connect(this.editor_in_min.exports[0], EDITOR.editor_node.imports[1])
		Blueprint.connect(this.editor_in_max.exports[0], EDITOR.editor_node.imports[2])

		Blueprint.send_node_dirty_root(EDITOR.editor_node)

		return true
	}

	draw_editor() 
	{
		if (EDITOR) {
			EDITOR.draw()		
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		EDITOR.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) 
	{
		EDITOR.on_mouse_released(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) 
	{
		EDITOR.on_mouse_dragged(x, y, btn)

		this.width = (this.pos.x + this.line_width * 0.5 - this.editor_in_min.value.x) * 2
		this.height = this.editor_in_max.value.y - this.editor_in_min.value.y

		this.pos.x = this.editor_in_min.value.x + this.width * 0.5 - this.line_width * 0.5
		this.editor_in_max.value.x = this.editor_in_min.value.x + this.width

		this.layout()
	}
}