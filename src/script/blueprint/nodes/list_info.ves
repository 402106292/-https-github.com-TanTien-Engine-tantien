import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_ARRAY, VAR_TYPE_BOOLEAN, VAR_TYPE_INTEGER
import "blueprint.blueprint" for Blueprint

class ListInfo is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "list", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "empty", VAR_TYPE_BOOLEAN),
			Pin(this, "count", VAR_TYPE_INTEGER),
			Pin(this, "front", VAR_TYPE_ANY),
			Pin(this, "back",  VAR_TYPE_ANY),
		]

		this.layout()
	}

	on_pin_dirty(pin)
	{
		if (pin == this.imports[0]) {
			for (var pin in this.exports) {
				Blueprint.send_pin_dirty(pin)
			}
		} else if (pin == this.exports[2] or pin == this.exports[3]) {
			Blueprint.send_pin_dirty(this.imports[0])
		}
	}

	calc_value(idx) 
	{
		var v_list = Blueprint.calc_input_value(this, 0)
		if (!v_list) {
			return nil
		}

		if (idx == 0) {
			return Variant(v_list.value.isEmpty)
		} else if (idx == 1) {
			return Variant(VAR_TYPE_INTEGER, v_list.value.count)
		} else if (idx == 2) {
			if (!this.list.isEmpty) {
				return Variant(v_list.value[0])
			}
		} else if (idx == 3) {
			if (!v_list.value.isEmpty) {
				return Variant(v_list.value[v_list.value.count - 1])
			}
		} else {
			return nil
		}
	}
}