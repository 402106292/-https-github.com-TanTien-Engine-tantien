import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_PORT, VAR_TYPE_BOOLEAN
import "blueprint.blueprint" for Blueprint
import "blueprint.shader_gen" for ShaderContext

class If is Node
{
	init() 
	{
		super.init(If.name)

		this.imports = [
			Pin(this, "prev",  VAR_TYPE_PORT),		
			Pin(this, "cond",  VAR_TYPE_BOOLEAN),
			Pin(this, "true",  VAR_TYPE_PORT),
			Pin(this, "false", VAR_TYPE_PORT),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT),
		]

		this.layout()
	}

	shader_gen(ctx) 
	{
		var n_prev = Blueprint.get_input_node(this, 0)
		if (n_prev) {
			n_prev.shader_gen(ctx)
		}

		var n_cond = Blueprint.get_input_node(this, 1)
		if (n_cond) {
			n_cond.shader_gen(ctx)
		}

		var bb_true = nil
		var bb_false = nil		

		var n_true = Blueprint.get_input_node(this, 2)
		if (n_true) {
			bb_true = ctx.func.add_block("bb_true")
			n_true.shader_gen(ShaderContext(ctx.gen, ctx.module, ctx.func, bb_true, ctx.blackboard))
		}

		var n_false = Blueprint.get_input_node(this, 3)
		if (n_false) {
			bb_false = ctx.func.add_block("bb_false")
			n_false.shader_gen(ShaderContext(ctx.gen, ctx.module, ctx.func, bb_false, ctx.blackboard))
		}

		var cond = Blueprint.calc_input_inst(this, 1, ctx)
		if (!cond) {
			cond = ctx.module.const_bool(false)
		}
		ctx.bb.branch_if(cond, bb_true, bb_false)
	}
}