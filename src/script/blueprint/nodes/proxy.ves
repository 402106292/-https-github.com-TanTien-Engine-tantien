import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint

class Proxy is Node
{
	init() 
	{
		super.init()		

		this.layout()

		this.real_name = "proxy"
		this.real_node = nil
	}

	calc_value(idx)
	{
		if (this.real_node and this.real_node.has_method("calc_value(_)")) {
			return Blueprint.calc_output_value(this.real_node, idx)
		}

		return nil
	}

	to_string(name) 
	{
		if (!this.real_node) {
			return ""
		}

		var cls = this.real_node.get_class()
		var scope = cls.module.replace(".", "::")
		return "
%(name).real_name = \"%(this.real_name)\"
%(name).init_real_node(::%(scope)::%(cls.name)())
"
	}

	init_real_node(real_node)
	{
		this.real_node = real_node
		for (var i in this.real_node.imports) {
			this.imports.add(Pin(this, i.name, i.type))
		}
		for (var o in this.real_node.exports) {
			this.exports.add(Pin(this, o.name, o.type))
		}
		this.layout()
	}		

	on_key_pressed(key) 
	{
		if (this.real_node) {
			this.real_node.on_key_pressed(key)
		}
	}

	on_mouse_pressed(x, y, btn) 
	{
		if (this.real_node) {
			this.real_node.on_mouse_pressed(x, y, btn)
		}
	}

	on_mouse_released(x, y, btn) 
	{ 
		if (this.real_node) {
			this.real_node.on_mouse_released(x, y, btn)
		}
	}

	on_mouse_dragged(x, y, btn) 
	{		
		if (this.real_node) {
			this.real_node.on_mouse_dragged(x, y, btn)
		}
	}
	
	on_mouse_scrolled(x, y, dx, dy)
	{
		if (this.real_node) {
			this.real_node.on_mouse_scrolled(x, y, dx, dy)
		}
	}

	get_title()
	{
		return this.real_name
	}	
}