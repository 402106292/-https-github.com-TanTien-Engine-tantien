import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_PORT, VAR_TYPE_BOOLEAN

class Branch is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "prev",  VAR_TYPE_PORT),		
			Pin(this, "cond",  VAR_TYPE_BOOLEAN),
			Pin(this, "true",  VAR_TYPE_PORT),
			Pin(this, "false", VAR_TYPE_PORT),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT),
		]

		this.layout()

		this.imports[2].stop_port_pass = true
		this.imports[3].stop_port_pass = true

		this.drawlist_true = nil
		this.drawlist_false = nil		
	}

	render_gen()
	{
		var t_node = Blueprint.get_input_node(this, 2)
		if (t_node) 
		{
			var prev_nodes = Blueprint.get_precursor_nodes(t_node)

			import "rendergraph.drawlist" for Drawlist
			this.drawlist_true = Drawlist(prev_nodes)
		}
		else
		{
			this.drawlist_true = nil
		}

		var f_node = Blueprint.get_input_node(this, 3)
		if (f_node) 
		{
			var prev_nodes = Blueprint.get_precursor_nodes(f_node)

			import "rendergraph.drawlist" for Drawlist
			this.drawlist_false = Drawlist(prev_nodes)
		}
		else
		{
			this.drawlist_false = nil
		}		
	}

	render_run() 
	{
		var v_cond = Blueprint.calc_input_value(this, 1)
		if (v_cond and v_cond.value) {
			if (this.drawlist_true) {
				this.drawlist_true.run()			
			}
		} else {
			if (this.drawlist_false) {
				this.drawlist_false.run()			
			}
		}
	}

	shader_gen(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var func = node.find_value("func").impl

		var bb_true = func.add_block("bb_true")
		var bb_false = func.add_block("bb_false")

		ShaderBuilder.gen_child(node, "prev")

		if (node.children[2]) 
		{
			node.children[2].ud["bb"] = bb_true
			ShaderBuilder.gen_child(node, "true")
		}
		if (node.children[3]) 
		{
			node.children[3].ud["bb"] = bb_false
			ShaderBuilder.gen_child(node, "false")
		}

		var cond = ShaderBuilder.gen_child(node, "cond")
		if (!cond) {
			var module = node.find_value("module")
			cond = module.const_bool(false)
		}

		var merge_bb = func.add_block("bb_merge")

		var bb = node.find_value("bb")
		bb.branch_if(cond, bb_true, bb_false, merge_bb)
		node.change_value("bb", merge_bb)

		return nil
	}
}