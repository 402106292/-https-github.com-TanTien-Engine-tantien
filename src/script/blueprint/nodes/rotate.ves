import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_MATRIX4, VAR_TYPE_ARRAY
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "maths.vector" for Vector3
import "maths" for Matrix44
import "math" for Math
import "blueprint.blueprint" for Blueprint

class Rotate is Node
{
	init()
	{
		super.init(Rotate.name)

		this.imports = [
			Pin(this, "mat", [VAR_TYPE_MATRIX4, VAR_TYPE_MATRIX4]),
			Pin(this, "angle", [VAR_TYPE_NUMBER, VAR_TYPE_ARRAY]),
		]
		this.exports = [
			Pin(this, "mat", [VAR_TYPE_MATRIX4, VAR_TYPE_ARRAY]),
		]

		this.layout()

		this.angle = 0
		this.axis_x = 0
		this.axis_y = 0
		this.axis_z = 0
	}

	calc_list(mat_list, angle_list)
	{
		var ret = []

		var n_mat = mat_list.count
		var n_angle = angle_list.count
		var num = Math.max(n_mat.count, n_angle.count)
		for (var i in 0..num)
		{
			var mat = nil
			if (mat_list.isEmpty) {
				mat = Matrix44.init()
			} else if (i < mat_list.count) {
				mat = mat_list[i].value.clone()
			} else {
				mat = mat_list[mat_list.count - 1].value.clone()
			}

			var angle = nil
			if (angle_list.isEmpty) {
				angle = 0
			} else if (i < angle_list.count) {
				angle = angle_list[i]
			} else {
				angle = angle_list[angle_list.count - 1]
			}

			mat.rotate_axis(angle * 0.0174533, this.axis_x, this.axis_y, this.axis_z)
			ret.add(Variant(VAR_TYPE_MATRIX4, mat))
		}

		if (ret.count == 0) {
			return Variant(VAR_TYPE_MATRIX4, Matrix44.init())
		} else if (ret.count == 1) {
			return ret[0]
		} else {
			return Variant(VAR_TYPE_ARRAY, ret)
		}
	}

	calc_value(idx) 
	{
		var mat_list = []
		var v_mat = Blueprint.calc_input_value(this, 0)
		if (v_mat)
		{
			if (v_mat.type == VAR_TYPE_MATRIX4) {
				mat_list.add(v_mat)
			} else if (v_mat.type == VAR_TYPE_ARRAY) {
				mat_list = v_mat.value
			}
		}

		var angle_list = []
		var v_angle = Blueprint.calc_input_value(this, 1)
		if (v_angle.type == VAR_TYPE_ARRAY)
		{
			for (var angle in v_angle.value) {
				angle_list.add(angle)
			}
		}
		else
		{
			if (v_angle) {
				this.angle = v_angle.value
			}
			angle_list.add(this.angle)
		}

		return this.calc_list(mat_list, angle_list)
	}

	layout()
	{
		super.layout()

		this.style.width = 150
		this.style.height = this.style.height + DEFAULT_HEIGHT * 4
	}

	to_string(name) {
		return "
%(name).angle = %(this.angle)
%(name).axis_x = %(this.axis_x)
%(name).axis_y = %(this.axis_y)
%(name).axis_z = %(this.axis_z)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var angle = GUI.slider(ctx, "angle", this.angle, x, y, this.style.width - 50, 360, false)
		if (angle != this.angle) {
			this.angle = angle
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var REGION = 1

		var axis_x = GUI.slider(ctx, "axis_x", this.axis_x, x, y, this.style.width - 50, REGION, false)
		if (axis_x != this.axis_x) {
			this.axis_x = axis_x
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var axis_y = GUI.slider(ctx, "axis_y", this.axis_y, x, y, this.style.width - 50, REGION, false)
		if (axis_y != this.axis_y) {
			this.axis_y = axis_y
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var axis_z = GUI.slider(ctx, "axis_z", this.axis_z, x, y, this.style.width - 50, REGION, false)
		if (axis_z != this.axis_z) {
			this.axis_z = axis_z
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}
}