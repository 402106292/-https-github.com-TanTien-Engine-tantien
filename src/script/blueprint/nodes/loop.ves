import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_PORT
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.blueprint" for Blueprint
import "blueprint.execute_list" for ExecuteList
import "gui" for GUI
import "math" for Math

class Loop is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "prev",  VAR_TYPE_PORT),
			Pin(this, "do",    VAR_TYPE_PORT),
			Pin(this, "start", VAR_TYPE_NUMBER),
			Pin(this, "end",   VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "next",  VAR_TYPE_PORT),
			Pin(this, "index", VAR_TYPE_NUMBER),
			Pin(this, "num",   VAR_TYPE_NUMBER)			
		]

		// stop execute path for "do" and "index" and "num"
		this.imports[1].stop_port_pass = true
		this.exports[1].stop_port_pass = true
		this.exports[2].stop_port_pass = true

		this.start = 0
		this.end = 1

		this.index = 0		

		this.layout()

		this.drawlist = nil
		this.exe_list = nil
	}

	calc_value(idx) 
	{
		if (idx == 1) {
			return Variant(VAR_TYPE_NUMBER, this.index)
		} else if (idx == 2) {
			var start = this.get_start()
			var end = this.get_end()			
			return Variant(VAR_TYPE_NUMBER, end - start)		
		}

		return nil
	}

	render_gen()
	{
		var node = Blueprint.get_input_node(this, 1)
		if (node) 
		{
			var prev_nodes = Blueprint.get_precursor_nodes(node)

			import "rendergraph.drawlist" for Drawlist
			this.drawlist = Drawlist(prev_nodes)
		}
	}

	render_run() 
	{
		if (!this.drawlist) {
			return
		}

		var start = this.get_start()
		var end = this.get_end()
		for (this.index = start; this.index < end; this.index = this.index + 1) {
			this.drawlist.run()
		}
		this.index = 0
	}

	execute_gen()
	{
		var node = Blueprint.get_input_node(this, 1)
		if (node) {
			this.exe_list = ExecuteList([ node ])
		}
	}

	execute_run() 
	{
		if (!this.exe_list) {
			return
		}

		var start = this.get_start()
		var end = this.get_end()
		for (this.index = start; this.index < end; this.index = this.index + 1) {
			this.exe_list.run()
		}
		this.index = 0
	}	

	layout()
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 2
	}

	to_string(name) {
		return "
%(name).start = %(this.start)
%(name).end = %(this.end)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var REGION = 10

		var start = Math.floor(GUI.slider(ctx, "start", this.start, x, y, this.style.width - 50, REGION, false))
		if (start != this.start) {
			this.start = start
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var end = Math.floor(GUI.slider(ctx, "end", this.end, x, y, this.style.width - 50, REGION, false))
		if (end != this.end) {
			this.end = end
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}

	get_start()
	{
		var v_start = Blueprint.calc_input_value(this, 2)
		if (v_start) {
			return v_start.value
		} else {
			return this.start
		}
	}

	get_end()
	{
		var v_end = Blueprint.calc_input_value(this, 3)
		if (v_end) {
			return v_end.value
		} else {
			return this.end
		}
	}
}