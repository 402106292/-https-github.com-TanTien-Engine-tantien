import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "math" for Math
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI

class Clamp is Node
{
	init()
	{
		super.init(Clamp.name)

		this.imports = [
			Pin(this, "v", VAR_TYPE_NUMBER)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_NUMBER)
		]

		this.layout()

		this.min = 0.0
		this.max = 1.0
	}

	calc_value(idx)
	{
		var num = 0
		var v_num = Blueprint.calc_input_value(this, 0)
		if (v_num) {
			num = v_num.value
		}
		return Variant(VAR_TYPE_NUMBER, Math.clamp(num, this.min, this.max))
	}

	calc_inst(gen, idx, module, func, bb) 
	{
		var v = Blueprint.calc_input_inst(gen, this, 0, module, func, bb)
		if (!v) {
			return nil
		}

		var min = module.const_float(this.min)
		var max = module.const_float(this.max)
		return bb.clamp(v, min, max)
	}

	layout()
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 2
	}

	to_string(name) {
		return "
%(name).min = %(this.min)
%(name).max = %(this.max)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var REGION = 10

		var min = GUI.slider(ctx, "min", this.min, x, y, this.style.width - 20, REGION, false)
		if (min != this.min) {
			this.min = min
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var max = GUI.slider(ctx, "max", this.max, x, y, this.style.width - 20, REGION, false)
		if (max != this.max) {
			this.max = max
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}
}