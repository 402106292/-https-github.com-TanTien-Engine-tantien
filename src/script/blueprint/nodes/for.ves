import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_PORT
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "blueprint.blueprint" for Blueprint
import "gui" for GUI
import "math" for Math

class For is Node
{
	init() 
	{
		super.init(For.name)

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "do",   VAR_TYPE_PORT)			
		]
		this.exports = [
			Pin(this, "next",  VAR_TYPE_PORT),
			Pin(this, "index", VAR_TYPE_NUMBER),
			Pin(this, "num", VAR_TYPE_NUMBER)			
		]

		// stop execute path for "do" and "index" and "num"
		this.imports[1].stop_port_pass = true
		this.exports[1].stop_port_pass = true
		this.exports[2].stop_port_pass = true

		this.start = 0
		this.end = 1

		this.index = 0		

		this.layout()

		this.exec_list = []
	}

	calc(idx) 
	{
		if (idx == 1) {
			return Variant(VAR_TYPE_NUMBER, this.index)
		} else if (idx == 2) {
			return Variant(VAR_TYPE_NUMBER, this.end - this.start)		
		}
	}

	execute() 
	{
		for (this.index = this.start; this.index < this.end; this.index = this.index + 1) {
			for (var node in this.exec_list) {
				if (node.execute) {
					node.execute()
				}
			}
		}
	}

	layout()
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 2
	}

	toString(name) {
		return "
%(name).start = %(this.start)
%(name).end = %(this.end)
"
	}

	drawGUI(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calcPanelHeight() - DEFAULT_HEIGHT

		var REGION = 10

		var start = Math.floor(GUI.slider(ctx, "start", this.start, x, y, this.style.width - 50, REGION, false))
		if (start != this.start) {
			this.start = start
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var end = Math.floor(GUI.slider(ctx, "end", this.end, x, y, this.style.width - 50, REGION, false))
		if (end != this.end) {
			this.end = end
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}

	rebuildExecList()
	{
		if (this.imports[1].conns.isEmpty) {
			return
		}

		var root = this.imports[1].conns.front().from.node

		var nodes = []
		Blueprint.getPrecursorNodes(root, nodes)

		this.exec_list = Blueprint.topoSort(nodes)
	}
}