import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4

class Split is Node
{
	init() 
	{
		super.init(Split.name)

		this.imports = [
			Pin(this, "xyzw", VAR_TYPE_NUMBER4),
			Pin(this, "xyz",  VAR_TYPE_NUMBER3),
			Pin(this, "xy",   VAR_TYPE_NUMBER2),
		]
		this.exports = [
			Pin(this, "x",   VAR_TYPE_NUMBER),
			Pin(this, "y",   VAR_TYPE_NUMBER),
			Pin(this, "z",   VAR_TYPE_NUMBER),
			Pin(this, "w",   VAR_TYPE_NUMBER),
			Pin(this, "xyz", VAR_TYPE_NUMBER3),
		]

		this.layout()
	}

	calc_value(idx)
	{
		if (idx == 0)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.x)
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return Variant(VAR_TYPE_NUMBER, v_xyz.value.x)
				} else {
					var v_xy = Blueprint.calc_input_value(this, 2)
					if (v_xy) {
						return Variant(VAR_TYPE_NUMBER, v_xy.value.x)
					}
				}
			}
		}
		else if (idx == 1)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.y)
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return Variant(VAR_TYPE_NUMBER, v_xyz.value.y)
				} else {
					var v_xy = Blueprint.calc_input_value(this, 2)
					if (v_xy) {
						return Variant(VAR_TYPE_NUMBER, v_xy.value.y)
					}
				}
			}
		}
		else if (idx == 2)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.z)
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return Variant(VAR_TYPE_NUMBER, v_xyz.value.z)
				}
			}
		}
		else if (idx == 3)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				return Variant(VAR_TYPE_NUMBER, v_xyzw.value.w)
			}
		}
		else if (idx == 4)
		{
			var v_xyzw = Blueprint.calc_input_value(this, 0)
			if (v_xyzw) {
				var xyzw = v_xyzw.value
				return Variant(VAR_TYPE_NUMBER3, Vector3(xyzw[0], xyzw[1], xyzw[2]))
			} else {
				var v_xyz = Blueprint.calc_input_value(this, 1)
				if (v_xyz) {
					return v_xyz
				}
			}
		}

		return nil
	}

	calc_inst(gen, idx, module, func)
	{
		if (idx == 0)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 0)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return gen.compose_extract(func, xyz, 0)
				} else {
					var xy = Blueprint.calc_input_inst(gen, this, "xy", module, func)
					if (xy) {
						return gen.compose_extract(func, xy, 0)
					}
				}
			}
		}
		else if (idx == 1)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 1)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return gen.compose_extract(func, xyz, 1)
				} else {
					var xy = Blueprint.calc_input_inst(gen, this, "xy", module, func)
					if (xy) {
						return gen.compose_extract(func, xy, 1)
					}
				}
			}
		}
		else if (idx == 2)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 2)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return gen.compose_extract(func, xyz, 2)
				}
			}
		}
		else if (idx == 3)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				return gen.compose_extract(func, xyzw, 3)
			}
		}
		else if (idx == 4)
		{
			var xyzw = Blueprint.calc_input_inst(gen, this, "xyzw", module, func)
			if (xyzw) {
				var x = gen.compose_extract(func, xyzw, 0)
				var y = gen.compose_extract(func, xyzw, 1)
				var z = gen.compose_extract(func, xyzw, 2)
				return gen.compose_float3(func, x, y, z)
			} else {
				var xyz = Blueprint.calc_input_inst(gen, this, "xyz", module, func)
				if (xyz) {
					return xyz
				}
			}
		}

		return nil
	}
}