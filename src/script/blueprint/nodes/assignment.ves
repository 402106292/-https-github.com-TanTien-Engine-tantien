import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_PORT, VAR_TYPE_NUMBER2, VAR_TYPE_NUMBER3, VAR_TYPE_NUMBER4
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.load" for Load
import "blueprint.nodes.boolean" for Boolean
import "blueprint.nodes.integer" for Integer
import "blueprint.nodes.number" for Number
import "blueprint.nodes.load" for Load
import "blueprint.nodes.store" for Store

class Assignment is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "src",  VAR_TYPE_ANY),
			Pin(this, "dst",  VAR_TYPE_ANY),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT),
		]

		this.layout()
	}

	calc_value(idx) 
	{
		return Variant(this.variable)
	}

	execute_run() 
	{
		var dirty = this.assign()

		if (dirty) 
		{
			var n_dst = this.get_dst_node()
			if (n_dst) 
			{
				var nodes = Blueprint.get_successor_nodes(n_dst)
				for (var node in nodes) {
					node.on_gui_dirty()
				}
			}
		}
	}

	assign()
	{
		var v_src = Blueprint.calc_input_value(this, 1)
		var v_dst = Blueprint.calc_input_value(this, 2)
		if (!v_src or !v_dst or v_src.type != v_dst.type) {
			return false
		}

		if (v_src.type == VAR_TYPE_NUMBER2)
		{
			v_dst.value.x = v_src.value.x
			v_dst.value.y = v_src.value.y
		}
		else if (v_src.type == VAR_TYPE_NUMBER3)
		{
			v_dst.value.x = v_src.value.x
			v_dst.value.y = v_src.value.y
			v_dst.value.z = v_src.value.z
		}
		else if (v_src.type == VAR_TYPE_NUMBER4)
		{
			v_dst.value.x = v_src.value.x
			v_dst.value.y = v_src.value.y
			v_dst.value.z = v_src.value.z
			v_dst.value.w = v_src.value.w			
		}
		else
		{
			var n_dst = this.get_dst_node()
			if (n_dst)
			{
				if (n_dst is Boolean) {
					n_dst.value = v_src.value
				} else if (n_dst is Integer) {
					n_dst.value = v_src.value
				} else if (n_dst is Number) {
					n_dst.value = v_src.value
				} 
			}

			return false
		}

		return true
	}

	get_dst_node()
	{
		var n_dst = Blueprint.get_input_node(this, 2)
		if (!n_dst) {
			return nil
		}

		if (n_dst is Load) 
		{
			var prev = Blueprint.get_input_node(n_dst, 0)
			if (prev is Store) {
				return Blueprint.get_input_node(prev, 0)
			}
		}
		else
		{
			return n_dst
		}

		return nil
	}
}