import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_UNKNOWN, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER3, VAR_TYPE_MATRIX4
import "maths" for Matrix44, Float3
import "maths.vector" for Vector3

class Multiply is Node
{
	init() 
	{
		super.init(Multiply.name)

		this.imports = [
			Pin(this, "a", VAR_TYPE_ANY),
			Pin(this, "b", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()
	}

	calc_value(idx)
	{
		var a = Blueprint.calc_input_value(this, 0)
		var b = Blueprint.calc_input_value(this, 1)
		if (!a or !b) {
			return nil
		}

		if (a.type == VAR_TYPE_NUMBER) {
			return Variant(VAR_TYPE_NUMBER, a.value * b.value)
		} else if (a.type == VAR_TYPE_MATRIX4) {
			var mt = Matrix44.init()
			mt.transform_mat4(b.value)
			mt.transform_mat4(a.value)
			return Variant(VAR_TYPE_MATRIX4, mt)
		} else if (a.type == VAR_TYPE_NUMBER3 and b.type == VAR_TYPE_MATRIX4) {
			var p = Float3.init(a.value.x, a.value.y, a.value.z)
			p.transform(b.value)
			return Variant(VAR_TYPE_NUMBER3, Vector3(p.x(), p.y(), p.z()))	
		} else {
			return Variant(VAR_TYPE_UNKNOWN, nil)
		}

		return nil
	}

	calc_inst(idx, ctx) 
	{
		var a = Blueprint.calc_input_inst(this, 0, ctx)
		var b = Blueprint.calc_input_inst(this, 1, ctx)
		
		if (!a and !b) {
			return nil
		} else if (!a) {
			return b
		} else if (!b) {
			return a
		} else {
			return ctx.bb.mul(a, b)
		}
	}

	shader_gen2(node, idx)
	{
		import "shadergraph.shader_builder" for ShaderBuilder

		var a = ShaderBuilder.gen_child(node, "a")
		var b = ShaderBuilder.gen_child(node, "b")

		if (!a and !b) {
			return nil
		} else if (!a) {
			return b
		} else if (!b) {
			return a
		} else {
			var bb = node.find_value("bb")
			return bb.mul(a, b)
		}
	}
}