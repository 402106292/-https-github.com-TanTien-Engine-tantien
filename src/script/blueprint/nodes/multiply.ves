import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ANY, VAR_TYPE_NUMBER, VAR_TYPE_MATRIX4
import "maths" for Matrix44

class Multiply is Node
{
	init() 
	{
		super.init(Multiply.name)

		this.imports = [
			Pin(this, "a", VAR_TYPE_ANY),
			Pin(this, "b", VAR_TYPE_ANY)
		]
		this.exports = [
			Pin(this, "v", VAR_TYPE_ANY)
		]

		this.layout()
	}

	calc(idx)
	{
		var a = nil
		var b = nil
		var conns = this.imports[0].conns
		if (!conns.isEmpty) {
			var f_pin = conns.front().from
			a = f_pin.node.calc(f_pin.slot_idx)
		}
		conns = this.imports[1].conns
		if (!conns.isEmpty) {
			var f_pin = conns.front().from
			b = f_pin.node.calc(f_pin.slot_idx)
		}
		if (!a or !b) {
			return Variant(VAR_TYPE_NUMBER, 0)
		}

		if (a.type == VAR_TYPE_NUMBER) {
			return Variant(VAR_TYPE_NUMBER, a.value * b.value)
		} else if (a.type == VAR_TYPE_MATRIX4) {
			var mt = Matrix44.init()
			mt.transform_mat4(b.value)
			mt.transform_mat4(a.value)
			return Variant(VAR_TYPE_MATRIX4, mt)
		} else {
			return Variant(VAR_TYPE_NUMBER, 0)		
		}
	}
}