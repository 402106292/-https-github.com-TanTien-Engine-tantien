import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "math" for Math
import "maths.vector" for Vector2, Vector3, Vector4

class NodeParam
{
	init(name, value)
	{
		this.name = name
		this.value = value

		this.region = 1.0
		this.integer = false

		this.min = nil
		this.max = nil

		this.gui = true
		this.serialize = true

		this.combo = nil
	}

	init(name, value, params)
	{
		this.init(name, value)
		
		for (var entry in params) {
			this[entry.key] = entry.value
		}
	}

	to_string(name) 
	{
		if (this.serialize) 
		{
			if (this.value is String) {
				return "%(name).query_param(\"%(this.name)\").value = \"%(this.value)\"\n"
			} else if (this.value is Vector2) {
				return "%(name).query_param(\"%(this.name)\").value.set(%(this.value.x), %(this.value.y))\n"
			} else if (this.value is Vector3) {
				return "%(name).query_param(\"%(this.name)\").value.set(%(this.value.x), %(this.value.y), %(this.value.z))\n"
			} else if (this.value is Vector4) {
				return "%(name).query_param(\"%(this.name)\").value.set(%(this.value.x), %(this.value.y), %(this.value.z), %(this.value.w))\n"
			} else {
				return "%(name).query_param(\"%(this.name)\").value = %(this.value)\n"
			}
		}
	}

	gui_height()
	{
		if (!this.gui) {
			return 0
		}

		if (this.value is Bool or this.value is Num) {
			return 1
		} else if (this.value is Vector2) {
			return 2
		} else if (this.value is Vector3) {
			return 3
		} else if (this.value is Vector4) {
			return 4
		} else if (this.combo) {
			return 1
		}

		return 0
	}	

	draw_gui(ctx, pos, width)
	{
		if (!this.gui) {
			return false
		}
		
		var dirty = false

		if (this.value is Num)
		{
			var value = this.draw_number(ctx, pos, width, this.name, this.value)
			if (value != this.value) {
				this.value = value
				dirty = true
			}
		}
		else if (this.value is Bool)
		{
			var value = GUI.checkbox(ctx, this.name, this.value, pos.x, pos.y)
			if (value != this.value) {
				this.value = value
				dirty = true
			}
			pos.y = pos.y - DEFAULT_HEIGHT
		}
		else if (this.value is Vector2)
		{
			var x = this.draw_number(ctx, pos, width, this.name + "_x", this.value.x)
			if (x != this.value.x) {
				this.value.x = x
				dirty = true
			}

			var y = this.draw_number(ctx, pos, width, this.name + "_y", this.value.y)
			if (y != this.value.y) {
				this.value.y = y
				dirty = true
			}
		}		
		else if (this.value is Vector3)
		{
			var x = this.draw_number(ctx, pos, width, this.name + "_x", this.value.x)
			if (x != this.value.x) {
				this.value.x = x
				dirty = true
			}

			var y = this.draw_number(ctx, pos, width, this.name + "_y", this.value.y)
			if (y != this.value.y) {
				this.value.y = y
				dirty = true
			}

			var z = this.draw_number(ctx, pos, width, this.name + "_z", this.value.z)
			if (z != this.value.z) {
				this.value.z = z
				dirty = true
			}
		}
		else if (this.value is Vector4)
		{
			var x = this.draw_number(ctx, pos, width, this.name + "_x", this.value.x)
			if (x != this.value.x) {
				this.value.x = x
				dirty = true
			}

			var y = this.draw_number(ctx, pos, width, this.name + "_y", this.value.y)
			if (y != this.value.y) {
				this.value.y = y
				dirty = true
			}

			var z = this.draw_number(ctx, pos, width, this.name + "_z", this.value.z)
			if (z != this.value.z) {
				this.value.z = z
				dirty = true
			}

			var w = this.draw_number(ctx, pos, width, this.name + "_w", this.value.w)
			if (w != this.value.w) {
				this.value.w = w
				dirty = true
			}
		}
		else if (this.combo)
		{
			var selected = this.combo.query_index(this.value)
			var item = GUI.combo(ctx, this.name, selected, this.combo, pos.x, pos.y, 80)
			if (item != selected) {
				this.value = this.combo[item]
				dirty = true
			}
			pos.y = pos.y - DEFAULT_HEIGHT	
		}

		return dirty
	}

	draw_number(ctx, pos, width, name, number)
	{
		var region = this.region
		if (this.max) {
			region = this.max
		}
		var value = GUI.slider(ctx, name, number, pos.x, pos.y, width - 20, region, false)
		if (this.integer) {
			value = Math.floor(value)
		}
		pos.y = pos.y - DEFAULT_HEIGHT

		return value
	}

	set_value(value)
	{
		if (this.value is Bool and value is Num) {
			this.value = value != 0
		} else {
			this.value = value
		}
	}
}