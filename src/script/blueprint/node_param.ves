import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "math" for Math
import "maths.vector" for Vector2, Vector3, Vector4

class NodeParam
{
	init(name, value)
	{
		this.name = name
		this.value = value

		this.region = 1.0
		this.integer = false

		this.min = nil
		this.max = nil

		this.gui = true
		this.serialize = true
	}

	to_string(name) 
	{
		if (this.serialize) 
		{
			if (this.value is String) {
				return "%(name).query_param(\"%(this.name)\").value = \"%(this.value)\"\n"
			} else if (this.value is Vector2) {
				return "%(name).query_param(\"%(this.name)\").value.set(%(this.value.x), %(this.value.y))\n"
			} else if (this.value is Vector3) {
				return "%(name).query_param(\"%(this.name)\").value.set(%(this.value.x), %(this.value.y), %(this.value.z))\n"
			} else if (this.value is Vector4) {
				return "%(name).query_param(\"%(this.name)\").value.set(%(this.value.x), %(this.value.y), %(this.value.z), %(this.value.w))\n"
			} else {
				return "%(name).query_param(\"%(this.name)\").value = %(this.value)\n"
			}
		}
	}

	gui_height()
	{
		if (!this.gui) {
			return 0
		}

		if (this.value is Bool or this.value is Num) {
			return 1
		}

		return 0
	}	

	draw_gui(ctx, pos, width)
	{
		if (!this.gui) {
			return false
		}
		
		var dirty = false

		if (this.value is Num)
		{
			var region = this.region
			if (this.max) {
				region = this.max
			}
			var value = GUI.slider(ctx, this.name, this.value, pos.x, pos.y, width - 20, region, false)
			if (this.integer) {
				value = Math.floor(value)
			}
			if (value != this.value) {
				this.value = value
				dirty = true
			}
			pos.y = pos.y - DEFAULT_HEIGHT
		}
		else if (this.value is Bool)
		{
			var value = GUI.checkbox(ctx, this.name, this.value, pos.x, pos.y)
			if (value != this.value) {
				this.value = value
				dirty = true
			}
			pos.y = pos.y - DEFAULT_HEIGHT
		}

		return dirty
	}

	set_value(value)
	{
		if (this.value is Bool and value is Num) {
			this.value = value != 0
		} else {
			this.value = value
		}
	}
}