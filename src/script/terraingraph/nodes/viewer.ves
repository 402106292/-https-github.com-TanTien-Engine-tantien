import "terraingraph.node" for Node
import "terraingraph.variant" for VAR_TYPE_HEIGHTFIELD
import "terraingraph.heightfield_proxy" for HeightfieldProxy
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_NODE
import "editor.rendergraph" for Rendergraph
import "editor.node_cache" for NODE_CACHE
import "gui" for GUI
import "blueprint.node_layout" for DEFAULT_HEIGHT

class Viewer is Node
{
	init() 
	{
		super.init(Viewer.name)
	
		this.imports = [
			Pin(this, "hf",  VAR_TYPE_HEIGHTFIELD),
			Pin(this, "cam", VAR_TYPE_NODE),
		]

		this.layout()

		this.hf_proxy = HeightfieldProxy(this.imports[0])

		this.gray = true

		this.draw_node_gray = nil
		this.draw_node_splatmap = nil		
	}

	execute() 
	{
		var draw = nil
		if (this.gray) 
		{
			if (!this.draw_node_gray) {
				var draw_editor = Rendergraph()
				this.draw_node_gray = NODE_CACHE.fetch("assets/rendergraph/draw_terrain_gray.ves", draw_editor)
				Blueprint.connect(this.hf_proxy, "tex", this.draw_node_gray, "tes_heightmap")
			}
			draw = this.draw_node_gray
		}
		else
		{
			if (!this.draw_node_splatmap) {
				var draw_editor = Rendergraph()
				this.draw_node_splatmap = NODE_CACHE.fetch("assets/rendergraph/draw_terrain_splatmap.ves", draw_editor)
				Blueprint.connect(this.hf_proxy, "tex", this.draw_node_splatmap, "tes_heightmap")
			}
			draw = this.draw_node_splatmap
		}

		var cam = Blueprint.calc_input_value(this, 1)
		if (cam and cam.value) {
			Blueprint.connect(cam.value, "this", draw, "view_cam")
		}

		draw.execute()
	}


	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) 
	{
		return "
%(name).gray = %(this.gray)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height* 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var gray = GUI.checkbox(ctx, "gray", this.gray, x, y)
		if (gray != this.gray) {
			this.gray = gray
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		return dirty
	}
}