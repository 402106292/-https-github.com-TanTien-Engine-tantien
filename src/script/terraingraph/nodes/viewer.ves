import "terraingraph.node" for Node
import "terraingraph.variant" for VAR_TYPE_HEIGHTFIELD
import "terraingraph.heightfield_proxy" for HeightfieldProxy
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_NODE
import "editor.rendergraph" for Rendergraph
import "editor.node_cache" for NODE_CACHE

class Viewer is Node
{
	init() 
	{
		super.init(Viewer.name)
	
		this.imports = [
			Pin(this, "hf",  VAR_TYPE_HEIGHTFIELD),
			Pin(this, "cam", VAR_TYPE_NODE),
		]

		this.layout()

		this.hf_proxy = HeightfieldProxy(this.imports[0])

		this.draw_editor = nil
		this.draw_node = nil
		this.init_draw_node()
	}

	execute() 
	{
		var cam = Blueprint.calc_input_value(this, 1)
		if (cam and cam.value) {
			Blueprint.connect(cam.value, "this", this.draw_node, "view_cam")
		}

		this.draw_node.execute()
	}

	init_draw_node()
	{	
		this.draw_editor = Rendergraph()
		this.draw_node = NODE_CACHE.fetch("assets/rendergraph/draw_terrain_splatmap.ves", this.draw_editor)

		Blueprint.connect(this.hf_proxy, "tex", this.draw_node, "tes_heightmap")
	}
}