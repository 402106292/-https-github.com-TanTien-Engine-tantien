import "blueprint.node" for Node
import "terraingraph.node_helper" for NodeHelper
import "terraingraph.style" for HEIGHTFIELD_SIZE
import "terraingraph.heightfield_proxy" for HeightfieldProxy
import "terraingraph.variant" for VAR_TYPE_HEIGHTFIELD, VarHeightfield
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.field_proxy" for FieldProxy
import "image" for ImageData
import "render" for Texture2D, Render
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "blueprint.blueprint" for Blueprint
import "rendergraph.nodes.shader" for Shader
import "rendergraph.nodes.compute" for Compute
import "rendergraph.drawlist" for Drawlist

var DARWLIST = nil
var SHADER   = nil
var COMPUTE  = nil

var CS = "
#version 430

#define LOCAL_SIZE 32

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout(binding = 0, r16f) writeonly uniform image2D out_tex;

uniform sampler2D in0_tex;
uniform sampler2D in1_tex;

uniform UBO
{
    // average, add, subtract, multiply, divide, max, min
	int method;
};

void main()
{
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec2 tex_coords = pos / float(imageSize(out_tex));

    float a = texture(in0_tex, tex_coords).r;
    float b = texture(in1_tex, tex_coords).r;

    float v = 0.0;
    if (method == 0) {
    	v = (a + b) * 0.5;
    } else if (method == 1) {
    	v = a + b;
    } else if (method == 2) {
    	v = a - b;
    } else if (method == 3) {
    	v = a * b;
    } else if (method == 4) {
    	v = a / b;
    } else if (method == 5) {
    	v = max(a, b);
    } else if (method == 6) {
    	v = min(a, b);
    }

    imageStore(out_tex, pos, vec4(v));
}
"	

class Combiner is Node
{
	init() 
	{
		super.init(Combiner.name)

		this.imports = [
			Pin(this, "a", VAR_TYPE_HEIGHTFIELD),
			Pin(this, "b", VAR_TYPE_HEIGHTFIELD)			
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_HEIGHTFIELD)
		]

		this.layout()

		this.method = "add"

		this.hf = VarHeightfield()

		// for gui
		this.method_items = [ "average", "add", "subtract", "multiply", "divide", "max", "min" ]
		this.method_selected = 1
	}

	calc_value(idx)
	{
		return Variant(VAR_TYPE_HEIGHTFIELD, this.hf)
	}

	setup()
	{
		this.need_rebuild = true
	}

	execute()
	{
		if (!this.hf.tex) {
			this.hf.tex = Texture2D.init(HEIGHTFIELD_SIZE, HEIGHTFIELD_SIZE, "r16f")
		}
		if (!DARWLIST) 
		{
			var shader = Shader()
			shader.cs = CS
			shader.execute()

			var compute = Compute()
			compute.num_groups = [ HEIGHTFIELD_SIZE / 32, HEIGHTFIELD_SIZE / 32, 1 ]

			Blueprint.connect(shader, "out", compute, "shader")

			DARWLIST = Drawlist([compute])

			SHADER = shader
			COMPUTE = compute
		}

		if (this.need_rebuild) 
		{
			COMPUTE.dirty = true
			this.bind(SHADER)
			DARWLIST.draw()

			this.need_rebuild = false
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT
	}

	to_string(name) {
		return "
%(name).method = \"%(this.method)\"
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var method = GUI.combo(ctx, "method", this.method_selected, this.method_items, x, y, 80)
		if (method != this.method_selected) 
		{
			this.method_selected = method
			this.method = this.method_items[method]
			dirty = true	
		}

		if (dirty) {
			NodeHelper.make_node_dirty(this)
		}

		return dirty
	}

	bind(shader)
	{
		var a = HeightfieldProxy(this.imports[0])
		Blueprint.connect(a, "tex", shader, "in0_tex")

		var b = HeightfieldProxy(this.imports[1])
		Blueprint.connect(b, "tex", shader, "in1_tex")

		var out = HeightfieldProxy(this.exports[0])
		Blueprint.connect(out, "tex", shader, "out_tex")

		var method = FieldProxy(this, "method_selected")
		Blueprint.connect(method, "out", shader, "method")
	}
}