import "graphics" for Painter, Graphics
import "editor.editop" for EditOP
import "editor.operators.draw_select_rect" for DrawSelectRect
import "editor.colors" for Colors
import "maths.vector" for Vector2
import "maths.rect" for Rect

class Node2dSelect is EditOP
{
	init(cam, scene_stack)
	{
		this.camera = cam
		this.scene_stack = scene_stack

		this.draw_op = DrawSelectRect(cam)

		this.first_pos = nil
	}

	on_mouse_press(x, y)
	{
		this.draw_op.on_mouse_press(x, y)

		var p = this.camera.screen2project(Vector2(x, y))
		var sel = this.query_by_pos(p)
		var scene = this.scene_stack.top()
		if (sel) 
		{
			if (!scene.selection.contains(sel)) {
				scene.selection.clear()
				scene.selection.add(sel)			
			}
		} 
		else 
		{
			scene.selection.clear()
		}

		this.first_pos = Vector2(x, y)
	}

	on_mouse_release(x, y)
	{
		this.draw_op.on_mouse_release(x, y)

		if (this.first_pos.x == x and this.first_pos.y == y) {
			return
		}

		var p0 = this.camera.screen2project(this.first_pos)
		var p1 = this.camera.screen2project(Vector2(x, y))
		var selected = this.query_by_rect(p0, p1, this.first_pos.x < x)
		var scene = this.scene_stack.top()
		for (var node in selected) {
			scene.selection.add(node)
		}

		this.first_pos = nil
	}

	on_mouse_drag(x, y)
	{
		this.draw_op.on_mouse_drag(x, y)
	}

	draw()
	{
		this.draw_op.draw()

		var pt = Painter.init()
		var scene = this.scene_stack.top()
		for (var node in scene.selection)
		{
			var bb = node.components["bounding"]
			var borders = bb.get_border_points()
			var vertices = [borders[0].x, borders[0].y, borders[1].x, borders[1].y, borders[2].x, borders[2].y, borders[3].x, borders[3].y]
			pt.add_polygon(vertices, Colors.select_red(), this.camera.scale)
		}
		Graphics.draw_painter(pt)
	}

	clear()
	{
		this.draw_op.clear()
	}

	query_by_pos(pos)
	{
		var scene = this.scene_stack.top()
		for (var node in scene.nodes)
		{
			var bb = node.components["bounding"]
			if (bb.is_contain(pos)) {
				return node
			}
		}
		return nil
	}

	query_by_rect(p0, p1, contain)
	{
		var selected = []
		var outer = Rect(p0, p1)
		var scene = this.scene_stack.top()
		for (var node in scene.nodes)
		{
			var bb = node.components["bounding"]
			var inner_border = bb.get_border_points()
			if (contain) 
			{
				var inner = Rect()
				inner.combine_points(inner_border)
				if (outer.is_contain_rect(inner)) {
					selected.add(node)
				}
			} 
			else 
			{
				if (outer.is_intersect_polygon(inner_border)) {
					selected.add(node)
				}
			}
		}
		return selected
	}
}