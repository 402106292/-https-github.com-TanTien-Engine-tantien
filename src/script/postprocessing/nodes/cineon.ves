import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * DPX/Cineon shader by Loadus
 */

uniform __UBO__
{
    vec3 rgb_curve;
    vec3 rgb_c;

    float contrast;
    float saturation;
    float colorfulness;
    
    float strength;
};

const mat3 RGB = mat3(
     2.6714711726599600, -1.2672360578624100, -0.4109956021722270,
    -1.0251070293466400,  1.9840911624108900,  0.0439502493584124,
     0.0610009456429445, -0.2236707508128630,  1.1590210416706100
);
const mat3 XYZ = mat3(
     0.5003033835433160,  0.3380975732227390,  0.1645897795458570,
     0.2579688942747580,  0.6761952591447060,  0.0658358459823868,
     0.0234517888692628,  0.1126992737203000,  0.8668396731242010
);

vec3 cineon_pass(vec3 color)
{
    vec3 B = color;
    B = B * (1.0 - contrast) + (0.5 * contrast);
    vec3 Btemp = (1.0 / (1.0 + exp(rgb_curve / 2.0)));
    B = ((1.0 / (1.0 + exp(-rgb_curve * (B - rgb_c)))) / (-2.0 * Btemp + 1.0)) + (-Btemp / (-2.0 * Btemp + 1.0));

    float value = max(max(B.r, B.g), B.b);
    vec3 col = B / value;
    col = pow(abs(col), vec3(1.0 / colorfulness));

    vec3 c0 = col * value;
    c0 = XYZ * c0;
    float luma = dot(c0, vec3(0.30, 0.59, 0.11));
    c0 = (1.0 - saturation) * luma + saturation * c0;
    c0 = RGB * c0;

    return mix(color, c0, strength);
}
"

class Cineon is Node
{
	init() 
	{
		super.init(Cineon.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "cineon_pass", [
            [ "rgb_curve", Vector3(8.0, 8.0, 8.0), { "min" : 1.0, "max" : 15.0 } ],
            [ "rgb_c", Vector3(0.36, 0.36, 0.34), { "min" : 0.2, "max" : 0.5 } ],
            [ "contrast", 0.1, { "min" : 0.0, "max" : 1.0 } ],
            [ "saturation", 3.0, { "min" : 0.0, "max" : 8.0 } ],
            [ "colorfulness", 2.5, { "min" : 0.1, "max" : 2.5 } ],
            [ "strength", 0.2, { "min" : 0.0, "max" : 1.0 } ],
        ])
	}
}