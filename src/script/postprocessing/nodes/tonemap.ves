import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * Tonemap version 1.1
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 */

uniform float gamma;
uniform float exposure;
uniform float saturation;

uniform float bleach;

uniform float defog;
uniform float3 fog_color;

float3 tonemap_pass(float3 color : COLOR, float2 texcoord : TexCoord) : SV_Target
{
    color = clamp(color - defog * fog_color * 2.55, 0.0, 1.0); // defog
    color *= pow(2.0f, exposure); // exposure
    color = pow(color, gamma); // gamma

    const float3 coefLuma = float3(0.2126, 0.7152, 0.0722);
    float lum = dot(coefLuma, color);
    
    float L = clamp(10.0 * (lum - 0.45), 0.0, 1.0);
    float3 A2 = bleach * color;

    float3 result1 = 2.0f * color * lum;
    float3 result2 = 1.0f - 2.0f * (1.0f - lum) * (1.0f - color);
    
    float3 newColor = lerp(result1, result2, L);
    float3 mixRGB = A2 * newColor;
    color += ((1.0f - A2) * mixRGB);
    
    float3 middlegray = dot(color, (1.0 / 3.0));
    float3 diffcolor = color - middlegray;
    color = (color + diffcolor * saturation) / (1 + (diffcolor * saturation)); // saturation
    
    return color;
}
"

class Tonemap is Node
{
	init() 
	{
		super.init(Tonemap.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "hlsl", "tonemap_pass", [
            [ "gamma", 1.0, { "min" : 0.0, "max" : 2.0 } ],
            [ "exposure", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "saturation", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "bleach", 0.0, { "min" : 0.0, "max" : 1.0 } ],
            [ "defog", 0.0, { "min" : 0.0, "max" : 1.0 } ],
            [ "fog_color", Vector3(0.0, 0.0, 1.0) ],
        ])
	}
}