import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * Tonemap version 1.1
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 */

uniform __UBO__
{
    float gamma;
    float exposure;
    float saturation;

    float bleach;
    
    float defog;
    vec3 fog_color;
};

vec3 tonemap_pass(vec3 color, vec2 texcoord)
{
    vec3 ret = color;
    ret = clamp(ret - defog * fog_color * 2.55, 0.0, 1.0); // defog
    ret *= pow(2.0f, exposure); // exposure
    ret = vec3(pow(ret.x, gamma), pow(ret.y, gamma), pow(ret.z, gamma)); // gamma

    const vec3 coefLuma = vec3(0.2126, 0.7152, 0.0722);
    float lum = dot(coefLuma, ret);
    
    float L = clamp(10.0 * (lum - 0.45), 0.0, 1.0);
    vec3 A2 = bleach * ret;

    vec3 result1 = 2.0f * ret * lum;
    vec3 result2 = 1.0f - 2.0f * (1.0f - lum) * (1.0f - ret);
    
    vec3 newColor = mix(result1, result2, L);
    vec3 mixRGB = A2 * newColor;
    ret += ((1.0f - A2) * mixRGB);
    
    vec3 middlegray = vec3(dot(ret, vec3(1.0 / 3.0)));
    vec3 diffcolor = ret - middlegray;
    ret = (ret + diffcolor * saturation) / (1 + (diffcolor * saturation)); // saturation
    
    return ret;
}
"

class Tonemap is Node
{
	init() 
	{
		super.init(Tonemap.name)

		this.node_func = NodeFunction(this, CODE, "tonemap_pass", [
            [ "gamma", 1.0, { "min" : 0.0, "max" : 2.0 } ],
            [ "exposure", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "saturation", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "bleach", 0.0, { "min" : 0.0, "max" : 1.0 } ],
            [ "defog", 0.0, { "min" : 0.0, "max" : 1.0 } ],
            [ "fog_color", Vector3(0.0, 0.0, 1.0) ],
        ])
	}
}