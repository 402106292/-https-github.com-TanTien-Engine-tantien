import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * Technicolor version 1.1
 * Original by DKT70
 * Optimized by CeeJay.dk
 */

uniform UBO
{
    float power;
    vec3 rgb_negative_amount;
    
    float strength;
};

vec3 technicolor_pass(vec3 color)
{
    const vec3 cyanfilter = vec3(0.0, 1.30, 1.0);
    const vec3 magentafilter = vec3(1.0, 0.0, 1.05);
    const vec3 yellowfilter = vec3(1.6, 1.6, 0.05);
    const vec2 redorangefilter = vec2(1.05, 0.620); // RG_
    const vec2 greenfilter = vec2(0.30, 1.0);       // RG_
    const vec2 magentafilter2 = magentafilter.rb;     // R_B

    vec3 tcol = color;
    
    vec2 negative_mul_r = tcol.rg * (1.0 / (rgb_negative_amount.r * power));
    vec2 negative_mul_g = tcol.rg * (1.0 / (rgb_negative_amount.g * power));
    vec2 negative_mul_b = tcol.rb * (1.0 / (rgb_negative_amount.b * power));
    vec3 output_r = vec3(dot(redorangefilter, negative_mul_r)) + cyanfilter;
    vec3 output_g = vec3(dot(greenfilter, negative_mul_g)) + magentafilter;
    vec3 output_b = vec3(dot(magentafilter2, negative_mul_b)) + yellowfilter;

    return mix(tcol, output_r * output_g * output_b, strength);
}
"

class Technicolor is Node
{
	init() 
	{
		super.init(Technicolor.name)

		this.node_func = NodeFunction(this, CODE, "technicolor_pass", [
            [ "power", 4.0, { "min" : 0.0, "max" : 8.0 } ],
            [ "rgb_negative_amount", Vector3(0.88, 0.88, 0.88) ],
            [ "strength", 0.4, { "min" : 0.0, "max" : 1.0 } ],
        ])
	}
}