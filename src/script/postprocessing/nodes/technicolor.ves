import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * Technicolor version 1.1
 * Original by DKT70
 * Optimized by CeeJay.dk
 */

uniform float power;
uniform float3 rgb_negative_amount;

uniform float strength;

float3 technicolor_pass(float3 color : COLOR) : SV_Target
{
    const float3 cyanfilter = float3(0.0, 1.30, 1.0);
    const float3 magentafilter = float3(1.0, 0.0, 1.05);
    const float3 yellowfilter = float3(1.6, 1.6, 0.05);
    const float2 redorangefilter = float2(1.05, 0.620); // RG_
    const float2 greenfilter = float2(0.30, 1.0);       // RG_
    const float2 magentafilter2 = magentafilter.rb;     // R_B

    float3 tcol = color;
    
    float2 negative_mul_r = tcol.rg * (1.0 / (rgb_negative_amount.r * power));
    float2 negative_mul_g = tcol.rg * (1.0 / (rgb_negative_amount.g * power));
    float2 negative_mul_b = tcol.rb * (1.0 / (rgb_negative_amount.b * power));
    float3 output_r = dot(redorangefilter, negative_mul_r).xxx + cyanfilter;
    float3 output_g = dot(greenfilter, negative_mul_g).xxx + magentafilter;
    float3 output_b = dot(magentafilter2, negative_mul_b).xxx + yellowfilter;

    return lerp(tcol, output_r * output_g * output_b, strength);
}

"

class Technicolor is Node
{
	init() 
	{
		super.init(Technicolor.name)

		this.node_func = NodeFunction(this, CODE, "hlsl", "technicolor_pass", [
            [ "power", 4.0, { "min" : 0.0, "max" : 8.0 } ],
            [ "rgb_negative_amount", Vector3(0.88, 0.88, 0.88) ],
            [ "strength", 0.4, { "min" : 0.0, "max" : 1.0 } ],
        ])
	}
}