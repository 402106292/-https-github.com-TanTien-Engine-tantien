import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector2

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * Vignette version 1.3
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 *
 * Darkens the edges of the image to make it look more like it was shot with a camera lens.
 * May cause banding artifacts.
 */

#include \"assets/shaders/reshade_adapter.hlsl\"

uniform int type;
uniform float ratio;
uniform float radius;
uniform float amount;
uniform int slope;
uniform float2 center;

float4 vignette_pass(float4 color : COLOR, float2 tex : TexCoord) : SV_Target
{
  if (type == 0)
  {
    // Set the center
    float2 distance_xy = tex - center;

    // Adjust the ratio
    distance_xy *= float2((BUFFER_RCP_HEIGHT / BUFFER_RCP_WIDTH), ratio);

    // Calculate the distance
    distance_xy /= radius;
    float distance = dot(distance_xy, distance_xy);

    // Apply the vignette
    color.rgb *= (1.0 + pow(distance, slope * 0.5) * amount); //pow - multiply
  }

  if (type == 1) // New round (-x*x+x) + (-y*y+y) method.
  {
    tex = -tex * tex + tex;
    color.rgb = saturate(((BUFFER_RCP_HEIGHT / BUFFER_RCP_WIDTH)*(BUFFER_RCP_HEIGHT / BUFFER_RCP_WIDTH) * ratio * tex.x + tex.y) * 4.0) * color.rgb;
  }

  if (type == 2) // New (-x*x+x) * (-y*y+y) TV style method.
  {
    tex = -tex * tex + tex;
    color.rgb = saturate(tex.x * tex.y * 100.0) * color.rgb;
  }
    
  if (type == 3)
  {
    tex = abs(tex - 0.5);
    float tc = dot(float4(-tex.x, -tex.x, tex.x, tex.y), float4(tex.y, tex.y, 1.0, 1.0)); //XOR

    tc = saturate(tc - 0.495);
    color.rgb *= (pow((1.0 - tc * 200), 4) + 0.25); //or maybe abs(tc*100-1) (-(tc*100)-1)
  }
  
  if (type == 4)
  {
    tex = abs(tex - 0.5);
    float tc = dot(float4(-tex.x, -tex.x, tex.x, tex.y), float4(tex.y, tex.y, 1.0, 1.0)); //XOR

    tc = saturate(tc - 0.495) - 0.0002;
    color.rgb *= (pow((1.0 - tc * 200), 4) + 0.0); //or maybe abs(tc*100-1) (-(tc*100)-1)
  }

  if (type == 5) // MAD version of 2
  {
    tex = abs(tex - 0.5);
    float tc = tex.x * (-2.0 * tex.y + 1.0) + tex.y; //XOR

    tc = saturate(tc - 0.495);
    color.rgb *= (pow((-tc * 200 + 1.0), 4) + 0.25); //or maybe abs(tc*100-1) (-(tc*100)-1)
    //color.rgb *= (pow(((tc*200.0)-1.0),4)); //or maybe abs(tc*100-1) (-(tc*100)-1)
  }

  if (type == 6) // New round (-x*x+x) * (-y*y+y) method.
  {
    //tex.y /= float2((BUFFER_RCP_HEIGHT / BUFFER_RCP_WIDTH), ratio);
    float tex_xy = dot(float4(tex, tex), float4(-tex, 1.0, 1.0)); //dot is actually slower
    color.rgb = saturate(tex_xy * 4.0) * color.rgb;
  }

  return color;
}
"

class Vignette is Node
{
	init() 
	{
		super.init(Vignette.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "hlsl", "vignette_pass", [
            [ "type", 0, { "integer" : true, "min" :0, "max" : 6 }  ],  // 0: Original, 1: New, 2: TV style, 3: Untitled 1, 4: Untitled 2, 5: Untitled 3, 6: Untitled 4
            [ "ratio", 1.0, { "min" : 0.15, "max" : 6.0 } ],
            [ "radius", 2.0, { "min" : -1.0, "max" : 3.0 } ],
            [ "amount", -1.0, { "min" : -2.0, "max" : 1.0 } ],
            [ "slope", 2, { "integer" : true, "min" : 2, "max" : 16 } ],
            [ "center", Vector2(0.5, 0.5) ],
        ])
	}
}