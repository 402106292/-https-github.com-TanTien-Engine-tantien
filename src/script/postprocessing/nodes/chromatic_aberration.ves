import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector2

var CODE = "
// from https://github.com/crosire/reshade-shaders
/**
 * Chromatic Aberration
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 *
 * Distorts the image by shifting each color component, which creates color artifacts similar to those in a very cheap lens or a cheap sensor.
 */

// todo
const vec2 BUFFER_PIXEL_SIZE = 1.0 / vec2(2048.0);

vec3 chromatic_aberration_pass(sampler2D tex, vec2 texcoord, vec2 Shift, float Strength)
{
    vec3 color = texture(tex, texcoord).rgb;
    vec3 old_color = color;
    // Sample the color components
    color.r = texture(tex, texcoord + (BUFFER_PIXEL_SIZE * Shift)).r;
    color.g = old_color.g;
    color.b = texture(tex, texcoord - (BUFFER_PIXEL_SIZE * Shift)).b;

    // Adjust the strength of the effect
    return mix(old_color, color, Strength);
}
"

class ChromaticAberration is Node
{
	init() 
	{
		super.init(ChromaticAberration.name)

		this.node_func = NodeFunction(this, CODE, "chromatic_aberration_pass", [
            [ "Shift", Vector2(2.5, -0.5) ],        // [ -10, 10 ]
            [ "Strength", 0.5 ],                    // [ 0.0, 1.0 ]
        ])
	}
}