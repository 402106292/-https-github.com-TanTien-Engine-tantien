import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector2

var CODE = "
// from https://github.com/crosire/reshade-shaders
/**
 * Chromatic Aberration
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 *
 * Distorts the image by shifting each color component, which creates color artifacts similar to those in a very cheap lens or a cheap sensor.
 */

#include \"assets/shaders/reshade_adapter.hlsl\"

SamplerState g_sampler;
Texture2D g_texture;

uniform float2 shift;
uniform float strength;

float3 chromatic_aberration_pass(float2 texcoord : TexCoord) : SV_Target
{
    float3 color, colorInput = g_texture.Sample(g_sampler, texcoord).rgb;
    // Sample the color components
    color.r = g_texture.Sample(g_sampler, texcoord + (BUFFER_PIXEL_SIZE * shift)).r;
    color.g = colorInput.g;
    color.b = g_texture.Sample(g_sampler, texcoord - (BUFFER_PIXEL_SIZE * shift)).b;

    // Adjust the strength of the effect
    return lerp(colorInput, color, strength);
}
"

class ChromaticAberration is Node
{
	init() 
	{
		super.init(ChromaticAberration.name)

		this.node_func = NodeFunction(this, CODE, "hlsl", "chromatic_aberration_pass", [
            [ "shift", Vector2(2.5, -0.5), { "min" : -10.0, "max" : 10.0 } ],
            [ "strength", 0.5, { "min" : 0.0, "max" : 1.0 } ],
        ])
	}
}