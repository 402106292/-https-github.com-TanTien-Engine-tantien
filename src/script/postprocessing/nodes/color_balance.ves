import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction

var CODE = "
// from https://github.com/prod80/prod80-ReShade-Repository

uniform bool preserve_luma;     // Preserve Luminosity
uniform int separation_mode;    // Luma Separation Mode

uniform float s_RedShift;       // Shadows: Cyan <--> Red
uniform float s_GreenShift;     // Shadows: Magenta <--> Green
uniform float s_BlueShift;      // Shadows: Yellow <--> Blue

uniform float m_RedShift;       // Midtones: Cyan <--> Red
uniform float m_GreenShift;     // Midtones: Magenta <--> Green
uniform float m_BlueShift;      // Midtones: Yellow <--> Blue

uniform float h_RedShift;       // Highlights: Cyan <--> Red
uniform float h_GreenShift;     // Highlights: Magenta <--> Green
uniform float h_BlueShift;      // Highlights: Yellow <--> Blue

#define ES_RGB   float3( 1.0 - float3( 0.299, 0.587, 0.114 ))
#define ES_CMY   float3( dot( ES_RGB.yz, 0.5 ), dot( ES_RGB.xz, 0.5 ), dot( ES_RGB.xy, 0.5 ))

float3 curve( float3 x )
{
    return x * x * ( 3.0f - 2.0f * x );
}

float3 ColorBalance( float3 c, float3 shadows, float3 midtones, float3 highlights )
{
    // For highlights
    float luma = dot( c.xyz, float3( 0.333333f, 0.333334f, 0.333333f ));
        
    // Determine the distribution curves between shadows, midtones, and highlights
    float3 dist_s; float3 dist_h;

    switch( separation_mode )
    {
        /*
        Clear cutoff between shadows and highlights
        Maximizes precision at the loss of harsher transitions between contrasts
        Curves look like:

        Shadows                Highlights             Midtones
        ‾‾‾—_                                _—‾‾‾         _——‾‾‾——_
                ‾‾——__________    __________——‾‾         ___—‾         ‾—___
        0.0.....0.5.....1.0    0.0.....0.5.....1.0    0.0.....0.5.....1.0
            
        */
        case 0:
        {
            dist_s.xyz  = curve( max( 1.0f - c.xyz * 2.0f, 0.0f ));
            dist_h.xyz  = curve( max(( c.xyz - 0.5f ) * 2.0f, 0.0f ));
        } break;

        /*
        Higher degree of blending between individual curves
        F.e. shadows will still have a minimal weight all the way into highlight territory
        Ensures smoother transition areas between contrasts
        Curves look like:

        Shadows                Highlights             Midtones
        ‾‾‾—_                                _—‾‾‾          __---__
                ‾‾———————_____    _____———————‾‾         ___-‾‾       ‾‾-___
        0.0.....0.5.....1.0    0.0.....0.5.....1.0    0.0.....0.5.....1.0
            
        */
        case 1:
        {
            dist_s.xyz  = pow( 1.0f - c.xyz, 4.0f );
            dist_h.xyz  = pow( c.xyz, 4.0f );
        } break;
    }

    // Get luminosity offsets
    // One could omit this whole code part in case no luma should be preserved
    float3 s_rgb = 1.0f;
    float3 m_rgb = 1.0f;
    float3 h_rgb = 1.0f;

    if( preserve_luma )
    {
        s_rgb    = shadows > 0.0f     ? ES_RGB * shadows      : ES_CMY * abs( shadows );
        m_rgb    = midtones > 0.0f    ? ES_RGB * midtones     : ES_CMY * abs( midtones );
        h_rgb    = highlights > 0.0f  ? ES_RGB * highlights   : ES_CMY * abs( highlights );
    }
    float3 mids  = saturate( 1.0f - dist_s.xyz - dist_h.xyz );
    float3 highs = dist_h.xyz * ( highlights.xyz * h_rgb.xyz * ( 1.0f - luma ));
    float3 newc  = c.xyz * ( dist_s.xyz * shadows.xyz * s_rgb.xyz + mids.xyz * midtones.xyz * m_rgb.xyz ) * ( 1.0f - c.xyz ) + highs.xyz;
    return saturate( c.xyz + newc.xyz );
}

float4 color_balance_pass(float4 color : COLOR) : SV_Target
{
    color.xyz         = saturate( color.xyz );
    color.xyz         = ColorBalance( color.xyz, float3( s_RedShift, s_GreenShift, s_BlueShift ), 
                                                 float3( m_RedShift, m_GreenShift, m_BlueShift ),
                                                 float3( h_RedShift, h_GreenShift, h_BlueShift ));
    return float4( color.xyz, 1.0f );
}
"

class ColorBalance is Node
{
	init() 
	{
		super.init(ColorBalance.name)

		this.node_func = NodeFunction(this, CODE, "hlsl", "color_balance_pass", [
            [ "preserve_luma", true ],
            [ "separation_mode", 0, { "integer" : true, "min" : 0, "max" : 1 } ],       // 0: Harsh Separation, 1: Smooth Separation
            [ "s_RedShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "s_GreenShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "s_BlueShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "m_RedShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "m_GreenShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "m_BlueShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "h_RedShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "h_GreenShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
            [ "h_BlueShift", 0.0, { "min" : -1.0, "max" : 1.0 } ],
        ])
	}
}