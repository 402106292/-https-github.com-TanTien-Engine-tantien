import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector2, Vector3

var CODE = "
// from https://github.com/prod80/prod80-ReShade-Repository

uniform __UBO__
{
    vec2 screen_size;
    vec2 pixel_size;
};

float3 HUEToRGB( float H )
{
    return saturate( float3( abs( H * 6.0f - 3.0f ) - 1.0f,
                                2.0f - abs( H * 6.0f - 2.0f ),
                                2.0f - abs( H * 6.0f - 4.0f )));
}

vec3 chromatic_aberration_pass(vec3 color)
{
    float4 color      = 0.0f;
    float px          = pixel_size.x;
    float py          = pixel_size.y;
    float aspect      = screen_size.x / screen_size.y;
    float3 orig       = color;
    float depth       = ReShade::GetLinearizedDepth( texcoord ).x;
    depth             = smoothstep( depthStart, depthEnd, depth );
    depth             = pow( depth, depthCurve );
    float CA_width_n  = CA_width;
    if( enable_depth_width )
        CA_width_n    *= depth;

    //float2 coords     = clamp( texcoord.xy * 2.0f - float2( oX + 1.0f, oY + 1.0f ), -1.0f, 1.0f );
    float2 coords     = texcoord.xy * 2.0f - float2( oX + 1.0f, oY + 1.0f ); // Let it ripp, and not clamp!
    float2 uv         = coords.xy;
    coords.xy         /= float2( CA_shapeX / aspect, CA_shapeY );
    float2 caintensity= length( coords.xy ) * CA_width_n;
    caintensity.y     = caintensity.x * caintensity.x + 1.0f;
    caintensity.x     = 1.0f - ( 1.0f / ( caintensity.y * caintensity.y ));
    caintensity.x     = pow( caintensity.x, CA_curve );

    int degreesY      = degrees;
    float c           = 0.0f;
    float s           = 0.0f;
    switch( CA_type )
    {
        // Radial: Y + 90 w/ multiplying with uv.xy
        case 0:
        {
            degreesY      = degrees + 90 > 360 ? degreesY = degrees + 90 - 360 : degrees + 90;
            c             = cos( radians( degrees )) * uv.x;
            s             = sin( radians( degreesY )) * uv.y;
        }
        break;
        // Longitudinal: X = Y w/o multiplying with uv.xy
        case 1:
        {
            c             = cos( radians( degrees ));
            s             = sin( radians( degreesY ));
        }
        break;
        // Full screen Radial
        case 2:
        {
            degreesY      = degrees + 90 > 360 ? degreesY = degrees + 90 - 360 : degrees + 90;
            caintensity.x = 1.0f;
            c             = cos( radians( degrees )) * uv.x;
            s             = sin( radians( degreesY )) * uv.y;
        }
        break;
        // Full screen Longitudinal
        case 3:
        {
            caintensity.x = 1.0f;
            c             = cos( radians( degrees ));
            s             = sin( radians( degreesY ));
        }
        break;
    }
        
    //Apply based on scene depth
    if( enable_depth_int )
        caintensity.x *= depth;

    float3 huecolor   = 0.0f;
    float3 temp       = 0.0f;
    float o1          = sampleSTEPS - 1.0f;
    float o2          = 0.0f;
    float3 d          = 0.0f;

    // Scale CA (hackjob!)
    float caWidth     = CA * ( max( BUFFER_WIDTH, BUFFER_HEIGHT ) / 1920.0f ); // Scaled for 1920, raising resolution in X or Y should raise scale

    float offsetX     = px * c * caintensity.x;
    float offsetY     = py * s * caintensity.x;

    for( float i = 0; i < sampleSTEPS; i++ )
    {
        huecolor.xyz  = HUEToRGB( i / sampleSTEPS );
        o2            = lerp( -caWidth, caWidth, i / o1 );
        temp.xyz      = tex2D( ReShade::BackBuffer, texcoord.xy + float2( o2 * offsetX, o2 * offsetY )).xyz;
        color.xyz     += temp.xyz * huecolor.xyz;
        d.xyz         += huecolor.xyz;
    }
    //color.xyz         /= ( sampleSTEPS / 3.0f * 2.0f ); // Too crude and doesn't work with low sampleSTEPS ( too dim )
    color.xyz           /= dot( d.xyz, 0.333333f ); // seems so-so OK
    color.xyz           = lerp( orig.xyz, color.xyz, CA_strength );
    color.xyz           = lerp( color.xyz, vignetteColor.xyz * caintensity.x + ( 1.0f - caintensity.x ) * color.xyz, show_CA );
    color.xyz           = display_depth ? depth.xxx : color.xyz;
    return float4( color.xyz, 1.0f );
}

"

class ChromaticAberration2 is Node
{
	init() 
	{
		super.init()

		this.node_func = NodeFunction(this, "pixel", CODE, "glsl", "chromatic_aberration_pass", [
            [ "Red2strip", Vector3(1.0, 0.098, 0.0) ],
            [ "Cyan2strip", Vector3(0.0, 0.988, 1.0) ],
            [ "colorKey", Vector3(1.0, 1.0, 1.0) ],
            [ "Saturation2", 1.5, { "min" : 1.0, "max" : 2.0 } ],
            [ "enable3strip", false ],
            [ "ColorStrength", Vector3(0.2, 0.2, 0.2) ],
            [ "Brightness", 1.0, { "min" : 0.5, "max" : 1.5 } ],
            [ "Saturation", 1.0, { "min" : 0.0, "max" : 1.5 } ],
            [ "Strength", 1.0, { "min" : 0.0, "max" : 1.0 } ],
        ])
	}
}