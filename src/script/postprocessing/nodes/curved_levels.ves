import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector2, Vector3
import "shader" for ShaderTools

var CODE = "
// from https://github.com/prod80/prod80-ReShade-Repository

#ifndef CURVEDCONTRASTS_ENABLE_RGB
#define CURVEDCONTRASTS_ENABLE_RGB      0
#endif

#ifndef CURVEDCONTRASTS_VISUALIZE
#define CURVEDCONTRASTS_VISUALIZE       0 // 0 = disabled, 1 = enabled
#endif

// Greys
uniform float black_in_grey;
uniform float white_in_grey;
uniform float pos0_shoulder_grey;
uniform float pos1_shoulder_grey;
uniform float pos0_toe_grey;
uniform float pos1_toe_grey;
uniform float black_out_grey;
uniform float white_out_grey;
#if( CURVEDCONTRASTS_ENABLE_RGB )
// Reds
uniform float black_in_red;
uniform float white_in_red;
uniform float pos0_shoulder_red;
uniform float pos1_shoulder_red;
uniform float pos0_toe_red;
uniform float pos1_toe_red;
uniform float black_out_red;
uniform float white_out_red;

// Greens
uniform float black_in_green;
uniform float white_in_green;
uniform float pos0_shoulder_green;
uniform float pos1_shoulder_green;
uniform float pos0_toe_green;
uniform float pos1_toe_green;
uniform float black_out_green;
uniform float white_out_green;

// Blues
uniform float black_in_blue;
uniform float white_in_blue;
uniform float pos0_shoulder_blue;
uniform float pos1_shoulder_blue;
uniform float pos0_toe_blue;
uniform float pos1_toe_blue;
uniform float black_out_blue;
uniform float white_out_blue;
#endif

struct TonemapParams
{
    float3 mToe;
    float2 mMid;
    float3 mShoulder;
    float2 mBx;
};

float3 Tonemap(const TonemapParams tc, float3 x)
{
    float3 toe = - tc.mToe.x / (x + tc.mToe.y) + tc.mToe.z;
    float3 mid = tc.mMid.x * x + tc.mMid.y;
    float3 shoulder = - tc.mShoulder.x / (x + tc.mShoulder.y) + tc.mShoulder.z;
    float3 result = ( x >= tc.mBx.x ) ? mid : toe;
    result = ( x >= tc.mBx.y ) ? shoulder : result;
    return result;
}

float blackwhiteIN( float c, float b, float w )
{
    return saturate( c - b )/max( w - b, 0.000001f );
}

float blackwhiteOUT( float c, float b, float w )
{
    return c * saturate( w - b ) + b;
}

float3 blackwhiteIN( float3 c, float b, float w )
{
    return saturate( c.xyz - b )/max( w - b, 0.000001f );
}

float3 blackwhiteOUT( float3 c, float b, float w )
{
    return c.xyz * saturate( w - b ) + b;
}

float4 setBoundaries( float tx, float ty, float sx, float sy )
{
    if( tx > sx )
        tx = sx;
    if( ty > sy )
        ty = sy;
    return float4( tx, ty, sx, sy );
}

void PrepareTonemapParams(float2 p1, float2 p2, float2 p3, out TonemapParams tc)
{
    float denom = p2.x - p1.x;
    denom = abs(denom) > 1e-5 ? denom : 1e-5;
    float slope = (p2.y - p1.y) / denom;
    {
        tc.mMid.x = slope;
        tc.mMid.y = p1.y - slope * p1.x;
    }
    {
        float denom = p1.y - slope * p1.x;
        denom = abs(denom) > 1e-5 ? denom : 1e-5;
        tc.mToe.x = slope * p1.x * p1.x * p1.y * p1.y / (denom * denom);
        tc.mToe.y = slope * p1.x * p1.x / denom;
        tc.mToe.z = p1.y * p1.y / denom;
    }
    {
        float denom = slope * (p2.x - p3.x) - p2.y + p3.y;
        denom = abs(denom) > 1e-5 ? denom : 1e-5;
        tc.mShoulder.x = slope * pow(p2.x - p3.x, 2.0) * pow(p2.y - p3.y, 2.0) / (denom * denom);
        tc.mShoulder.y = (slope * p2.x * (p3.x - p2.x) + p3.x * (p2.y - p3.y) ) / denom;
        tc.mShoulder.z = (-p2.y * p2.y + p3.y * (slope * (p2.x - p3.x) + p2.y) ) / denom;
    }
    tc.mBx = float2(p1.x, p2.x);
}

float3 curved_levels_pass(float3 color : COLOR0, float2 texcoord : TEXCOORD, float4 dnoise : COLOR1) : SV_Target
{        
    float2 coords  = float2(( texcoord.x - 0.75f ) * 4.0f, ( 1.0f - texcoord.y ) * 4.0f ); // For vizualization
    float3 _color          = saturate( color + dnoise.yzx );

    #if( CURVEDCONTRASTS_VISUALIZE == 1 )
    int def_bi        = 0;
    int def_wi        = 255;
    float def_toe0    = 0.25f;
    float def_toe1    = 0.25f;
    float def_sho0    = 0.75f;
    float def_sho1    = 0.75f;
    int def_bo        = 0;
    int def_wo        = 255;
    float3 showcurve  = 0.0f;
    #endif

    TonemapParams tc;

    // Grey apply black/white points and curves
    float bigr        = saturate( black_in_grey/255.0f + dnoise.w );
    float wigr        = saturate( white_in_grey/255.0f + dnoise.w );
    float bogr        = saturate( black_out_grey/255.0f + dnoise.w );
    float wogr        = saturate( white_out_grey/255.0f + dnoise.w );

    float4 grey       = setBoundaries( pos0_toe_grey, pos1_toe_grey, pos0_shoulder_grey, pos1_shoulder_grey );
    PrepareTonemapParams( grey.xy, grey.zw, float2( 1.0f, 1.0f ), tc );
    _color         = blackwhiteIN( _color, bigr, wigr );
    _color         = Tonemap( tc, _color );
    _color         = blackwhiteOUT( _color, bogr, wogr );
    // Visual
#if( CURVEDCONTRASTS_VISUALIZE )
        // Draw a bunch of lines
        float4 bandwidth      = float4( 0.002f, 0.002f, 0.0002f, 0.0002f );
        bandwidth.y           *= ( BUFFER_WIDTH * BUFFER_RCP_HEIGHT );
        bandwidth.w           *= ( BUFFER_WIDTH * BUFFER_RCP_HEIGHT );
        if( texcoord.x > 0.75 - bandwidth.x && texcoord.x < 0.75 && 1.0f - texcoord.y < 0.25 )
            _color         = float3( 0.7f, 0.7f, 0.7f );
        if( 1.0f - texcoord.y > 0.25 && 1.0f - texcoord.y < 0.25 + bandwidth.y && texcoord.x > 0.75 - bandwidth.x )
            _color         = float3( 0.7f, 0.7f, 0.7f );
        if( texcoord.x > 0.875 - bandwidth.z && texcoord.x < 0.875 + bandwidth.z && 1.0f - texcoord.y < 0.25 )
            _color         = float3( 1.4f, 1.4f, 1.4f );
        if( 1.0f - texcoord.y > 0.125f - bandwidth.w && 1.0f - texcoord.y < 0.125 + bandwidth.w && texcoord.x > 0.75 )
            _color         = float3( 1.4f, 1.4f, 1.4f );
        if( texcoord.x > 0.75 && texcoord.y > 0.75 )
        {
            _color         *= 0.5f;
            _color         = lerp( float3( 0.7f, 0.7f, 0.7f ), _color, smoothstep( 0.0f, 10.0f * BUFFER_RCP_HEIGHT, abs( coords.y - coords.x )));
            showcurve.xyz     = blackwhiteIN( coords.xxx, black_in_grey/255.0f, white_in_grey/255.0f );
            showcurve.xyz     = Tonemap( tc, showcurve.xyz );
            showcurve.xyz     = blackwhiteOUT( showcurve.xyz, black_out_grey/255.0f, white_out_grey/255.0f );
            _color         = lerp( float3( 1.0f, 1.0f, 1.0f ), _color, smoothstep( 0.0f, 20.0f * BUFFER_RCP_HEIGHT, abs( coords.y - showcurve.x )));
        }     
#endif
#if( CURVEDCONTRASTS_ENABLE_RGB )
    // Red
    float bir         = saturate( black_in_red/255.0f + dnoise.x );
    float wir         = saturate( white_in_red/255.0f + dnoise.x );
    float bor         = saturate( black_out_red/255.0f + dnoise.x );
    float wor         = saturate( white_out_red/255.0f + dnoise.x );

    float4 red        = setBoundaries( pos0_toe_red, pos1_toe_red, pos0_shoulder_red, pos1_shoulder_red );
    PrepareTonemapParams( red.xy, red.zw, float2( 1.0f, 1.0f ), tc );
    _color.x           = blackwhiteIN( _color.x, bir, wir );
    _color.x           = Tonemap( tc, _color.xxx ).x;
    _color.x           = blackwhiteOUT( _color.x, bor, wor );
#if( CURVEDCONTRASTS_VISUALIZE )
    if( any( float4( def_toe0 - pos0_toe_red, def_toe1 - pos1_toe_red, def_sho0 - pos0_shoulder_red, def_sho1 - pos1_shoulder_red )) ||
        any( int4(   def_bi - black_in_red, def_wi - white_in_red, def_bo - black_out_red, def_wo - white_out_red )))
    {
        if( texcoord.x > 0.75 && texcoord.y > 0.75 )
        {
            showcurve.x       = blackwhiteIN( showcurve.xxx, black_in_red/255.0f, white_in_red/255.0f ).x;
            showcurve.x       = Tonemap( tc, showcurve.xxx ).x;
            showcurve.x       = blackwhiteOUT( showcurve.xxx, black_out_red/255.0f, white_out_red/255.0f ).x;
            _color         = lerp( float3( 1.0f, 0.0f, 0.0f ), _color, smoothstep( 0.0f, 20.0f * BUFFER_RCP_HEIGHT, abs( coords.y - showcurve.x )));
        }
    }
#endif
    // Green
    float big         = saturate( black_in_green/255.0f + dnoise.y );
    float wig         = saturate( white_in_green/255.0f + dnoise.y );
    float bog         = saturate( black_out_green/255.0f + dnoise.y );
    float wog         = saturate( white_out_green/255.0f + dnoise.y );

    float4 green      = setBoundaries( pos0_toe_green, pos1_toe_green, pos0_shoulder_green, pos1_shoulder_green );
    PrepareTonemapParams( green.xy, green.zw, float2( 1.0f, 1.0f ), tc );
    _color.y           = blackwhiteIN( _color.y, big, wig );
    _color.y           = Tonemap( tc, _color.yyy ).y;
    _color.y           = blackwhiteOUT( _color.y, bog, wog );
#if( CURVEDCONTRASTS_VISUALIZE )
    if( any( float4( def_toe0 - pos0_toe_green, def_toe1 - pos1_toe_green, def_sho0 - pos0_shoulder_green, def_sho1 - pos1_shoulder_green )) ||
        any( int4(   def_bi - black_in_green, def_wi - white_in_green, def_bo - black_out_green, def_wo - white_out_green )))
    {
        if( texcoord.x > 0.75 && texcoord.y > 0.75 )
        {
            showcurve.y       = blackwhiteIN( showcurve.yyy, black_in_green/255.0f, white_in_green/255.0f ).y;
            showcurve.y       = Tonemap( tc, showcurve.yyy ).y;
            showcurve.y       = blackwhiteOUT( showcurve.yyy, black_out_green/255.0f, white_out_green/255.0f ).y;
            _color         = lerp( float3( 0.0f, 1.0f, 0.0f ), _color, smoothstep( 0.0f, 20.0f * BUFFER_RCP_HEIGHT, abs( coords.y - showcurve.y )));
        }
    }
#endif
    // Blue
    float bib         = saturate( black_in_blue/255.0f + dnoise.z );
    float wib         = saturate( white_in_blue/255.0f + dnoise.z );
    float bob         = saturate( black_out_blue/255.0f + dnoise.z );
    float wob         = saturate( white_out_blue/255.0f + dnoise.z );

    float4 blue       = setBoundaries( pos0_toe_blue, pos1_toe_blue, pos0_shoulder_blue, pos1_shoulder_blue );
    PrepareTonemapParams( blue.xy, blue.zw, float2( 1.0f, 1.0f ), tc );
    _color.z           = blackwhiteIN( _color.z, bib, wib );
    _color.z           = Tonemap( tc, _color.zzz ).z;
    _color.z           = blackwhiteOUT( _color.z, bob, wob );
#if( CURVEDCONTRASTS_VISUALIZE )
    if( any( float4( def_toe0 - pos0_toe_blue, def_toe1 - pos1_toe_blue, def_sho0 - pos0_shoulder_blue, def_sho1 - pos1_shoulder_blue )) ||
        any( int4(   def_bi - black_in_blue, def_wi - white_in_blue, def_bo - black_out_blue, def_wo - white_out_blue )))
    {
        if( texcoord.x > 0.75 && texcoord.y > 0.75 )
        {
            showcurve.z       = blackwhiteIN( showcurve.zzz, black_in_blue/255.0f, white_in_blue/255.0f ).z;
            showcurve.z       = Tonemap( tc, showcurve.zzz ).z;
            showcurve.z       = blackwhiteOUT( showcurve.zzz, black_out_blue/255.0f, white_out_blue/255.0f ).z;
            _color         = lerp( float3( 0.0f, 0.0f, 1.0f ), _color, smoothstep( 0.0f, 20.0f * BUFFER_RCP_HEIGHT, abs( coords.y - showcurve.z )));
        }
    }
#endif
#endif
    return _color;
}

"

class CurvedLevels is Node
{
	init() 
	{
		super.init(CurvedLevels.name)

        var glsl = ShaderTools.hlsl2glsl("pixel", CODE, "curved_levels_pass")
		this.node_func = NodeFunction(this, glsl, "glsl", "curved_levels_pass", [
            [ "black_in_grey", 0.0, { "min" : 0.0, "max" : 255.0 } ],
            [ "white_in_grey", 255.0, { "min" : 0.0, "max" : 255.0 } ],
            [ "pos0_shoulder_grey", 0.75, { "min" : 0.0, "max" : 1.0 } ],
            [ "pos1_shoulder_grey", 0.75, { "min" : 0.0, "max" : 1.0 } ],
            [ "pos0_toe_grey", 0.25, { "min" : 0.0, "max" : 1.0 } ],
            [ "pos1_toe_grey", 0.25, { "min" : 0.0, "max" : 1.0 } ],
            [ "black_out_grey", 0.0, { "min" : 0.0, "max" : 255.0 } ],
            [ "white_out_grey", 255.0, { "min" : 0.0, "max" : 255.0 } ],
        ])
	}
}