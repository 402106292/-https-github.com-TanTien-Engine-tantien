import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
  vibrance
  by Christian Cann Schuldt Jensen ~ CeeJay.dk
 
  vibrance intelligently boosts the saturation of pixels so pixels that had little color get a larger boost than pixels that had a lot.
  This avoids oversaturation of pixels that were already very saturated.

  History:

  Version 1.0 by Ceejay.dk
  - Original 
  Version 1.1 by CeeJay.dk
  - Introduced RBG balance to help colorblind users
  Version 1.1.1
  - Minor UI improvements for Reshade 3.x
 */

uniform float vibrance;
uniform float3 vibrance_rgb_balance;

float3 vibrance_pass(float3 color : COLOR, float2 texcoord : TexCoord) : SV_Target
{  
  float3 coefLuma = float3(0.212656, 0.715158, 0.072186);
  
  /*
  if (Vibrance_Luma)
    coefLuma = float3(0.333333, 0.333334, 0.333333);
  */
  
  float luma = dot(coefLuma, color);


  float max_color = max(color.r, max(color.g, color.b)); // Find the strongest color
  float min_color = min(color.r, min(color.g, color.b)); // Find the weakest color

  float color_saturation = max_color - min_color; // The difference between the two is the saturation

  // Extrapolate between luma and original by 1 + (1-saturation) - current
  float3 coeffVibrance = float3(vibrance_rgb_balance * vibrance);
  color = lerp(luma, color, 1.0 + (coeffVibrance * (1.0 - (sign(coeffVibrance) * color_saturation))));

  return color;
}
"

class Vibrance is Node
{
	init() 
	{
		super.init(Vibrance.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "hlsl", "vibrance_pass", [
            [ "vibrance", 0.15, { "min" : -1.0, "max" : 1.0 } ],
            [ "vibrance_rgb_balance", Vector3(1.0, 1.0, 1.0), { "min" : 0.0, "max" : 10.0 } ],
        ])
	}
}