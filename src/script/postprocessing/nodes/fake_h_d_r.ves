import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector2, Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * HDR
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 *
 * Not actual HDR - It just tries to mimic an HDR look (relatively high performance cost)
 */

#include \"assets/shaders/reshade_adapter.hlsl\"

SamplerState g_sampler;
Texture2D g_texture;

uniform float hdr_power;
uniform float radius1;
uniform float radius2;

float3 hdr_pass(float2 texcoord : TexCoord) : SV_Target
{
    float3 color = g_texture.Sample(g_sampler, texcoord).rgb;

    float3 bloom_sum1 = g_texture.Sample(g_sampler, texcoord + float2(1.5, -1.5) * radius1 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum1 += g_texture.Sample(g_sampler, texcoord + float2(-1.5, -1.5) * radius1 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum1 += g_texture.Sample(g_sampler, texcoord + float2( 1.5,  1.5) * radius1 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum1 += g_texture.Sample(g_sampler, texcoord + float2(-1.5,  1.5) * radius1 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum1 += g_texture.Sample(g_sampler, texcoord + float2( 0.0, -2.5) * radius1 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum1 += g_texture.Sample(g_sampler, texcoord + float2( 0.0,  2.5) * radius1 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum1 += g_texture.Sample(g_sampler, texcoord + float2(-2.5,  0.0) * radius1 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum1 += g_texture.Sample(g_sampler, texcoord + float2( 2.5,  0.0) * radius1 * BUFFER_PIXEL_SIZE).rgb;

    bloom_sum1 *= 0.005;

    float3 bloom_sum2 = g_texture.Sample(g_sampler, texcoord + float2(1.5, -1.5) * radius2 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum2 += g_texture.Sample(g_sampler, texcoord + float2(-1.5, -1.5) * radius2 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum2 += g_texture.Sample(g_sampler, texcoord + float2( 1.5,  1.5) * radius2 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum2 += g_texture.Sample(g_sampler, texcoord + float2(-1.5,  1.5) * radius2 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum2 += g_texture.Sample(g_sampler, texcoord + float2( 0.0, -2.5) * radius2 * BUFFER_PIXEL_SIZE).rgb;  
    bloom_sum2 += g_texture.Sample(g_sampler, texcoord + float2( 0.0,  2.5) * radius2 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum2 += g_texture.Sample(g_sampler, texcoord + float2(-2.5,  0.0) * radius2 * BUFFER_PIXEL_SIZE).rgb;
    bloom_sum2 += g_texture.Sample(g_sampler, texcoord + float2( 2.5,  0.0) * radius2 * BUFFER_PIXEL_SIZE).rgb;

    bloom_sum2 *= 0.010;

    float dist = radius2 - radius1;
    float3 HDR = (color + (bloom_sum2 - bloom_sum1)) * dist;
    float3 blend = HDR + color;
    color = pow(abs(blend), abs(hdr_power)) + HDR; // pow - don't use fractions for HDRpower
    
    return saturate(color);
}
"

class FakeHDR is Node
{
	init() 
	{
		super.init(FakeHDR.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "hlsl", "hdr_pass", [
            [ "hdr_power", 1.3, { "min" : 0.0, "max" : 8.0 } ],
            [ "radius1", 0.793, { "min" : 0.0, "max" : 8.0 } ],
            [ "radius2", 0.87, { "min" : 0.0, "max" : 8.0 } ],
        ])
	}
}