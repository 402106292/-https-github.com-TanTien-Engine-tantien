import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction

var CODE = "
// from https://github.com/crosire/reshade-shaders
/**
 * Curves
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 *
 * Curves, uses S-curves to increase contrast, without clipping highlights and shadows.
 */

uniform __UBO__
{
    int mode;
    int formula;
    
    float contrast;
};

vec3 curves_pass(vec3 color)
{
    vec3 ret = color;
    vec3 lumCoeff = vec3(0.2126, 0.7152, 0.0722);  //Values to calculate luma with
    float Contrast_blend = contrast; 
    const float PI = 3.1415927;

    /*-----------------------------------------------------------.
    /               Separation of Luma and Chroma                 /
    '-----------------------------------------------------------*/

    // -- Calculate Luma and Chroma if needed --
    //calculate luma (grey)
    float luma = dot(lumCoeff, ret);
    //calculate chroma
    vec3 chroma = ret - luma;

    // -- Which value to put through the contrast formula? --
    // I name it x because makes it easier to copy-paste to Graphtoy or Wolfram Alpha or another graphing program
    vec3 x;
    if (mode == 0)
        x = vec3(luma); //if the curve should be applied to Luma
    else if (mode == 1)
        x = vec3(chroma), //if the curve should be applied to Chroma
        x = x * 0.5 + 0.5; //adjust range of Chroma from -1 -> 1 to 0 -> 1
    else
        x = ret; //if the curve should be applied to both Luma and Chroma

    /*-----------------------------------------------------------.
    /                     contrast formulas                       /
    '-----------------------------------------------------------*/

    // -- Curve 1 --
    if (formula == 0)
    {
        x = sin(PI * 0.5 * x); // Sin - 721 amd fps, +vign 536 nv
        x *= x;

        //x = 0.5 - 0.5*cos(PI*x);
        //x = 0.5 * -sin(PI * -x + (PI*0.5)) + 0.5;
    }

    // -- Curve 2 --
    if (formula == 1)
    {
        x = x - 0.5;
        x = (x / (0.5 + abs(x))) + 0.5;

        //x = ( (x - 0.5) / (0.5 + abs(x-0.5)) ) + 0.5;
    }

    // -- Curve 3 --
    if (formula == 2)
    {
        //x = smoothstep(0.0,1.0,x); //smoothstep
        x = x*x*(3.0 - 2.0*x); //faster smoothstep alternative - 776 amd fps, +vign 536 nv
        //x = x - 2.0 * (x - 1.0) * x* (x- 0.5);  //2.0 is contrast. Range is 0.0 to 2.0
    }

    // -- Curve 4 --
    if (formula == 3)
    {
        x = (1.0524 * exp(6.0 * x) - 1.05248) / (exp(6.0 * x) + 20.0855); //exp formula
    }

    // -- Curve 5 --
    if (formula == 4)
    {
        //x = 0.5 * (x + 3.0 * x * x - 2.0 * x * x * x); //a simplified catmull-rom (0,0,1,1) - btw smoothstep can also be expressed as a simplified catmull-rom using (1,0,1,0)
        //x = (0.5 * x) + (1.5 -x) * x*x; //estrin form - faster version
        x = x * (x * (1.5 - x) + 0.5); //horner form - fastest version

        Contrast_blend = contrast * 2.0; //I multiply by two to give it a strength closer to the other curves.
    }

    // -- Curve 6 --
    if (formula == 5)
    {
        x = x*x*x*(x*(x*6.0 - 15.0) + 10.0); //Perlins smootherstep
    }

    // -- Curve 7 --
    if (formula == 6)
    {
        //x = ((x-0.5) / ((0.5/(4.0/3.0)) + abs((x-0.5)*1.25))) + 0.5;
        x = x - 0.5;
        x = x / ((abs(x)*1.25) + 0.375) + 0.5;
        //x = ( (x-0.5) / ((abs(x-0.5)*1.25) + (0.5/(4.0/3.0))) ) + 0.5;
    }

    // -- Curve 8 --
    if (formula == 7)
    {
        x = (x * (x * (x * (x * (x * (x * (1.6 * x - 7.2) + 10.8) - 4.2) - 3.6) + 2.7) - 1.8) + 2.7) * x * x; //Techicolor Cinestyle - almost identical to curve 1
    }

    // -- Curve 9 --
    if (formula == 8)
    {
        x = -0.5 * (x*2.0 - 1.0) * (abs(x*2.0 - 1.0) - 2.0) + 0.5; //parabola
    }

    // -- Curve 10 --
    if (formula == 9)
    {
        vec3 xstep = step(x, vec3(0.5)); //tenary might be faster here
        vec3 xstep_shift = (xstep - 0.5);
        vec3 shifted_x = x + xstep_shift;

        x = abs(xstep - sqrt(-shifted_x * shifted_x + shifted_x)) - xstep_shift;

        //x = abs(step(x,0.5)-sqrt(-(x+step(x,0.5)-0.5)*(x+step(x,0.5)-0.5)+(x+step(x,0.5)-0.5)))-(step(x,0.5)-0.5); //single line version of the above

        //x = 0.5 + (sign(x-0.5)) * sqrt(0.25-(x-trunc(x*2))*(x-trunc(x*2))); //worse

        /* // if/else - even worse
        if (x-0.5)
        x = 0.5-sqrt(0.25-x*x);
        else
        x = 0.5+sqrt(0.25-(x-1)*(x-1));
        */

        //x = (abs(step(0.5,x)-clamp( 1-sqrt(1-abs(step(0.5,x)- frac(x*2\%1)) * abs(step(0.5,x)- frac(x*2\%1))),0 ,1))+ step(0.5,x) )*0.5; //worst so far

        //TODO: Check if I could use an abs split instead of step. It might be more efficient

        Contrast_blend = contrast * 0.5; //I divide by two to give it a strength closer to the other curves.
    }
  
    // -- Curve 11 --
    if (formula == 10)
    {
        vec3 a = vec3(0.0, 0.0, 0.0);
        vec3 b = vec3(0.0, 0.0, 0.0);

        a = x * x * 2.0;
        b = (2.0 * -x + 4.0) * x - 1.0;
        x = (x.x < 0.5 && x.y < 0.5 && x.z < 0.5) ? a : b;
    }

    /*-----------------------------------------------------------.
    /                 Joining of Luma and Chroma                  /
    '-----------------------------------------------------------*/

    if (mode == 0) // Only Luma
    {
        x = mix(vec3(luma), x, Contrast_blend); //Blend by contrast
        ret = x + chroma; //Luma + Chroma
    }
    else if (mode == 1) // Only Chroma
    {
        x = x * 2.0 - 1.0; //adjust the Chroma range back to -1 -> 1
        vec3 color = vec3(luma) + x; //Luma + Chroma
        ret = mix(ret, color, Contrast_blend); //Blend by contrast
    }
    else // Both Luma and Chroma
    {
        vec3 color = x;  //if the curve should be applied to both Luma and Chroma
        ret = mix(ret, color, Contrast_blend); //Blend by contrast
    }

    return ret;
}
"

class Curves is Node
{
	init() 
	{
		super.init(Curves.name)

		this.node_func = NodeFunction(this, CODE, "curves_pass", [
            [ "mode", 0, { "integer" : true, "min" : 0, "max" : 2 } ],  // 0: Luma, 1: Chroma, 2: Both Luma and Chroma
            [ "formula", 4, { "integer" : true, "min" : 0, "max" : 10 } ],  // 0: Sine, 1: Abs split, 2: Smoothstep, 3: Exp formula, 4: Simplified Catmull-Rom (0,0,1,1), 5: Perlins Smootherstep, 6: Abs add, 7: Techicolor Cinestyle, 8: Parabola, 9: Half-circles, 10: Polynomial split
            [ "contrast", 0.65, { "min" : -1.0, "max" : 1.0 } ],
        ])
	}
}