import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector3

var CODE = "
// from https://github.com/CeeJayDK/SweetFX
/**
 * Levels version 1.2
 * by Christian Cann Schuldt Jensen ~ CeeJay.dk
 *
 * Allows you to set a new black and a white level.
 * This increases contrast, but clips any colors outside the new range to either black or white
 * and so some details in the shadows or highlights can be lost.
 *
 * The shader is very useful for expanding the 16-235 TV range to 0-255 PC range.
 * You might need it if you're playing a game meant to display on a TV with an emulator that does not do this.
 * But it's also a quick and easy way to uniformly increase the contrast of an image.
 *
 * -- Version 1.0 --
 * First release
 * -- Version 1.1 --
 * Optimized to only use 1 instruction (down from 2 - a 100\% performance increase :) )
 * -- Version 1.2 --
 * Added the ability to highlight clipping regions of the image with #define highlight_clipping 1
 */

uniform int black_point;
uniform int white_point;
uniform bool highlight_clipping;

float3 levels_pass(float3 color : COLOR) : SV_Target
{
    float black_point_float = black_point / 255.0;
    float white_point_float = white_point == black_point ? (255.0 / 0.00025) : (255.0 / (white_point - black_point)); // Avoid division by zero if the white and black point are the same

    color = color * white_point_float - (black_point_float *  white_point_float);

    if (highlight_clipping)
    {
        float3 clipped_colors;

        clipped_colors = any(color > saturate(color)) // any colors whiter than white?
            ? float3(1.0, 0.0, 0.0)
            : color;
        clipped_colors = all(color > saturate(color)) // all colors whiter than white?
            ? float3(1.0, 1.0, 0.0)
            : clipped_colors;
        clipped_colors = any(color < saturate(color)) // any colors blacker than black?
            ? float3(0.0, 0.0, 1.0)
            : clipped_colors;
        clipped_colors = all(color < saturate(color)) // all colors blacker than black?
            ? float3(0.0, 1.0, 1.0)
            : clipped_colors;

        color = clipped_colors;
    }

    return color;
}
"

class Levels is Node
{
	init() 
	{
		super.init(Levels.name)

		this.node_func = NodeFunction(this, "pixel", CODE, "hlsl", "levels_pass", [
            [ "black_point", 16,  { "integer" : true, "min" : 0, "max" : 255 } ],
            [ "white_point", 235, { "integer" : true, "min" : 0, "max" : 255 } ],
            [ "highlight_clipping", false ]
        ])
	}
}