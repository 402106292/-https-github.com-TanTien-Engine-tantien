import "editor.editor" for Editor
import "gui" for GUI
import "render" for Render
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.for" for For

import "rendergraph.clear" for Clear
import "rendergraph.draw" for Draw
import "rendergraph.shader" for Shader
import "rendergraph.vertex_array" for VertexArray
import "rendergraph.pass" for Pass
import "rendergraph.cubemap" for Cubemap
import "rendergraph.primitive_shape" for PrimitiveShape
import "rendergraph.texture" for Texture
import "rendergraph.camera3d" for Camera3D
import "rendergraph.render_target" for RenderTarget

class Rendergraph is Editor
{
	load()
	{
		super.load()

		this.drawlists = []

		for (var node in [ Clear, Draw, Shader, VertexArray, Pass, Cubemap, PrimitiveShape, Texture, Camera3D, RenderTarget ]) {
			super.add_popup_node(node)
		}
	}

	rebuildDrawlist()
	{
		this.drawlists.clear()

		for (var node in this.scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node is Pass) {
				bp_node.rebuild_drawlist()
				this.drawlists.add(bp_node)
			} else if (bp_node is Draw and bp_node.exports[0].conns.isEmpty) {
				var nodes = []
				Blueprint.getPrecursorNodes(bp_node, nodes)

				var drawlist = Blueprint.topoSort(nodes)
				this.drawlists.add(drawlist)
			} else if (bp_node is For) {
				bp_node.rebuildExecList()
			}
		}
	}

	drawPreview()
	{
		if (this.scene.bp_dirty)
		{
			this.rebuildDrawlist()
			this.scene.bp_dirty = false
		}

		Render.clear(["color"], { "color" : [128,128,128,128] })

		for (var drawlist in this.drawlists) 
		{
			if (drawlist is List) 
			{
				for (var node in drawlist) {
					if (node.execute) {
						node.execute()
					}
				}
			} 
			else if (drawlist is Pass) 
			{
				drawlist.execute()
			}
		}
	}

	loadFileImports()
	{
		return "
import \"rendergraph.clear\" for Clear
import \"rendergraph.draw\" for Draw
import \"rendergraph.shader\" for Shader
import \"rendergraph.vertex_array\" for VertexArray
import \"rendergraph.pass\" for Pass
import \"rendergraph.cubemap\" for Cubemap
import \"rendergraph.primitive_shape\" for PrimitiveShape
import \"rendergraph.texture\" for Texture
import \"rendergraph.camera3d\" for Camera3D
import \"rendergraph.render_target\" for RenderTarget
"
	}
}