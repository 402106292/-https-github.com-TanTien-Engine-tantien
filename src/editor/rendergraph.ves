import "editor.editor" for Editor
import "gui" for GUI
import "render" for Render
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.for" for For

import "rendergraph.nodes.clear" for Clear
import "rendergraph.nodes.draw" for Draw
import "rendergraph.nodes.shader" for Shader
import "rendergraph.nodes.vertex_array" for VertexArray
import "rendergraph.nodes.pass" for Pass
import "rendergraph.nodes.cubemap" for Cubemap
import "rendergraph.nodes.primitive_shape" for PrimitiveShape
import "rendergraph.nodes.texture" for Texture
import "rendergraph.nodes.render_target" for RenderTarget
import "rendergraph.nodes.render_buffer" for RenderBuffer
import "rendergraph.nodes.model" for Model

class Rendergraph is Editor
{
	load()
	{
		super.load()

		this.drawlists = []

		for (var node in [ Clear, Draw, Shader, VertexArray, Pass, Cubemap, PrimitiveShape, Texture, RenderTarget, RenderBuffer, Model ]) {
			super.add_popup_node(node)
		}
	}

	build_exec_list(nodes)
	{
		var exec_list = []
		for (var node in nodes) 
		{
			if (node is Pass) {
				node.rebuild_drawlist()
				exec_list.add([ node ])
			} else if (node is Draw and node.exports[0].conns.isEmpty) {
				var prev_nodes = Blueprint.get_precursor_nodes(node)
				var drawlist = Blueprint.topo_sort(prev_nodes)
				exec_list.add(drawlist)
			} else if (node is For) {
				node.rebuild_exec_list()
			}
		}
		return exec_list
	}

	rebuild_drawlist()
	{
		var nodes = []
		for (var node in this.scene.nodes) {
			nodes.add(node.components["bp"])
		}
		this.drawlists = this.build_exec_list(nodes)
	}

	draw_preview()
	{
		if (this.scene.bp_dirty)
		{
			this.rebuild_drawlist()
			this.scene.bp_dirty = false
		}

		Render.clear(["color"], { "color" : [128,128,128,128] })

		for (var drawlist in this.drawlists) {
			for (var node in drawlist) {
				if (node.execute) {
					node.execute()
				}
			}
		}
	}

	load_file_imports()
	{
		var ret = super.load_file_imports()
		ret = ret + "
import \"rendergraph.nodes.clear\" for Clear
import \"rendergraph.nodes.draw\" for Draw
import \"rendergraph.nodes.shader\" for Shader
import \"rendergraph.nodes.vertex_array\" for VertexArray
import \"rendergraph.nodes.pass\" for Pass
import \"rendergraph.nodes.cubemap\" for Cubemap
import \"rendergraph.nodes.primitive_shape\" for PrimitiveShape
import \"rendergraph.nodes.texture\" for Texture
import \"rendergraph.nodes.render_target\" for RenderTarget
import \"rendergraph.nodes.render_buffer\" for RenderBuffer
import \"rendergraph.nodes.model\" for Model
"
		return ret
	}
}