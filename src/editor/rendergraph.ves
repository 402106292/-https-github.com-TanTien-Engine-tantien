import "editor.editor" for Editor
import "gui" for GUI
import "render" for Render
import "blueprint.nodes.for" for For
import "rendergraph.drawlist" for Drawlist

import "rendergraph.nodes.clear" for Clear
import "rendergraph.nodes.draw" for Draw
import "rendergraph.nodes.shader" for Shader
import "rendergraph.nodes.vertex_array" for VertexArray
import "rendergraph.nodes.pass" for Pass
import "rendergraph.nodes.cubemap" for Cubemap
import "rendergraph.nodes.primitive_shape" for PrimitiveShape
import "rendergraph.nodes.texture" for Texture
import "rendergraph.nodes.render_target" for RenderTarget
import "rendergraph.nodes.render_buffer" for RenderBuffer
import "rendergraph.nodes.model" for Model
import "rendergraph.nodes.compute" for Compute

class Rendergraph is Editor
{
	load()
	{
		super.load()

		this.drawlist = nil

		for (var node in [ Clear, Draw, Shader, VertexArray, Pass, Cubemap, PrimitiveShape, Texture, RenderTarget, RenderBuffer, Model, Compute ]) {
			super.add_popup_node(node)
		}
	}

	build_exec_list(nodes)
	{
		var drawlist = Drawlist(nodes)
		return drawlist.lists
	}

	rebuild_drawlist()
	{
		var scene = this.scene_stack.root()

		var nodes = []
		for (var node in scene.nodes) {
			nodes.add(node.components["bp"])
		}
		this.drawlist = Drawlist(nodes)
	}

	draw_preview()
	{
		if (!this.drawlist or this.scene_stack.bp_dirty) {
			this.rebuild_drawlist()
			this.scene_stack.bp_dirty = false
		}

		Render.clear(["color"], { "color" : [128,128,128,128] })

		this.drawlist.draw()
	}

	load_file_imports()
	{
		var ret = super.load_file_imports()
		ret = ret + "
import \"rendergraph.nodes.clear\" for Clear
import \"rendergraph.nodes.draw\" for Draw
import \"rendergraph.nodes.shader\" for Shader
import \"rendergraph.nodes.vertex_array\" for VertexArray
import \"rendergraph.nodes.pass\" for Pass
import \"rendergraph.nodes.cubemap\" for Cubemap
import \"rendergraph.nodes.primitive_shape\" for PrimitiveShape
import \"rendergraph.nodes.texture\" for Texture
import \"rendergraph.nodes.render_target\" for RenderTarget
import \"rendergraph.nodes.render_buffer\" for RenderBuffer
import \"rendergraph.nodes.model\" for Model
import \"rendergraph.nodes.compute\" for Compute
"
		return ret
	}
}