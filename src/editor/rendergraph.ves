import "editor.editor" for Editor
import "gui" for GUI
import "render" for Render
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.for" for For

import "rendergraph.clear" for Clear
import "rendergraph.draw" for Draw
import "rendergraph.shader" for Shader
import "rendergraph.vertex_array" for VertexArray
import "rendergraph.pass" for Pass
import "rendergraph.cubemap" for Cubemap
import "rendergraph.primitive_shape" for PrimitiveShape
import "rendergraph.texture" for Texture
import "rendergraph.camera3d" for Camera3D

class Test is Editor
{
	load()
	{
		super.load()

		this.drawlists = []
	}

	isEndNode(node)
	{
		if (!node) {
			return false
		}

		if (node is Pass) {
			return true
		} else if (node is Draw and node.exports[0].conns.isEmpty) {
			return true
		}
	}

	rebuildDrawlist()
	{
		this.drawlists.clear()

		for (var node in this.scene.nodes) 
		{
			var bp_node = node.components["bp"]			
			if (this.isEndNode(bp_node))
			{
				var nodes = []
				Blueprint.getPrecursorNodes(bp_node, nodes)

				var drawlist = Blueprint.topoSort(nodes)
				this.drawlists.add(drawlist)				
			}
			if (bp_node is For) {
				bp_node.rebuildExecList()
			}
		}
	}

	drawPreview()
	{
		if (this.scene.bp_dirty)
		{
			this.rebuildDrawlist()
			this.scene.bp_dirty = false
		}

		Render.clear(["color"], { "color" : [128,128,128,128] })

		for (var drawlist in this.drawlists) {
			for (var node in drawlist) {
				if (node.execute) {
					node.execute()
				}
			}
		}
	}

	drawPopup(x, y)
	{
		var new_node = nil

		var WIDTH = 120
		var HEIGHT = 25

		var NUM = super.getPopupNum() + 9
		GUI.frame(this.gui_top, x, y - HEIGHT * (NUM - 1), WIDTH, HEIGHT * NUM)

		new_node = super.drawPopup(x, y, WIDTH, HEIGHT)
		y = y - HEIGHT * super.getPopupNum()

		if (GUI.selectable(this.gui_top, "Clear", false, x, y, WIDTH)) {
			new_node = Clear()
		}
		y = y - HEIGHT
		if (GUI.selectable(this.gui_top, "Draw", false, x, y, WIDTH)) {
			new_node = Draw()
		}
		y = y - HEIGHT
		if (GUI.selectable(this.gui_top, "Shader", false, x, y, WIDTH)) {
			new_node = Shader()
		}
		y = y - HEIGHT
		if (GUI.selectable(this.gui_top, "VertexArray", false, x, y, WIDTH)) 
		{
			var va = VertexArray()
			va.data = [
			    //  X    Y    Z          R    G    B
			       0.8, 0.8, 0.0,       1.0, 0.0, 0.0, // vertex 0
			      -0.8, 0.8, 0.0,       0.0, 1.0, 0.0, // vertex 1
			       0.8,-0.8, 0.0,       0.0, 0.0, 1.0, // vertex 2
			       0.8,-0.8, 0.0,       0.0, 0.0, 1.0, // vertex 3
			      -0.8, 0.8, 0.0,       0.0, 1.0, 0.0, // vertex 4
			      -0.8,-0.8, 0.0,       1.0, 0.0, 0.0, // vertex 5
			]
			va.attrs = [3, 3]
			new_node = va
		}
		y = y - HEIGHT
		if (GUI.selectable(this.gui_top, "Pass", false, x, y, WIDTH)) {
			new_node = Pass()
		}
		y = y - HEIGHT
		if (GUI.selectable(this.gui_top, "Texture", false, x, y, w)) {
			new_node = Texture()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Cubemap", false, x, y, WIDTH)) {
			new_node = Cubemap()
		}
		y = y - HEIGHT
		if (GUI.selectable(this.gui_top, "PrimitiveShape", false, x, y, WIDTH)) {
			new_node = PrimitiveShape()
		}
		y = y - HEIGHT
		if (GUI.selectable(this.gui_top, "Camera3D", false, x, y, w)) {
			new_node = Camera3D()
		}
		y = y - h
		
		return new_node
	}

	loadFileImports()
	{
		return "
import \"rendergraph.clear\" for Clear
import \"rendergraph.draw\" for Draw
import \"rendergraph.shader\" for Shader
import \"rendergraph.vertex_array\" for VertexArray
import \"rendergraph.pass\" for Pass
import \"rendergraph.cubemap\" for Cubemap
import \"rendergraph.primitive_shape\" for PrimitiveShape
import \"rendergraph.texture\" for Texture
import \"rendergraph.camera3d\" for Camera3D
"
	}
}