import "editor.editor" for Editor
import "rendergraph.rendergraph" for Rendergraph
import "rendergraph.drawlist" for Drawlist
import "pbrgraph.nodes.shadergraph" for Shadergraph
import "render" for Render

class Pbrgraph is Editor
{
	load()
	{
		super.load()

		this.prepare_nodes()

		Rendergraph.regist()

		this.drawlist = nil
		this.shadergraph = nil
	}

	prepare_nodes()
	{
		import "editor.bpnodes" for BP_NODES
		for (var node in BP_NODES) {
			super.add_popup_node(node)
		}

		import "editor.rendernodes" for RENDER_NODES
		for (var node in RENDER_NODES) {
			super.add_popup_node(node)
		}

		import "editor.shadernodes" for SHADER_NODES
		for (var node in SHADER_NODES) {
			super.add_popup_node(node)
		}

		import "editor.pbrnodes" for PBR_NODES
		for (var node in PBR_NODES) {
			super.add_popup_node(node)
		}
	}

	build_exec_list(nodes)
	{
		var drawlist = Drawlist(nodes)
		return drawlist.lists
	}

	rebuild_drawlist()
	{
		var scene = this.scene_stack.root()

		var nodes = []
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			nodes.add(bp_node)

			if (bp_node is Shadergraph) {
				this.shadergraph = bp_node
				this.shadergraph.rebuild_shader()
			}
		}
		this.drawlist = Drawlist(nodes)
	}

	draw_preview()
	{
		if (!this.drawlist or this.scene_stack.bp_dirty) {
			this.rebuild_drawlist()
			this.scene_stack.bp_dirty = false
		}

		Render.clear(["color"], { "color" : [128,128,128,128] })

		if (this.shadergraph) {
			this.shadergraph.bind_uniforms()
		}

		this.drawlist.draw()
	}

	load_file_imports()
	{
		return super.load_file_imports() + "
import \"rendergraph.nodes.*\"
import \"shadergraph.nodes.*\"
import \"pbrgraph.nodes.*\"
"
	}
}