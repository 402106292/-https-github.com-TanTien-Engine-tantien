import "editor.editor" for Editor
import "render" for Render, Shader, VertexArray
import "shader" for ShaderGen
import "blueprint.blueprint" for Blueprint
import "blueprint.shader_builder" for ShaderBuilder

var DEFAULT_VS = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aColor;
layout (location = 2) in vec2 aTexCoord;

out vec3 ourColor;
out vec2 TexCoord;

void main() 
{
   ourColor = aColor;
   TexCoord = vec2(aTexCoord.x, aTexCoord.y);
   gl_Position = vec4(aPos, 1.0);
}
"

var DEFAULT_FS = "
#version 330
in vec3 ourColor;

layout (location = 0) out vec4 FragColor;

void main() 
{
   FragColor = vec4(ourColor, 1.0);
}
"

class Shadergraph is Editor
{
	init()
	{
		this.builder = nil
	}

	load()
	{
		super.load()

		this.code = ""

		this.prepare_nodes()

		this.prog = Shader.init(DEFAULT_VS, "", "", "", DEFAULT_FS)

		this.va = VertexArray.init([1, 1, 0, 1, 0, 0, 1, 1, 1, -1, 0, 0, 1, 0, 1, 0, -1, -1, 0, 0, 0, 1, 0, 0, -1, 1, 0, 1, 1, 0, 0, 1 ], [3, 3, 2], [ 0, 1, 3, 1, 2, 3 ])
	}

	prepare_nodes()
	{
		import "editor.bpnodes" for BP_NODES
		for (var node in BP_NODES) {
			super.add_popup_node(node)
		}
			
		import "editor.rendernodes" for RENDER_NODES
		for (var node in RENDER_NODES) {
			super.add_popup_node(node)
		}

		import "editor.shadernodes" for SHADER_NODES
		for (var node in SHADER_NODES) {
			super.add_popup_node(node)
		}
	}

	find_frag_out_node()
	{
		import "shadergraph.nodes.frag_color" for FragColor

		var scene = this.scene_stack.root()
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node is FragColor) {
				return bp_node
			}
		}

		return nil
	}	

	rebuild_shader()
	{
		var node = this.find_frag_out_node()
		if (node) {
			this.builder = ShaderBuilder()
			var gen = this.builder.build(node)
			this.prog = Shader.init(DEFAULT_VS, "", "", "", gen)
		}
	}

	draw_preview()
	{
		if (this.scene_stack.bp_dirty) {
			this.rebuild_shader()
			this.scene_stack.bp_dirty = false
		}

		Render.clear(["color"], { "color" : [128,128,128,128] })

		if (this.builder) {
			this.builder.bind_uniforms(this.prog)		
		}

		Render.draw("triangles", this.prog, this.va, { "depth_test" : false, "cull" : "disable" })
	}

	load_file_imports()
	{
		return super.load_file_imports() + "
import \"rendergraph.nodes.*\"
import \"shadergraph.nodes.*\"
"
	}
}