import "editor.editor" for Editor
import "rendergraph.rendergraph" for Rendergraph
import "rendergraph.drawlist" for Drawlist
import "blueprint.nodes.subgraph" for Subgraph
import "blueprint.blueprint" for Blueprint
import "render" for Render
import "shader" for ShaderGen

class Shadergraph is Editor
{
	load()
	{
		super.load()

		this.prepare_nodes()

		Rendergraph.regist()

		this.drawlist = nil
	}

	prepare_nodes()
	{
		this.clear_popup_nodes()

		import "editor.bpnodes" for BP_NODES
		for (var node in BP_NODES) {
			super.add_popup_node(node)
		}

		import "editor.rendernodes" for RENDER_NODES
		for (var node in RENDER_NODES) {
			super.add_popup_node(node)
		}

		import "editor.shadernodes" for SHADER_NODES
		for (var node in SHADER_NODES) {
			super.add_popup_node(node)
		}
	}

	build_exec_list(nodes)
	{
		var drawlist = Drawlist(nodes)
		return drawlist.lists
	}

	find_terminate_node()
	{
		var term_node = nil

		var scene = this.scene_stack.root()
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (Blueprint.is_out_conns_empty(bp_node)) {
				if (term_node) {
					return nil
				} else {
					term_node = bp_node
				}
			}
		}

		return term_node
	}	

	rebuild_shader()
	{
		var node = this.find_terminate_node()
		if (!node) {
			return
		}

		var gen = ShaderGen.init()

		var module = gen.get_main_module()
		var func = gen.get_main_func()
		var bb = gen.get_func_block(func)
		node.shader_gen(gen, module, func, bb)
	}

	rebuild_drawlist(node)
	{
		if (node is Subgraph) 
		{
			// init subgraph
			node.execute()
			for (var sub_node in node.all_items) {
				this.rebuild_drawlist(sub_node)
			}
		}
	}

	rebuild_drawlist()
	{
		var scene = this.scene_stack.root()

		var nodes = []
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			nodes.add(bp_node)

			this.rebuild_drawlist(bp_node)
		}
		this.drawlist = Drawlist(nodes)
	}

	draw_preview()
	{
		if (!this.drawlist or this.scene_stack.bp_dirty) {
			this.rebuild_shader()
			this.rebuild_drawlist()
			this.scene_stack.bp_dirty = false
		}

		Render.clear(["color"], { "color" : [128,128,128,128] })

		this.drawlist.draw()
	}

	load_file_imports()
	{
		return super.load_file_imports() + "
import \"rendergraph.nodes.*\"
import \"shadergraph.nodes.*\"
"
	}
}