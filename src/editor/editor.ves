import "scene.scene" for Scene
import "graphics.camera2d" for Camera2D
import "gui" for GUI, Context, MOUSE_LEFT, MOUSE_RIGHT, MOUSE_DOWN, MOUSE_UP, MOUSE_MOVE, MOUSE_DRAG
import "blueprint.edit_op" for EditOP as BlueprintEditOP
import "blueprint.node_op" for NodeOP
import "blueprint.blueprint" for Blueprint
import "maths.vector" for Vector2
import "graphics" for Graphics
import "scene.node" for Node as SceneNode
import "scene.components.boundingbox2" for BoundingBox2
import "scene.components.transform2" for Transform2
import "io" for IO
import "filesystem" for Filesystem

import "blueprint.nodes.number" for Number
import "blueprint.nodes.number2" for Number2
import "blueprint.nodes.number3" for Number3
import "blueprint.nodes.combine" for Combine
import "blueprint.nodes.time" for Time
import "blueprint.nodes.sin" for Sin
import "blueprint.nodes.cos" for Cos
import "blueprint.nodes.radians" for Radians
import "blueprint.nodes.add" for Add
import "blueprint.nodes.subtract" for Subtract
import "blueprint.nodes.multiply" for Multiply
import "blueprint.nodes.divide" for Divide
import "blueprint.nodes.texture" for Texture
import "blueprint.nodes.matrix" for Matrix
import "blueprint.nodes.translate" for Translate
import "blueprint.nodes.rotate" for Rotate
import "blueprint.nodes.perspective" for Perspective
import "blueprint.nodes.lookat" for LookAt
import "blueprint.nodes.for" for For
import "blueprint.nodes.array" for Array
import "blueprint.nodes.print" for Print
import "blueprint.nodes.camera3d" for Camera3D

class Editor
{
	load()
	{
		this.scene = Scene()
		this.camera = Camera2D()

		this.nodes_op = BlueprintEditOP(this.camera, this.scene, this.popupCB)
		this.preview_op = NodeOP(this.scene)
		this.editop = this.nodes_op

		this.popup_pos = nil
		this.prev_pin = nil

		this.gui_top = Context.init()
		this.gui_nodes = Context.init()

		this.right_press_pos = nil

//		this.filepath = ""
		this.filepath = "samples/rendergraph/learnopengl/4.advanced_opengl__6.2.cubemaps_environment_mapping.ves"

		this.hide_nodes = false
	}

	update()
	{
		this.scene.update()

		// update aabb
		for (var node in this.scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node.aabb_dirty) {
				node.components["bounding"].set_size(bp_node.get_size())
				bp_node.aabb_dirty = false
			}
		}	

		GUI.update(this.gui_top)
		GUI.update(this.gui_nodes)
	}

	draw()
	{
		this.drawPreview()

		if (!this.hide_nodes) {
			this.drawScene()		
		}

		this.editop.draw()

		Graphics.flush()

		this.drawGUI()

		//Graphics.dtexDebugDraw()
	}

	sizechanged(w, h)
	{
		Graphics.onSize(w, h)
		GUI.onSize(w, h)
		this.camera.on_size(w, h)
	}

	keypressed(key)
	{
		this.editop.on_key_pressed(key)		

		if (key == "delete") 
		{
			this.scene.bp_dirty = true
			GUI.rebuild(this.gui_nodes)
		} 
		else if (key == "space") 
		{
			this.hide_nodes = !this.hide_nodes
			if (this.hide_nodes) {
				this.editop = this.preview_op
			} else {
				this.editop = this.nodes_op			
			}
		}
	}

	keyreleased(key)
	{
		this.editop.on_key_released(key)		
	}

	mousemoved(x, y, btn)
	{
		GUI.mouseInput(this.gui_top, btn, MOUSE_MOVE, x, y, 0, 0, 1)
		GUI.mouseInput(this.gui_nodes, btn, MOUSE_MOVE, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (!this.is_gui_active()) {
			this.editop.on_mouse_moved(x, y, btn)
		}
	}

	mousedragged(x, y, btn)
	{
		GUI.mouseInput(this.gui_top, btn, MOUSE_DRAG, x, y, 0, 0, 1)
		GUI.mouseInput(this.gui_nodes, btn, MOUSE_DRAG, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (!this.is_gui_active()) {
			this.editop.on_mouse_dragged(x, y, btn)
		}
	}

	mousepressed(x, y, btn)
	{
		GUI.mouseInput(this.gui_top, btn, MOUSE_DOWN, x, y, 0, 0, 1)
		GUI.mouseInput(this.gui_nodes, btn, MOUSE_DOWN, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (btn == MOUSE_RIGHT) {
			this.right_press_pos = Vector2(x, y)
		}

		if (!this.is_gui_active()) {
			this.editop.on_mouse_pressed(x, y, btn)
		}
	}

	mousereleased(x, y, btn)
	{
		GUI.mouseInput(this.gui_top, btn, MOUSE_UP, x, y, 0, 0, 1)
		GUI.mouseInput(this.gui_nodes, btn, MOUSE_UP, x, y, -this.camera.pos.x, -this.camera.pos.y, 1.0/this.camera.scale)

		if (btn == MOUSE_RIGHT and this.right_press_pos.x == x and this.right_press_pos.y == y) {
			this.right_press_pos = nil
			this.popup_pos = Vector2(x, y)
		} else if (btn == MOUSE_LEFT) {
			this.popup_pos = nil
		}

		if (!this.is_gui_active()) {
			this.editop.on_mouse_released(x, y, btn)
		}
	}

	mousescrolled(x, y, dx, dy)
	{
		this.editop.on_mouse_scrolled(x, y, dx, dy)		
	}

	drawScene()
	{
		this.scene.draw()

		// fixme
		Graphics.flush()

		GUI.begin(this.gui_nodes)
		var dirty = false
		for (var node in this.scene.nodes) {
			var bp_node = node.components["bp"]
			if (bp_node.drawGUI(this.gui_nodes)) {
				dirty = true
			}
		}
		GUI.end(this.gui_nodes)

		if (dirty) {
			this.editop.clear()
		}
	}

	drawGUI()
	{
		Graphics.onCamUpdate(0, 0, 1)

		GUI.begin(this.gui_top)

		if (this.popup_pos)
		{
			var pos = GUI.transScrPosToProj(this.popup_pos.x, this.popup_pos.y, 0, 0, 1)
			var x = pos[0]
			var y = pos[1] - 25

			var new_node = this.drawPopup(x, y)
			if (new_node)
			{
				this.add_node(new_node, x, y)
				this.popup_pos = nil

				if (this.prev_pin)
				{
					if (this.prev_pin.is_input) {
						if (!new_node.exports.isEmpty) {
							Blueprint.connect(new_node.exports[0], this.prev_pin)
							this.scene.bp_dirty = true
						}
					} else {
						if (!new_node.imports.isEmpty) {
							Blueprint.connect(this.prev_pin, new_node.imports[0])
							this.scene.bp_dirty = true
						}
					}
				}
			}
		}

		// fixme:
		GUI.button(this.gui_top, ".", 9999, 9999, 0, 0)

		GUI.end(this.gui_top)

		Graphics.onCamUpdate(this.camera.pos.x, this.camera.pos.y, this.camera.scale)
	}

	getPopupNum()
	{
		return 22
	}

	drawPopup(x, y, w, h)
	{
		var new_node = nil

		if (GUI.selectable(this.gui_top, "Number", false, x, y, w)) {
			new_node = Number()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Number2", false, x, y, w)) {
			new_node = Number2()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Number3", false, x, y, w)) {
			new_node = Number3()
		}
		y = y - h				
		if (GUI.selectable(this.gui_top, "Combine", false, x, y, w)) {
			new_node = Combine()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Time", false, x, y, w)) {
			new_node = Time()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Sin", false, x, y, w)) {
			new_node = Sin()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Cos", false, x, y, w)) {
			new_node = Cos()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Radians", false, x, y, w)) {
			new_node = Radians()
		}
		y = y - h				
		if (GUI.selectable(this.gui_top, "Add", false, x, y, w)) {
			new_node = Add()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Subtract", false, x, y, w)) {
			new_node = Subtract()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Multiply", false, x, y, w)) {
			new_node = Multiply()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Divide", false, x, y, w)) {
			new_node = Divide()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Texture", false, x, y, w)) {
			new_node = Texture()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Matrix", false, x, y, w)) {
			new_node = Matrix()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Translate", false, x, y, w)) {
			new_node = Translate()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Rotate", false, x, y, w)) {
			new_node = Rotate()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Perspective", false, x, y, w)) {
			new_node = Perspective()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "LookAt", false, x, y, w)) {
			new_node = LookAt()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "For", false, x, y, w)) {
			new_node = For()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Array", false, x, y, w)) {
			new_node = Array()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Print", false, x, y, w)) {
			new_node = Print()
		}
		y = y - h
		if (GUI.selectable(this.gui_top, "Camera3D", false, x, y, w)) {
			new_node = Camera3D()
		}
		y = y - h

		return new_node
	}
	popupCB(x, y, prev_pin)
	{
		this.popup_pos = Vector2(x, y)
		if (prev_pin) {
			this.prev_pin = prev_pin
		}
	}

	is_gui_active()
	{
		return this.popup_pos != nil
	}

	add_node(bp_node, x, y)
	{
		var node = SceneNode()

		node.components["bp"] = bp_node

		var pos = Vector2(x, y)

		var bb = BoundingBox2(bp_node.get_size())
		bb.transform(pos, 0, Vector2())
		node.components["bounding"] = bb
		bp_node.aabb_dirty = false

		var trans = Transform2()
		trans.set_position(pos)
		node.components["transform"] = trans

		this.scene.add(node)
	}

	loadfromfile(filepath)
	{
		if (filepath != "") {
			this.filepath = filepath
		}
		if (this.filepath == "") {
			return
		}

		Filesystem.setAssetBaseDir(this.filepath)

		var str = "
import \"test\" for test
import \"blueprint.blueprint\" for Blueprint
import \"blueprint.nodes.number\" for Number
import \"blueprint.nodes.number2\" for Number2
import \"blueprint.nodes.number3\" for Number3
import \"blueprint.nodes.combine\" for Combine
import \"blueprint.nodes.time\" for Time
import \"blueprint.nodes.sin\" for Sin
import \"blueprint.nodes.cos\" for Cos
import \"blueprint.nodes.radians\" for Radians
import \"blueprint.nodes.add\" for Add
import \"blueprint.nodes.subtract\" for Subtract
import \"blueprint.nodes.multiply\" for Multiply
import \"blueprint.nodes.divide\" for Divide
import \"blueprint.nodes.texture\" for Texture
import \"blueprint.nodes.matrix\" for Matrix
import \"blueprint.nodes.translate\" for Translate
import \"blueprint.nodes.rotate\" for Rotate
import \"blueprint.nodes.perspective\" for Perspective
import \"blueprint.nodes.lookat\" for LookAt
import \"blueprint.nodes.for\" for For
import \"blueprint.nodes.array\" for Array
import \"blueprint.nodes.print\" for Print
import \"blueprint.nodes.camera3d\" for Camera3D
"
		str = str + this.loadFileImports()

		var file = IO.open(this.filepath, "r")
		str = str + file.read()
		IO.close(file)

		Basic.loadstring(str)

		this.scene.bp_dirty = true
	}

	savetofile()
	{
		var file = IO.open(this.filepath, "w")

		// nodes
		var index = 0
		for (var node in this.scene.nodes) 
		{
			var bp = node.components["bp"]
			var trans = node.components["transform"]

			var name = "node%(index)"

			file.write("var %(name) = %(bp.name)()\n")
			file.write("test.add_node(node%(index), %(trans.position.x), %(trans.position.y))\n")

			var node_str = bp.toString(name)
			file.write("%(node_str)\n")

			index = index + 1
		}

		// connections
		var f_idx = 0
		for (var f_node in this.scene.nodes) 
		{
			var f_name = "node%(f_idx)"

			var f_bp = f_node.components["bp"]
			for (var f_pin in f_bp.exports)
			{
				for (var f_conn in f_pin.conns)
				{
					var t_pin
					var t_name
					for (var t_idx = 0; t_idx < this.scene.nodes.count; t_idx = t_idx + 1) {
						var t_bp = this.scene.nodes[t_idx].components["bp"]
						if (t_bp == f_conn.to.node) {
							t_name = "node%(t_idx)"
						}
					}
					file.write("Blueprint.connect(%(f_name).exports[%(f_conn.from.slot_idx)], %(t_name).imports[%(f_conn.to.slot_idx)])\n")
				}
			}

			f_idx = f_idx + 1
		}
			
		IO.close(file)
	}

	refresh()
	{
		this.clear()
		this.loadfromfile(this.filepath)
	}

	clear()
	{
		this.editop.clear()
		this.scene.clear()
	}
}