var node0 = Texture()
node0.gamma_correction = false
node0.init_texture("samples/rendergraph/learnopengl/resources/textures/hdr/newport_loft.hdr")
node0.set_sampler("linear repeat")

_editor.add_node(node0, -1752.7862681306, -677.24098145746)

var node1 = Draw()

node1.set_prim_type("tri_strip")
node1.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node1, 262.70687607416, 86.770625114165)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform samplerCube environmentMap;

void main()
{       
    vec3 envColor = texture(environmentMap, vec3(-1.0, TexCoord.yx * 2.0 - 1.0)).rgb;
    
    // HDR tonemap and gamma correct
//    envColor = envColor / (envColor + vec3(1.0));
//    envColor = pow(envColor, vec3(1.0/2.2)); 
    
    FragColor = vec4(envColor, 1.0);
}
"
node2.execute()

_editor.add_node(node2, 58.420286048602, 125.43814200199)

var node3 = PrimitiveShape()

node3.type = "quad"
node3.layout = [ "position", "texture" ]

_editor.add_node(node3, -319.59445880983, -938.04845010919)

var node4 = SubGraph()

node4.load_from_file(_editor, "equirectangular_to_cubemap.ves")

_editor.add_node(node4, -1543.1717255016, -642.30207746846)

var node5 = Orthographic()

node5.left = 0
node5.right = 0
node5.bottom = 0
node5.top = 0

_editor.add_node(node5, -336.68849924316, -704.3802741184)

var node6 = Camera2D()

node6.x = 0
node6.y = 0
node6.scale = 1
node6.speed = 0.01

_editor.add_node(node6, -341.03111749863, -601.49886167819)

var node7 = Scale()

node7.sx = 128
node7.sy = 128
node7.sz = 0

_editor.add_node(node7, -337.9655756451, -472.4555801271)

var node8 = Draw()

node8.set_prim_type("tri_strip")
node8.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node8, 322.70687607416, -165.04755670402)

var node9 = Shader()

node9.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node9.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform samplerCube environmentMap;

void main()
{       
    vec3 envColor = texture(environmentMap, vec3(TexCoord * 2.0 - 1.0, 1.0)).rgb;
    
    // HDR tonemap and gamma correct
//    envColor = envColor / (envColor + vec3(1.0));
//    envColor = pow(envColor, vec3(1.0/2.2)); 
    
    FragColor = vec4(envColor, 1.0);
}
"
node9.execute()

_editor.add_node(node9, 118.4202860486, -126.38003981619)

var node10 = Draw()

node10.set_prim_type("tri_strip")
node10.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node10, 455.43414880143, -426.8657385222)

var node11 = Shader()

node11.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node11.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform samplerCube environmentMap;

void main()
{       
    vec3 envColor = texture(environmentMap, vec3(1.0, TexCoord.y * 2.0 - 1.0, -(TexCoord.x * 2.0 - 1.0))).rgb;
    
    // HDR tonemap and gamma correct
//    envColor = envColor / (envColor + vec3(1.0));
//    envColor = pow(envColor, vec3(1.0/2.2)); 
    
    FragColor = vec4(envColor, 1.0);
}
"
node11.execute()

_editor.add_node(node11, 251.14755877587, -388.19822163437)

var node12 = Draw()

node12.set_prim_type("tri_strip")
node12.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node12, 588.8752913078, -693.59244468811)

var node13 = Shader()

node13.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node13.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform samplerCube environmentMap;

void main()
{       
    vec3 envColor = texture(environmentMap, vec3(-(TexCoord.x * 2.0 - 1.0), TexCoord.y * 2.0 - 1.0, -1.0)).rgb;
    
    // HDR tonemap and gamma correct
//    envColor = envColor / (envColor + vec3(1.0));
//    envColor = pow(envColor, vec3(1.0/2.2)); 
    
    FragColor = vec4(envColor, 1.0);
}
"
node13.execute()

_editor.add_node(node13, 384.58870128224, -654.92492780028)

var node14 = Draw()

node14.set_prim_type("tri_strip")
node14.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node14, 681.04961013779, -925.10003616811)

var node15 = Shader()

node15.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node15.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform samplerCube environmentMap;

void main()
{       
    vec3 envColor = texture(environmentMap, vec3(TexCoord.x * 2.0 - 1.0, 1.0, -(TexCoord.y * 2.0 - 1.0))).rgb;
    
    // HDR tonemap and gamma correct
//    envColor = envColor / (envColor + vec3(1.0));
//    envColor = pow(envColor, vec3(1.0/2.2)); 
    
    FragColor = vec4(envColor, 1.0);
}
"
node15.execute()

_editor.add_node(node15, 476.76302011224, -886.43251928028)

var node16 = Draw()

node16.set_prim_type("tri_strip")
node16.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node16, 777.51110658779, -1154.4640388381)

var node17 = Shader()

node17.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node17.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform samplerCube environmentMap;

void main()
{       
    vec3 envColor = texture(environmentMap, vec3((TexCoord.x * 2.0 - 1.0), -1.0, (TexCoord.y * 2.0 - 1.0))).rgb;
    
    // HDR tonemap and gamma correct
//    envColor = envColor / (envColor + vec3(1.0));
//    envColor = pow(envColor, vec3(1.0/2.2)); 
    
    FragColor = vec4(envColor, 1.0);
}
"
node17.execute()

_editor.add_node(node17, 573.22451656224, -1115.7965219503)

var node18 = Translate()

node18.dx = -256
node18.dy = 0
node18.dz = 0

_editor.add_node(node18, -140.33095629376, 113.94646334225)

var node19 = Translate()

node19.dx = 0
node19.dy = 0
node19.dz = 0

_editor.add_node(node19, -84.82825629376, -134.95053665775)

var node20 = Translate()

node20.dx = 256
node20.dy = 0.128173828125
node20.dz = 0

_editor.add_node(node20, 2.8846437062405, -398.48853665775)

var node21 = Translate()

node21.dx = 512
node21.dy = 0
node21.dz = 0

_editor.add_node(node21, 149.42774370624, -656.17013665775)

var node22 = Translate()

node22.dx = 0
node22.dy = 256
node22.dz = 0

_editor.add_node(node22, 259.23524370624, -884.56973665775)

var node23 = Translate()

node23.dx = 0
node23.dy = -256
node23.dz = 0

_editor.add_node(node23, 268.95774858765, -1105.0076229585)

var node24 = Cubemap()

node24.init_texture(0, 0, "rgba8")

_editor.add_node(node24, -1301.3389640738, 44.895759780115)

var node25 = Texture()
node25.gamma_correction = false
node25.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/right.jpg")
node25.set_sampler("linear repeat")

_editor.add_node(node25, -1734.033353728, 591.04511241016)

var node26 = Texture()
node26.gamma_correction = false
node26.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/left.jpg")
node26.set_sampler("linear repeat")

_editor.add_node(node26, -1973.1440702091, 595.83781782646)

var node27 = Texture()
node27.gamma_correction = false
node27.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/top.jpg")
node27.set_sampler("linear repeat")

_editor.add_node(node27, -1990.6312637067, 258.76179842887)

var node28 = Texture()
node28.gamma_correction = false
node28.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/bottom.jpg")
node28.set_sampler("linear repeat")

_editor.add_node(node28, -1749.0828722035, 257.78440617424)

var node29 = Texture()
node29.gamma_correction = false
node29.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/front.jpg")
node29.set_sampler("linear repeat")

_editor.add_node(node29, -1750.8375337703, -77.888020572575)

var node30 = Texture()
node30.gamma_correction = false
node30.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/back.jpg")
node30.set_sampler("linear repeat")

_editor.add_node(node30, -1980.6100902897, -81.498429697634)

var node31 = Input()

node31.var_name = "environmentMap"
node31.var_type = "texture"

_editor.add_node(node31, -885.0002903125, -681.05368602051)

Blueprint.connect(node0.exports[0], node4.imports[1])
Blueprint.connect(node2.exports[0], node1.imports[1])
Blueprint.connect(node3.exports[0], node1.imports[2])
Blueprint.connect(node3.exports[0], node8.imports[2])
Blueprint.connect(node3.exports[0], node10.imports[2])
Blueprint.connect(node3.exports[0], node12.imports[2])
Blueprint.connect(node3.exports[0], node14.imports[2])
Blueprint.connect(node3.exports[0], node16.imports[2])
Blueprint.connect(node5.exports[0], node2.imports[2])
Blueprint.connect(node5.exports[0], node9.imports[2])
Blueprint.connect(node5.exports[0], node11.imports[2])
Blueprint.connect(node5.exports[0], node13.imports[2])
Blueprint.connect(node5.exports[0], node15.imports[2])
Blueprint.connect(node5.exports[0], node17.imports[2])
Blueprint.connect(node6.exports[0], node2.imports[1])
Blueprint.connect(node6.exports[0], node9.imports[1])
Blueprint.connect(node6.exports[0], node11.imports[1])
Blueprint.connect(node6.exports[0], node13.imports[1])
Blueprint.connect(node6.exports[0], node15.imports[1])
Blueprint.connect(node6.exports[0], node17.imports[1])
Blueprint.connect(node7.exports[0], node18.imports[0])
Blueprint.connect(node7.exports[0], node19.imports[0])
Blueprint.connect(node7.exports[0], node20.imports[0])
Blueprint.connect(node7.exports[0], node21.imports[0])
Blueprint.connect(node7.exports[0], node22.imports[0])
Blueprint.connect(node7.exports[0], node23.imports[0])
Blueprint.connect(node9.exports[0], node8.imports[1])
Blueprint.connect(node11.exports[0], node10.imports[1])
Blueprint.connect(node13.exports[0], node12.imports[1])
Blueprint.connect(node15.exports[0], node14.imports[1])
Blueprint.connect(node17.exports[0], node16.imports[1])
Blueprint.connect(node18.exports[0], node2.imports[0])
Blueprint.connect(node19.exports[0], node9.imports[0])
Blueprint.connect(node20.exports[0], node11.imports[0])
Blueprint.connect(node21.exports[0], node13.imports[0])
Blueprint.connect(node22.exports[0], node15.imports[0])
Blueprint.connect(node23.exports[0], node17.imports[0])
Blueprint.connect(node25.exports[0], node24.imports[0])
Blueprint.connect(node26.exports[0], node24.imports[1])
Blueprint.connect(node27.exports[0], node24.imports[2])
Blueprint.connect(node28.exports[0], node24.imports[3])
Blueprint.connect(node29.exports[0], node24.imports[4])
Blueprint.connect(node30.exports[0], node24.imports[5])
Blueprint.connect(node31.exports[0], node2.imports[3])
Blueprint.connect(node31.exports[0], node9.imports[3])
Blueprint.connect(node31.exports[0], node11.imports[3])
Blueprint.connect(node31.exports[0], node13.imports[3])
Blueprint.connect(node31.exports[0], node15.imports[3])
Blueprint.connect(node31.exports[0], node17.imports[3])
