var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node0, 201.5802241559, 331.0448724385)

var node1 = Pass()

node1.once = true

_editor.add_node(node1, 976.79212901553, -79.613740923133)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out vec3 WorldPos;

uniform UBO
{
    mat4 projection;
    mat4 view;    
};

void main()
{
    WorldPos = aPos;
    gl_Position =  projection * view * vec4(WorldPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;
in vec3 WorldPos;

uniform samplerCube environmentMap;

uniform UBO
{
    float roughness;    
};

const float PI = 3.14159265359;
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
// efficient VanDerCorpus calculation.
float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}
// ----------------------------------------------------------------------------
vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;
    
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
    
    // from spherical coordinates to cartesian coordinates - halfway vector
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
    
    // from tangent-space H vector to world-space sample vector
    vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
    
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}
// ----------------------------------------------------------------------------
void main()
{       
    vec3 N = normalize(WorldPos);
    
    // make the simplyfying assumption that V equals R equals the normal 
    vec3 R = N;
    vec3 V = R;

    const uint SAMPLE_COUNT = 1024u;
    vec3 prefilteredColor = vec3(0.0);
    float totalWeight = 0.0;
    
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        // generates a sample vector that's biased towards the preferred alignment direction (importance sampling).
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            // sample from the environment's mip level based on roughness/pdf
            float D   = DistributionGGX(N, H, roughness);
            float NdotH = max(dot(N, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001; 

            float resolution = 512.0; // resolution of source cubemap (per face)
            float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 
            
            prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }

    prefilteredColor = prefilteredColor / totalWeight;

    FragColor = vec4(prefilteredColor, 1.0);
}
"
node2.gs = ""
node2.render_run()

_editor.add_node(node2, -14.749751273145, 379.23929381911)

var node3 = PrimitiveShape()

node3.type = "cube"
node3.layout = [ "position" ]

_editor.add_node(node3, 17.574015125081, 228.0304245447)

var node4 = Perspective()

node4.fovy = 90
node4.aspect = 1
node4.znear = 0.1
node4.zfar = 10

_editor.add_node(node4, -196.36238572382, 483.8702304338)

var node5 = Clear()

node5.masks = [ "color" ]
node5.values = { "color" : [ 255, 255, 255, 255 ] }

_editor.add_node(node5, 4.5011493567613, 558.1085693723)

var node6 = RenderTarget()

node6.width = 32
node6.height = 32

_editor.add_node(node6, 16.711829403841, 38.321903012524)

var node7 = For()

node7.start = 0
node7.end = 6

_editor.add_node(node7, 771.63060203633, -95.89321188616)

var node8 = Fetch()

_editor.add_node(node8, -170.23870943051, 20.126739094496)

var node9 = Custom()

node9.code = "
import \"maths\" for Matrix44
import \"maths.vector\" for Vector3
var capture_views = [
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 1.0,  0.0,  0.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3(-1.0,  0.0,  0.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  1.0,  0.0), Vector3(0.0,  0.0,  1.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0, -1.0,  0.0), Vector3(0.0,  0.0, -1.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  0.0,  1.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  0.0, -1.0), Vector3(0.0, -1.0,  0.0))
]
_editor.script_stack.clear()
_editor.script_stack.add(capture_views)
"
node9.init_ports(0, 1)

_editor.add_node(node9, -356.78707918211, 365.2285525693)

var node10 = Fetch()

_editor.add_node(node10, -176.82361764384, 377.7266535079)

var node11 = Cubemap()

node11.init_texture(32, 32, "rgb16f")

_editor.add_node(node11, -340.65024463212, -12.842887032788)

var node12 = Input()

node12.var_name = "environmentMap"
node12.var_type = "texture"

_editor.add_node(node12, -195.05360857502, 219.01846172174)

var node13 = Output()

node13.var_name = "tex"
node13.var_type = "texture"

_editor.add_node(node13, -189.10556446422, 82.644868393575)

var node14 = Texture()
node14.gamma_correction = true
node14.init_texture("samples/rendergraph/learnopengl/resources/textures/hdr/newport_loft.hdr")


_editor.add_node(node14, -1129.784475707, 22.636798680584)

var node15 = Subgraph()
node15.load_from_file(_editor, "assets/blueprints/rendergraph/equirectangular_to_cubemap.ves")

_editor.add_node(node15, -888.04974758251, 51.132305848634)

var node16 = Pass()

node16.once = true

_editor.add_node(node16, -682.32484751811, 50.821960650264)

var node17 = Print()

_editor.add_node(node17, -349.97003173828, 177.62628173828)

var node18 = For()

node18.start = 0
node18.end = 5

_editor.add_node(node18, 289.63060203633, -151.89321188616)

var node19 = Divide()

_editor.add_node(node19, 581.6653137207, -228.70376586914)

var node20 = Subtract()

_editor.add_node(node20, 435.6653137207, -232.70376586914)

var node21 = Number()

node21.value = 1

_editor.add_node(node21, 296.6653137207, -263.70376586914)

var node22 = Subgraph()
node22.load_from_file(_editor, "assets/blueprints/rendergraph/draw_skybox.ves")
node22.set_prop_value("tonemap", 1.6668492555618)
node22.set_prop_value("gamma_correct", 1.9826387166977)

_editor.add_node(node22, -129.30012870402, -340.29721057784)

var node23 = Pass()

node23.once = false

_editor.add_node(node23, 75.5683949243, -134.65094503149)

var node24 = Perspective()

node24.fovy = 45
node24.aspect = 0
node24.znear = 0.1
node24.zfar = 100

_editor.add_node(node24, -461.53686187898, -429.78966851056)

var node25 = Camera3d()

node25.cam.position.set(0, 0, 3)
node25.cam.yaw = 46.6
node25.cam.pitch = -36.8
node25.cam.zoom = 45
node25.cam.update_vectors()
node25.speed = 0.01

_editor.add_node(node25, -468.36699769994, -571.85648363795)

var node26 = Clear()

node26.masks = [ "depth" ]
node26.values = { "color" : [ 255, 255, 255, 255 ] }

_editor.add_node(node26, -459.69724483073, -279.79155367669)

Blueprint.connect(node0, "next", node18, "do")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
Blueprint.connect(node4, "mat", node2, "projection")
Blueprint.connect(node5, "next", node0, "prev")
Blueprint.connect(node6, "fbo", node0, "fbo")
Blueprint.connect(node7, "index", node8, "index")
Blueprint.connect(node7, "index", node10, "index")
Blueprint.connect(node8, "item", node6, "col0")
Blueprint.connect(node9, "out0", node10, "items")
Blueprint.connect(node10, "item", node2, "view")
Blueprint.connect(node11, "tex", node13, "var")
Blueprint.connect(node11, "tex", node17, "value")
Blueprint.connect(node11, "sides", node8, "items")
Blueprint.connect(node14, "tex", node15, "equirectangularMap")
Blueprint.connect(node15, "next", node16, "prev")
Blueprint.connect(node15, "tex", node2, "environmentMap")
Blueprint.connect(node15, "tex", node22, "skybox")
Blueprint.connect(node18, "next", node7, "do")
Blueprint.connect(node18, "index", node19, "a")
Blueprint.connect(node18, "index", node6, "mipmap")
Blueprint.connect(node18, "num", node20, "a")
Blueprint.connect(node19, "v", node2, "roughness")
Blueprint.connect(node20, "v", node19, "b")
Blueprint.connect(node21, "v", node20, "b")
Blueprint.connect(node22, "next", node23, "prev")
Blueprint.connect(node24, "mat", node22, "projection")
Blueprint.connect(node25, "rot", node22, "view")
Blueprint.connect(node26, "next", node22, "prev")
