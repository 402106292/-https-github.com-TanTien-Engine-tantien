
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.*"

import "rendergraph.nodes.*"
import "shadergraph.nodes.*"
import "pixelgraph.nodes.*"
var node0 = Shadergraph()

_editor.add_node(node0, 90.434213028653, -39.366586214838)

var node1 = Draw()

node1.set_prim_type("tri_strip")
node1.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less", "clip_plane" : true }
node1.skip = false

_editor.add_node(node1, 253.19987589051, -151.12763916689)

var node2 = PrimitiveShape()

node2.type = "quad"
node2.layout = [ "position", "texture" ]
node2.shape_params = {  }

_editor.add_node(node2, 94.53926939514, -169.71186859865)

var node3 = SampleTexture()

_editor.add_node(node3, -292.25937287565, -75.15381516111)

var node4 = TexCoord()

_editor.add_node(node4, -453.16943490016, -111.39262588846)

var node5 = Texture()
node5.query_param("unif_name").value = "u_tex"
node5.gamma_correction = false
node5.init_texture("../../rendergraph/learnopengl/resources/textures/bricks2.jpg")
node5.set_sampler("linear_repeat")

_editor.add_node(node5, -552.08379405629, 189.38067909168)

var node6 = ReplaceColor()
node6.query_param("from").value.set(0, 0, 0)
node6.query_param("to").value.set(1, 1, 1)
node6.query_param("range").value = 0.5
node6.query_param("fuzziness").value = 0.1

_editor.add_node(node6, -116.55774793388, -95.01485785124)

var node7 = Number3()

node7.value.set(1.0218369960785, 0, 0)

_editor.add_node(node7, -316.26297873259, -225.23639439366)

var node8 = Number3()

node8.value.set(0, 0, 0.98381888866425)

_editor.add_node(node8, -315.23665188156, -331.46012894455)

Blueprint.connect(node8, "v3", node6, "to")
Blueprint.connect(node7, "v3", node6, "from")
Blueprint.connect(node5, "tex", node3, "tex")
Blueprint.connect(node4, "uv", node3, "uv")
Blueprint.connect(node3, "rgb", node6, "rgb")
Blueprint.connect(node6, "ret", node0, "rgb")
Blueprint.connect(node0, "shader", node1, "shader")
Blueprint.connect(node2, "out", node1, "va")
