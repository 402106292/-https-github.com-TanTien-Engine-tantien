var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less" }
node0.skip = true

_editor.add_node(node0, 502.8121562967, 784.63764981691)

var node1 = Model()
node1.init_model("../learnopengl/resources/objects/backpack/backpack.obj")

_editor.add_node(node1, -94.035444330909, 47.0920029138)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec2 TexCoords;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    TexCoords = aTexCoords;
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D texture_diffuse1;

void main()
{    
    FragColor = texture(texture_diffuse1, TexCoords);
}
"
node2.gs = ""
node2.execute()

_editor.add_node(node2, 248.25214705539, 720.7351516582)

var node3 = Clear()

node3.masks = [ "depth", "color" ]
node3.values = { "color" : [ 0.5, 0.5, 0.5, 1 ] }

_editor.add_node(node3, 260.7587880509, 859.25768422459)

var node4 = Camera3d()

node4.cam.position.set(-6.0960994302672, 2.1272538986933, 5.9922856476635)
node4.cam.yaw = -409.8
node4.cam.pitch = -13.4
node4.cam.zoom = 45
node4.cam.update_vectors()
node4.speed = 0.21111145615578

_editor.add_node(node4, -322.60912728151, 214.76534955785)

var node5 = Perspective()

node5.fovy = 45
node5.aspect = 0
node5.znear = 0.1
node5.zfar = 100

_editor.add_node(node5, -320.22283332775, 58.35527158874)

var node6 = Draw()

node6.set_prim_type("triangles")
node6.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "back", "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less" }
node6.skip = false

_editor.add_node(node6, 926.4973793462, 298.69981632394)

var node7 = Clear()

node7.masks = [ "depth", "color" ]
node7.values = { "color" : [ 128, 125.72415161133, 128, 255 ] }

_editor.add_node(node7, 686.83681124013, 463.02620705056)

var node8 = Shader()

node8.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

out VS_OUT {
	vec3 FragPos;
    vec2 TexCoords;
	vec3 Normal;
} vs_out;

void main()
{
	vs_out.FragPos = vec3(model * vec4(aPos, 1.0));
	vs_out.TexCoords = aTexCoords;

    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vs_out.Normal = normalMatrix * aNormal;

    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node8.fs = "
#version 330 core
layout (location = 0) out vec3 gMain;
layout (location = 1) out vec3 gDepth;
layout (location = 2) out vec3 gNormal;

in VS_OUT {
	vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
} fs_in;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_normal1;
uniform sampler2D diffuse_ramp;
uniform sampler2D palette_tex;
uniform samplerCube irradianceMap;

uniform UBO
{
    vec3 lightPos;
    vec3 viewPos;
    float rimThreshold;
    float rimAmount;
};

float near = 0.1; 
float far = 100.0; 
float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

vec3 rgb2hsv(vec3 _in)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 P = mix(vec4(_in.bg, K.wz), vec4(_in.gb, K.xy), step(_in.b, _in.g));
    vec4 Q = mix(vec4(P.xyw, _in.r), vec4(_in.r, P.yzx), step(P.x, _in.r));
    float D = Q.x - min(Q.w, Q.y);
    float  E = 1e-10;
    return vec3(abs(Q.z + (Q.w - Q.y)/(6.0 * D + E)), D / (Q.x + E), Q.x);
}

vec3 hsv2rgb(vec3 _in)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 P = abs(fract(_in.xxx + K.xyz) * 6.0 - K.www);
    return _in.z * mix(K.xxx, clamp(P - K.xxx, 0.0, 1.0), _in.y);
}

void main()
{
	vec3 normal = normalize(fs_in.Normal);

	vec3 rgb = texture(texture_diffuse1, fs_in.TexCoords).rgb;
	vec3 hsv = rgb2hsv(rgb);	
//	gMain = hsv2rgb(vec3(floor(hsv.r * 16.0) / 16.0, hsv.g * 2.0, hsv.b));
//	gMain = hsv2rgb(vec3(hsv.r, hsv.g * 2.0, hsv.b));
//	vec3 color = hsv2rgb(vec3(texture(palette_tex, vec2(hsv.x, 0.5)).x, hsv.y, hsv.z));
	vec3 color = hsv2rgb(vec3(texture(palette_tex, vec2(hsv.x, 0.5)).x, 0.5, 0.5));

	//float u_colorFactor = 0.0;
	//float grey = 0.21 * rgb.r + 0.71 * rgb.g + 0.07 * rgb.b;
	//vec3 color = vec3(rgb.r * u_colorFactor + grey * (1.0 - u_colorFactor), rgb.g * u_colorFactor + grey * (1.0 - u_colorFactor), rgb.b * u_colorFactor + grey * (1.0 - u_colorFactor));

	vec3 lightColor = vec3(0.3) * 3;

    // ambient
    vec3 ambient = 0.3 * color;

    // diffuse
    vec3 irradiance = texture(irradianceMap, normal).rgb;
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float NdotL = dot(lightDir, normal);
//  float diff = max(NdotL, 0.0);
//	float diff = NdotL > 0.0 ? 1.0 : 0.0;
	// 0.105, 0.368, 0.632, 0.895
	float diff = texture(diffuse_ramp, vec2(NdotL * 0.5 + 0.5, 0.105)).r;
	float lightIntensity = diff;
    vec3 diffuse = diff * irradiance * lightColor;

    // specular
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    spec = smoothstep(0.005, 0.01, spec);
    vec3 specular = spec * lightColor;

    // rim
    vec3 _RimColor = vec3(1.0);
    float rimDot = 1 - dot(viewDir, normal);
	float rimIntensity = rimDot * pow(NdotL, rimThreshold);
	rimIntensity = smoothstep(rimAmount - 0.01, rimAmount + 0.01, rimIntensity);
	vec3 rim = rimIntensity * _RimColor;

    // final
    vec3 lighting = (ambient + diffuse + specular + rim) * color;

    gMain = lighting;

    float depth = LinearizeDepth(gl_FragCoord.z) / far; // divide by far to get depth in range [0,1] for visualization purposes
    gDepth = vec3(depth);

	//vec3 normal = texture(texture_normal1, fs_in.TexCoords).rgb;

    gNormal = normal;
}
"
node8.gs = ""
node8.execute()
node8.set_uniform("rimThreshold", [ 0.05 ])
node8.set_uniform("rimAmount", [ 0.68 ])

_editor.add_node(node8, 737.1005497475, 133.41398703134)

var node9 = Commentary()

node9.set_size(1058.3312988281, 706.05834960938)
node9.title = "Lighting"

_editor.add_node(node9, 637.70490851017, 574.06501773893)

var node10 = Texture()
node10.gamma_correction = false
node10.init_texture("samples/rendergraph/learnopengl/resources/objects/backpack/normal.png")


_editor.add_node(node10, 471.62710801958, 137.77728837576)

var node11 = RenderTarget()

node11.width = 1024
node11.height = 1024

_editor.add_node(node11, 851.83282927081, -1082.6961075916)

var node12 = Texture()
node12.gamma_correction = false
node12.init_texture(1024, 1024, "rgb")


_editor.add_node(node12, 298.00692703281, -1254.8526902626)

var node13 = Pass()

node13.once = false

_editor.add_node(node13, 1095.9019272506, 354.0140338414)

var node14 = Texture()
node14.gamma_correction = false
node14.init_texture(1024, 1024, "r16")


_editor.add_node(node14, 543.65645922946, -1249.9414222285)

var node15 = Draw()

node15.set_prim_type("tri_strip")
node15.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less" }
node15.skip = false

_editor.add_node(node15, 1712.5216625687, -1240.6358080604)

var node16 = Shader()

node16.vs = "
#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

void main()
{
	gl_Position = vec4(aPos, 1.0);
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node16.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform UBO
{
	float scale;
	float depthThreshold;
	float normalThreshold;
};

uniform sampler2D main_tex;
uniform sampler2D cam_depth_tex;
uniform sampler2D cam_normal_tex;

vec4 alphaBlend(vec4 top, vec4 bottom)
{
	vec3 color = (top.rgb * top.a) + (bottom.rgb * (1 - top.a));
	float alpha = top.a + bottom.a * (1 - top.a);

	return vec4(color, alpha);
}

void main()
{
	float halfScaleFloor = floor(scale * 0.5);
	float halfScaleCeil = ceil(scale * 0.5);

	vec2 _MainTex_TexelSize = vec2(1.0/1024.0, 1.0/1024.0);

	vec2 bottomLeftUV = TexCoord - vec2(_MainTex_TexelSize.x, _MainTex_TexelSize.y) * halfScaleFloor;
	vec2 topRightUV = TexCoord + vec2(_MainTex_TexelSize.x, _MainTex_TexelSize.y) * halfScaleCeil;  
	vec2 bottomRightUV = TexCoord + vec2(_MainTex_TexelSize.x * halfScaleCeil, -_MainTex_TexelSize.y * halfScaleFloor);
	vec2 topLeftUV = TexCoord + vec2(-_MainTex_TexelSize.x * halfScaleFloor, _MainTex_TexelSize.y * halfScaleCeil);

	vec3 normal0 = texture(cam_normal_tex, bottomLeftUV).rgb;
	vec3 normal1 = texture(cam_normal_tex, topRightUV).rgb;
	vec3 normal2 = texture(cam_normal_tex, bottomRightUV).rgb;
	vec3 normal3 = texture(cam_normal_tex, topLeftUV).rgb;

	vec3 normalFiniteDifference0 = normal1 - normal0;
	vec3 normalFiniteDifference1 = normal3 - normal2;
	float edgeNormal = sqrt(dot(normalFiniteDifference0, normalFiniteDifference0) + dot(normalFiniteDifference1, normalFiniteDifference1));
	edgeNormal = edgeNormal > normalThreshold ? 1 : 0;

	float depth0 = texture(cam_depth_tex, bottomLeftUV).r;
	float depth1 = texture(cam_depth_tex, topRightUV).r;
	float depth2 = texture(cam_depth_tex, bottomRightUV).r;
	float depth3 = texture(cam_depth_tex, topLeftUV).r;

	float depthFiniteDifference0 = depth1 - depth0;
	float depthFiniteDifference1 = depth3 - depth2;
	float edgeDepth = sqrt(pow(depthFiniteDifference0, 2) + pow(depthFiniteDifference1, 2)) * 100;	
	edgeDepth = edgeDepth > depthThreshold ? 1 : 0;

	float edge = max(edgeDepth, edgeNormal);

	vec4 _Color = vec4(0.0, 0.0, 0.0, 1.0);
	//vec4 _Color = vec4(1.0);
	vec4 edgeColor = vec4(_Color.rgb, _Color.a * edge);

	vec4 color = texture(main_tex, TexCoord);
	FragColor = alphaBlend(edgeColor, color);
}
"
node16.gs = ""
node16.execute()
node16.set_uniform("scale", [ 1.630126953125 ])
node16.set_uniform("depthThreshold", [ 0.090087890625 ])
node16.set_uniform("normalThreshold", [ 0.55675452947617 ])

_editor.add_node(node16, 1317.5480958361, -1266.7802953359)

var node17 = PrimitiveShape()

node17.type = "quad"
node17.layout = [ "position", "texture" ]

_editor.add_node(node17, 1501.2259853343, -1308.6573017239)

var node18 = Clear()

node18.masks = [ "color", "depth" ]
node18.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node18, 1493.4921337828, -1082.302303188)

var node19 = Texture()
node19.gamma_correction = false
node19.init_texture(1024, 1024, "rgb")


_editor.add_node(node19, 788.56149524911, -1262.6304206247)

var node20 = RenderBuffer()

node20.init_rbo(1024, 1024, "depth_component")

_editor.add_node(node20, 1009.7430703248, -1232.5799933328)

var node21 = Camera3d()

node21.cam.position.set(7.6322342785631, 16.984345708486, -1.7379706063585)
node21.cam.yaw = -164.2
node21.cam.pitch = -81.4
node21.cam.zoom = 31
node21.cam.update_vectors()
node21.speed = 0.19831281900406

_editor.add_node(node21, -333.68403873828, 423.42719476456)

var node22 = Texture()
node22.gamma_correction = false
node22.init_texture("diffuse_ramp_4.jpg")


_editor.add_node(node22, 227.47450297497, 69.821222563127)

var node23 = Texture()
node23.gamma_correction = false
node23.init_texture("107017.png")


_editor.add_node(node23, 232, 442.5)

var node24 = Commentary()

node24.set_size(635.08331298828, 464.41665649414)
node24.title = "Outline"

_editor.add_node(node24, 1511.543432661, -955.01364877334)

var node25 = Commentary()

node25.set_size(934.75103759766, 556.74530029297)
node25.title = "GBuffer"

_editor.add_node(node25, 633.9526511315, -958.34242106504)

var node26 = Commentary()

node26.set_size(508.44375610352, 326.62030029297)
node26.title = "Origin"

_editor.add_node(node26, 359.19506504791, 985.43449866298)

var node27 = Commentary()

node27.set_size(400, 613.55834960938)
node27.title = "Input"

_editor.add_node(node27, -218.56462711719, 554.67486801563)

var node28 = Subgraph()
node28.load_from_file(_editor, "assets/blueprints/rendergraph/equirectangular_to_cubemap.ves")

_editor.add_node(node28, -555.78948568975, -1255.3757692954)

var node29 = Texture()
node29.gamma_correction = false
node29.init_texture("samples/rendergraph/learnopengl/resources/textures/hdr/newport_loft.hdr")


_editor.add_node(node29, -801.19636369733, -1287.4261468564)

var node30 = Subgraph()
node30.load_from_file(_editor, "assets/blueprints/rendergraph/draw_skybox.ves")
node30.set_prop_value("tonemap", 1.8140017986298)
node30.set_prop_value("gamma_correct", 1.906494140625)

_editor.add_node(node30, -222.46603728392, -696.3746906264)

var node31 = Cubemap()

node31.init_texture(0, 0, "rgba8")

_editor.add_node(node31, -517.59293349052, -727.2731022604)

var node32 = Texture()
node32.gamma_correction = false
node32.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/right.jpg")


_editor.add_node(node32, -1251.5219361475, -597.5005606062)

var node33 = Texture()
node33.gamma_correction = false
node33.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/left.jpg")


_editor.add_node(node33, -1002.5324851284, -596.25868759998)

var node34 = Texture()
node34.gamma_correction = false
node34.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/top.jpg")


_editor.add_node(node34, -759.13131497089, -598.12147617218)

var node35 = Texture()
node35.gamma_correction = false
node35.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/bottom.jpg")


_editor.add_node(node35, -1248.7707694232, -931.3459747547)

var node36 = Texture()
node36.gamma_correction = false
node36.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/front.jpg")


_editor.add_node(node36, -995.43486176258, -926.3786727429)

var node37 = Texture()
node37.gamma_correction = false
node37.init_texture("samples/rendergraph/learnopengl/resources/textures/skybox/back.jpg")


_editor.add_node(node37, -762.27880696735, -926.0823915986)

var node38 = Subgraph()
node38.load_from_file(_editor, "assets/blueprints/rendergraph/create_irradiance_cubemap.ves")

_editor.add_node(node38, -932.63319506458, -278.95834538578)

var node39 = Pass()

node39.once = true

_editor.add_node(node39, -636.3837860318, -276.58860756193)

var node40 = Print()

_editor.add_node(node40, -744.45428416355, -377.18701193061)

Blueprint.connect(node1, "model", node0, "model")
Blueprint.connect(node1, "model", node6, "model")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "next", node0, "prev")
Blueprint.connect(node4, "mat", node2, "view")
Blueprint.connect(node4, "mat", node8, "view")
Blueprint.connect(node4, "zoom", node5, "fovy")
Blueprint.connect(node4, "rot", node30, "view")
Blueprint.connect(node4, "pos", node8, "viewPos")
Blueprint.connect(node5, "mat", node2, "projection")
Blueprint.connect(node5, "mat", node8, "projection")
Blueprint.connect(node5, "mat", node30, "projection")
Blueprint.connect(node6, "next", node30, "prev")
Blueprint.connect(node7, "next", node6, "prev")
Blueprint.connect(node8, "out", node6, "shader")
Blueprint.connect(node10, "tex", node8, "texture_normal1")
Blueprint.connect(node11, "fbo", node13, "fbo")
Blueprint.connect(node12, "tex", node11, "col0")
Blueprint.connect(node12, "tex", node16, "main_tex")
Blueprint.connect(node14, "tex", node11, "col1")
Blueprint.connect(node14, "tex", node16, "cam_depth_tex")
Blueprint.connect(node16, "out", node15, "shader")
Blueprint.connect(node17, "out", node15, "va")
Blueprint.connect(node18, "next", node15, "prev")
Blueprint.connect(node19, "tex", node11, "col2")
Blueprint.connect(node19, "tex", node16, "cam_normal_tex")
Blueprint.connect(node20, "rbo", node11, "depth")
Blueprint.connect(node21, "pos", node8, "lightPos")
Blueprint.connect(node22, "tex", node8, "diffuse_ramp")
Blueprint.connect(node23, "tex", node8, "palette_tex")
Blueprint.connect(node28, "tex", node38, "environmentMap")
Blueprint.connect(node29, "tex", node28, "equirectangularMap")
Blueprint.connect(node30, "next", node13, "prev")
Blueprint.connect(node31, "tex", node30, "skybox")
Blueprint.connect(node32, "tex", node31, "right")
Blueprint.connect(node33, "tex", node31, "left")
Blueprint.connect(node34, "tex", node31, "top")
Blueprint.connect(node35, "tex", node31, "bottom")
Blueprint.connect(node36, "tex", node31, "front")
Blueprint.connect(node37, "tex", node31, "back")
Blueprint.connect(node38, "next", node39, "prev")
Blueprint.connect(node38, "tex", node40, "value")
Blueprint.connect(node38, "tex", node8, "irradianceMap")
