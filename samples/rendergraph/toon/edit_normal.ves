var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "back", "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less" }
node0.skip = false

_editor.add_node(node0, 88.423171373616, 240.57972797787)

var node1 = Model()
node1.init_model("samples/rendergraph/learnopengl/resources/objects/backpack/backpack.obj")

_editor.add_node(node1, -149.91577554597, -178.10863502543)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
} vs_out;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));
    vs_out.TexCoords = aTexCoords;

    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vs_out.Normal = normalMatrix * aNormal;

    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
} fs_in;

uniform UBO
{
    vec3 lightPos;
};

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_normal1;

void main()
{    
    vec3 normal = normalize(fs_in.Normal);

    vec3 color = texture(texture_diffuse1, fs_in.TexCoords).rgb;

    vec3 lightColor = vec3(0.3) * 3;

    // ambient
    vec3 ambient = 0.3 * color;

    // diffuse
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float NdotL = dot(lightDir, normal);
    //float diff = max(NdotL, 0.0);
    float diff = NdotL > 0.0 ? 1.0 : 0.0;
    vec3 diffuse = diff * lightColor;

    vec3 lighting = (ambient + diffuse) * color;
    FragColor = vec4(lighting, 0.0);
}
"
node2.gs = ""
node2.execute()

_editor.add_node(node2, -117.89238450354, 139.51392906397)

var node3 = Clear()

node3.masks = [ "color", "depth" ]
node3.values = { "color" : [ 0.50447165966034, 0.5014414191246, 0.5, 1 ] }

_editor.add_node(node3, -103.40245275783, 335.43564874514)

var node4 = Camera3d()

node4.cam.position.set(-3.0144684526855, 2.1129674932678, 6.0569057209132)
node4.cam.yaw = -67.9
node4.cam.pitch = -26.9
node4.cam.zoom = 32
node4.cam.update_vectors()
node4.speed = 0.31825432181358

_editor.add_node(node4, -433.55561062704, 39.910626922309)

var node5 = Perspective()

node5.fovy = 32
node5.aspect = 0
node5.znear = 0.1
node5.zfar = 100

_editor.add_node(node5, -432.87257632775, -118.09155541126)

var node6 = Draw()

node6.set_prim_type("triangles")
node6.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "back", "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less" }
node6.skip = false

_editor.add_node(node6, 622.70084648562, -154.26455012092)

var node7 = Shader()

node7.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out VS_OUT {
    vec3 normal;
} vs_out;

uniform UBO
{
	mat4 view;
	mat4 model;	
};

void main()
{
    mat3 normalMatrix = mat3(transpose(inverse(view * model)));
    vs_out.normal = vec3(vec4(normalMatrix * aNormal, 0.0));
    gl_Position = view * model * vec4(aPos, 1.0); 
}
"
node7.fs = "
#version 330 core
out vec4 FragColor;

void main()
{
    FragColor = vec4(1.0, 1.0, 0.0, 1.0);
}
"
node7.gs = "
#version 330 core
layout (triangles) in;
layout (line_strip, max_vertices = 6) out;

in VS_OUT {
    vec3 normal;
} gs_in[];

const float MAGNITUDE = 0.2;

uniform UBO
{
	mat4 projection;	
};

void GenerateLine(int index)
{
    gl_Position = projection * gl_in[index].gl_Position;
    EmitVertex();
    gl_Position = projection * (gl_in[index].gl_Position + vec4(gs_in[index].normal, 0.0) * MAGNITUDE);
    EmitVertex();
    EndPrimitive();
}

void main()
{
    GenerateLine(0); // first vertex normal
    GenerateLine(1); // second vertex normal
    GenerateLine(2); // third vertex normal
}
"
node7.execute()

_editor.add_node(node7, 363.53551778982, -90.384022890073)

var node8 = Camera3d()

node8.cam.position.set(-0.63107668398667, 1.7028345264903, -3.7769916712574)
node8.cam.yaw = -116.6
node8.cam.pitch = -73.6
node8.cam.zoom = 45
node8.cam.update_vectors()
node8.speed = 0.24816545844078

_editor.add_node(node8, -438.74316803971, 207.05955623114)

Blueprint.connect(node1, "model", node0, "model")
Blueprint.connect(node1, "model", node6, "model")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "next", node0, "prev")
Blueprint.connect(node4, "mat", node7, "view")
Blueprint.connect(node4, "mat", node2, "view")
Blueprint.connect(node4, "zoom", node5, "fovy")
Blueprint.connect(node5, "mat", node2, "projection")
Blueprint.connect(node5, "mat", node7, "projection")
Blueprint.connect(node7, "out", node6, "shader")
Blueprint.connect(node8, "pos", node2, "lightPos")
