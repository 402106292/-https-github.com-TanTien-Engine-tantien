var node0 = Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less" }
node0.skip = false

_editor.add_node(node0, 556.9485185, -24.8843735)

var node1 = Shader()

node1.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoord;

out vec2 TexCoord;
out vec3 frag_pos;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
	frag_pos = aPos;
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node1.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 frag_pos;

uniform sampler2D normal_tex;

vec2 rotate(vec2 v, float rad)
{
    float c = cos(rad);
    float s = sin(rad);
    return vec2(c * v.x - s * v.y, s * v.x + c * v.y);
}

void main()
{
    const float line_sz = 0.03;
    vec2 tex_sz = textureSize(normal_tex, 0);
    vec2 grid_sz = 1.0 / tex_sz * 2.0;
    vec2 pos = fract(frag_pos.xy / grid_sz);
    if (pos.x < line_sz || pos.y < line_sz) 
    {
        FragColor = vec4(1.0, 0.0, 0.0, 1.0);
        return;
    }

    vec3 normal = texture(normal_tex, TexCoord).rgb;

	float rad = atan(normal.y, normal.x);
//	float rad = atan(1.0, -1.0);	
//	float len = length(vec2(normal.xy));
//	float len = length(normal);
	float len = 1.0 - normal.z;
    vec2 r_pos = rotate(pos - vec2(0.5, 0.5), rad) + vec2(0.5, 0.5);
    float space = (1.0 - len) / 2;
    if (r_pos.x >= space && r_pos.x < 1.0 - space && abs(r_pos.y - 0.5) < (1.0 - space - r_pos.x) * 0.2) 
    {
        FragColor = vec4(0.0, 1.0, 0.0, 1.0);
        return;
    }
    
    FragColor = vec4(normal, 1.0);
}
"
node1.gs = ""
node1.execute()

_editor.add_node(node1, 300.34326204692, 80.64195122923)

var node2 = PrimitiveShape()

node2.type = "quad"
node2.layout = [ "position", "texture", "normal" ]

_editor.add_node(node2, 215.46763922878, -183.29915605223)

var node3 = Camera2D()

node3.x = -328.53371422104
node3.y = 311.00647982804
node3.scale = 0.0016853499574016
node3.speed = 0.17111074924469

_editor.add_node(node3, 50.99301312891, 109.74331204688)

var node4 = Orthographic()

node4.left = 0
node4.right = 0
node4.bottom = 0
node4.top = 0
node4.near = 1
node4.far = -1

_editor.add_node(node4, 54.4628922793, 8.7309347216596)

var node5 = Texture()
node5.gamma_correction = false
node5.init_texture("samples/rendergraph/learnopengl/resources/textures/brickwall_normal.jpg")
node5.set_sampler("nearest clamp")

_editor.add_node(node5, 16.70993678015, -119.53990421359)

var node6 = Draw()

node6.set_prim_type("tri_strip")
node6.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less" }
node6.skip = false

_editor.add_node(node6, 714.31792595632, -377.07703691483)

var node7 = Shader()

node7.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out VS_OUT {
    vec3 normal;
} vs_out;

uniform UBO
{
	mat4 view;
	mat4 model;	
};

void main()
{
    mat3 normalMatrix = mat3(transpose(inverse(view * model)));
    vs_out.normal = vec3(vec4(normalMatrix * aNormal, 0.0));
    gl_Position = view * model * vec4(aPos, 1.0); 
}
"
node7.fs = "
#version 330 core
out vec4 FragColor;

void main()
{
    FragColor = vec4(1.0, 1.0, 0.0, 1.0);
}
"
node7.gs = "
#version 330 core
layout (triangles) in;
layout (line_strip, max_vertices = 6) out;

in VS_OUT {
    vec3 normal;
} gs_in[];

const float MAGNITUDE = 0.2;

uniform UBO
{
	mat4 projection;	
};

void GenerateLine(int index)
{
    gl_Position = projection * gl_in[index].gl_Position;
    EmitVertex();
    gl_Position = projection * (gl_in[index].gl_Position + vec4(gs_in[index].normal, 0.0) * MAGNITUDE);
    EmitVertex();
    EndPrimitive();
}

void main()
{
    GenerateLine(0); // first vertex normal
    GenerateLine(1); // second vertex normal
    GenerateLine(2); // third vertex normal
}
"
node7.execute()

_editor.add_node(node7, 496.56974244613, -318.5076556084)

var node8 = Camera3D()

node8.position.set(0, 0, 3)
node8.yaw = -93.1
node8.pitch = -1.5
node8.zoom = 33
node8.update_camera_vectors()
node8.speed = 0.01

_editor.add_node(node8, 211.27245921162, -347.30137455749)

var node9 = Perspective()

node9.fovy = 33
node9.aspect = 0
node9.znear = 0.1
node9.zfar = 100

_editor.add_node(node9, 358.80335854608, -483.90406401927)

var node10 = PrimitiveShape()

node10.type = "quad"
node10.layout = [ "position", "normal" ]

_editor.add_node(node10, 558.53875271771, -385.50632911559)

Blueprint.connect(node1, "out", node0, "shader")
Blueprint.connect(node2, "out", node0, "va")
Blueprint.connect(node3, "mat", node1, "view")
Blueprint.connect(node4, "mat", node1, "projection")
Blueprint.connect(node5, "tex", node1, "normal_tex")
Blueprint.connect(node7, "out", node6, "shader")
Blueprint.connect(node8, "mat", node7, "view")
Blueprint.connect(node8, "zoom", node9, "fovy")
Blueprint.connect(node9, "mat", node7, "projection")
Blueprint.connect(node10, "out", node6, "va")
