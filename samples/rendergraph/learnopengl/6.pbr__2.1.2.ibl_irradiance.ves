var node0 = Clear()

node0.masks = [ "depth" ]
node0.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node0, -17.515820092996, -161.44941641092)

var node1 = Draw()

node1.set_prim_type("triangles")
node1.render_state = { "depth_test" : true, "depth_func" : "less", "cull" : "back" }

_editor.add_node(node1, -248.60344882102, -302.85908327663)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 WorldPos;
out vec3 Normal;

uniform UBO
{
	mat4 projection;
	mat4 view;
	mat4 model;	
};

void main()
{
    WorldPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(model) * aNormal;   

    gl_Position =  projection * view * vec4(WorldPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;
in vec2 TexCoords;
in vec3 WorldPos;
in vec3 Normal;

uniform UBO
{
// material parameters
    vec3 albedo;
    float metallic;
    float roughness;
    float ao;

// lights
    vec3 lightPositions[4];
    vec3 lightColors[4];

    vec3 camPos;
};

// IBL
uniform samplerCube irradianceMap;

const float PI = 3.14159265359;
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}
// ----------------------------------------------------------------------------
void main()
{       
    vec3 N = Normal;
    vec3 V = normalize(camPos - WorldPos);
    vec3 R = reflect(-V, N); 

    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i) 
    {
        // calculate per-light radiance
        vec3 L = normalize(lightPositions[i] - WorldPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);   
        float G   = GeometrySmith(N, V, L, roughness);    
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);        
        
        vec3 nominator    = NDF * G * F;
        float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; // 0.001 to prevent divide by zero.
        vec3 specular = nominator / denominator;
        
         // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;                   
            
        // scale light by NdotL
        float NdotL = max(dot(N, L), 0.0);        

        // add to outgoing radiance Lo
        Lo += (kD * albedo / PI + specular) * radiance * NdotL; // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    }   
    
    // ambient lighting (we now use IBL as the ambient term)
    vec3 kS = fresnelSchlick(max(dot(N, V), 0.0), F0);
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;     
    vec3 irradiance = texture(irradianceMap, N).rgb;
    vec3 diffuse      = irradiance * albedo;
    vec3 ambient = (kD * diffuse) * ao;
    // vec3 ambient = vec3(0.002);
    
    vec3 color = ambient + Lo;

    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color , 1.0);
}
"
node2.execute()
node2.setUniform("albedo", [ 0.5, 0, 0 ])
node2.setUniform("ao", [ 1 ])
node2.setUniform("lightPositions[0]", [ -10, 10, 10 ])
node2.setUniform("lightPositions[1]", [ 10, 10, 10 ])
node2.setUniform("lightPositions[2]", [ -10, -10, 10 ])
node2.setUniform("lightPositions[3]", [ 10, -10, 10 ])
node2.setUniform("lightColors[0]", [ 300, 300, 300 ])
node2.setUniform("lightColors[1]", [ 300, 300, 300 ])
node2.setUniform("lightColors[2]", [ 300, 300, 300 ])
node2.setUniform("lightColors[3]", [ 300, 300, 300 ])

_editor.add_node(node2, -594.77049075856, -909.49985867813)

var node3 = PrimitiveShape()

node3.type = "sphere"
node3.layout = [ "position", "normal" ]

_editor.add_node(node3, -429.07577174978, -393.51497563371)

var node4 = Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 100

_editor.add_node(node4, -930.95156257078, -237.18715044365)

var node5 = Camera3D()

node5.position.set(-2.0833028954365, 1.744076305107, 21.570873673811)
node5.yaw = -1533.4
node5.pitch = -11
node5.zoom = 45
node5.update_camera_vectors()
node5.speed = 0.35880517959595

_editor.add_node(node5, -1104.7859499654, -412.47072578593)

var node6 = For()

node6.start = 0
node6.end = 7

_editor.add_node(node6, -3.1812311884657, -298.09411209123)

var node7 = Translate()

node7.dx = 6.25
node7.dy = 6.25
node7.dz = 0

_editor.add_node(node7, -862.08669695636, -692.27588715327)

var node8 = Matrix()

_editor.add_node(node8, -987.95595211025, -606.82875253181)

var node9 = For()

node9.start = 0
node9.end = 7

_editor.add_node(node9, 245.39655117898, -296.85908327663)

var node10 = Divide()

_editor.add_node(node10, 580.86121566203, -609.84106408007)

var node11 = Divide()

_editor.add_node(node11, 250.90254740408, -612.93010657553)

var node12 = Clamp()

node12.min = 0.05
node12.max = 1

_editor.add_node(node12, 387.0095650425, -624.73201881028)

var node13 = Texture()
node13.gamma_correction = false
node13.init_texture("resources/textures/hdr/newport_loft.hdr")
node13.set_sampler("linear repeat")

_editor.add_node(node13, -1301.0105756002, 103.29363569417)

var node14 = Custom()

node14.code = "
import \"maths.vector\" for Vector3
if (_editor.script_stack.count == 4)
{
    var x_i = _editor.script_stack[0]
    var x_n = _editor.script_stack[1]
    var y_i = _editor.script_stack[2]
    var y_n = _editor.script_stack[3]

    var space = 2.5
    var x = (x_i - x_n / 2) * space
    var y = (y_i - y_n / 2) * space

    _editor.script_stack.clear()
    _editor.script_stack.add(Vector3(x, y, 0))
}
"
node14.init_ports(4, 1)

_editor.add_node(node14, -1010.5093812548, -769.16997004821)

var node15 = SubGraph()
node15.load_from_file(_editor, "assets/rendergraph/equirectangular_to_cubemap.ves")

_editor.add_node(node15, -1001.0850264241, 128.09808847101)

var node16 = SubGraph()
node16.load_from_file(_editor, "assets/rendergraph/draw_skybox.ves")
node16.set_prop_value("tonemap", 1)
node16.set_prop_value("gamma_correct", 1)

_editor.add_node(node16, 119.20793922662, 126.26774566313)

var node17 = Pass()

node17.once = false

_editor.add_node(node17, 447.21875443419, 135.03891127859)

var node18 = Pass()

node18.once = true

_editor.add_node(node18, -381.95562998953, 194.66293305829)

var node19 = SubGraph()
node19.load_from_file(_editor, "assets/rendergraph/create_irradiance_cubemap.ves")

_editor.add_node(node19, -691.5196440133, 193.35057197682)

Blueprint.connect(node0.exports[0], node9.imports[0])
Blueprint.connect(node1.exports[0], node6.imports[1])
Blueprint.connect(node2.exports[0], node1.imports[1])
Blueprint.connect(node3.exports[0], node1.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[0])
Blueprint.connect(node4.exports[0], node16.imports[1])
Blueprint.connect(node5.exports[0], node2.imports[1])
Blueprint.connect(node5.exports[1], node4.imports[0])
Blueprint.connect(node5.exports[2], node16.imports[2])
Blueprint.connect(node5.exports[3], node2.imports[15])
Blueprint.connect(node6.exports[0], node9.imports[1])
Blueprint.connect(node6.exports[1], node11.imports[0])
Blueprint.connect(node6.exports[1], node14.imports[1])
Blueprint.connect(node6.exports[2], node11.imports[1])
Blueprint.connect(node6.exports[2], node14.imports[2])
Blueprint.connect(node7.exports[0], node2.imports[2])
Blueprint.connect(node8.exports[0], node7.imports[0])
Blueprint.connect(node9.exports[0], node16.imports[0])
Blueprint.connect(node9.exports[1], node10.imports[0])
Blueprint.connect(node9.exports[1], node14.imports[3])
Blueprint.connect(node9.exports[2], node10.imports[1])
Blueprint.connect(node9.exports[2], node14.imports[4])
Blueprint.connect(node10.exports[0], node2.imports[4])
Blueprint.connect(node11.exports[0], node12.imports[0])
Blueprint.connect(node12.exports[0], node2.imports[5])
Blueprint.connect(node13.exports[0], node15.imports[1])
Blueprint.connect(node14.exports[1], node7.imports[1])
Blueprint.connect(node15.exports[0], node19.imports[0])
Blueprint.connect(node15.exports[1], node19.imports[1])
Blueprint.connect(node15.exports[1], node16.imports[3])
Blueprint.connect(node16.exports[0], node17.imports[0])
Blueprint.connect(node19.exports[0], node18.imports[0])
Blueprint.connect(node19.exports[1], node2.imports[16])
