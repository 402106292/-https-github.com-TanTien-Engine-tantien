var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "depth_test" : true, "cull" : "disable" }

_editor.add_node(node0, 266, 565)

var node1 = Clear()

node1.masks = [ "color", "depth" ]
node1.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node1, 48.684168696775, 763.15400524212)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;

uniform UBO
{
    mat4 model;
    mat4 view;
    mat4 projection;    
};

void main()
{
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(model))) * aNormal;  
    TexCoords = aTexCoords;
    
    gl_Position = projection * view * vec4(FragPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

uniform sampler2D mat_diffuse;
uniform sampler2D mat_specular;

struct Material {
    //sampler2D diffuse;
    //sampler2D specular;
    float shininess;
}; 

struct DirLight {
    vec3 direction;
    
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
    
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

#define NR_POINT_LIGHTS 4

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform UBO
{
    vec3 viewPos;
    DirLight dirLight;
    PointLight pointLights[NR_POINT_LIGHTS];
    SpotLight spotLight;
    Material material;    
};

// function prototypes
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{    
    // properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    
    // == =====================================================
    // Our lighting is set up in 3 phases: directional, point lights and an optional flashlight
    // For each phase, a calculate function is defined that calculates the corresponding color
    // per lamp. In the main() function we take all the calculated colors and sum them up for
    // this fragment's final color.
    // == =====================================================
    // phase 1: directional lighting
    vec3 result = CalcDirLight(dirLight, norm, viewDir);
    // phase 2: point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);    
    // phase 3: spot light
    result += CalcSpotLight(spotLight, norm, FragPos, viewDir);    
    
    FragColor = vec4(result, 1.0);
}

// calculates the color when using a directional light.
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float dif = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // combine results
    vec3 ambient = light.ambient * vec3(texture(mat_diffuse, TexCoords));
    vec3 diffuse = light.diffuse * dif * vec3(texture(mat_diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(mat_specular, TexCoords));
    return (ambient + diffuse + specular);
}

// calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float dif = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.ambient * vec3(texture(mat_diffuse, TexCoords));
    vec3 diffuse = light.diffuse * dif * vec3(texture(mat_diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(mat_specular, TexCoords));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}

// calculates the color when using a spot light.
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float dif = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.ambient * vec3(texture(mat_diffuse, TexCoords));
    vec3 diffuse = light.diffuse * dif * vec3(texture(mat_diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(mat_specular, TexCoords));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}
"
node2.gs = ""
node2.execute()
node2.set_uniform("dirLight.direction", [ -0.2, -1, -0.3 ])
node2.set_uniform("dirLight.ambient", [ 0.050000000745058, 0.050000000745058, 0.050000000745058 ])
node2.set_uniform("dirLight.diffuse", [ 0.40000000596046, 0.40000000596046, 0.40000000596046 ])
node2.set_uniform("dirLight.specular", [ 0.5, 0.5, 0.5 ])
node2.set_uniform("pointLights[0].position", [ 0.69999998807907, 0.20000000298023, 2 ])
node2.set_uniform("pointLights[0].constant", [ 1 ])
node2.set_uniform("pointLights[0].linear", [ 0.090000003576279 ])
node2.set_uniform("pointLights[0].quadratic", [ 0.032000001519918 ])
node2.set_uniform("pointLights[0].ambient", [ 0.050000000745058, 0.050000000745058, 0.050000000745058 ])
node2.set_uniform("pointLights[0].diffuse", [ 0.80000001192093, 0.80000001192093, 0.80000001192093 ])
node2.set_uniform("pointLights[0].specular", [ 1, 1, 1 ])
node2.set_uniform("pointLights[1].position", [ 2.3, -3.3, -4 ])
node2.set_uniform("pointLights[1].constant", [ 1 ])
node2.set_uniform("pointLights[1].linear", [ 0.090000003576279 ])
node2.set_uniform("pointLights[1].quadratic", [ 0.032000001519918 ])
node2.set_uniform("pointLights[1].ambient", [ 0.050000000745058, 0.050000000745058, 0.050000000745058 ])
node2.set_uniform("pointLights[1].diffuse", [ 0.80000001192093, 0.80000001192093, 0.80000001192093 ])
node2.set_uniform("pointLights[1].specular", [ 1, 1, 1 ])
node2.set_uniform("pointLights[2].position", [ -4, 2, -12 ])
node2.set_uniform("pointLights[2].constant", [ 1 ])
node2.set_uniform("pointLights[2].linear", [ 0.090000003576279 ])
node2.set_uniform("pointLights[2].quadratic", [ 0.032000001519918 ])
node2.set_uniform("pointLights[2].ambient", [ 0.050000000745058, 0.050000000745058, 0.050000000745058 ])
node2.set_uniform("pointLights[2].diffuse", [ 0.80000001192093, 0.80000001192093, 0.80000001192093 ])
node2.set_uniform("pointLights[2].specular", [ 1, 1, 1 ])
node2.set_uniform("pointLights[3].position", [ 0, 0, -3 ])
node2.set_uniform("pointLights[3].constant", [ 1 ])
node2.set_uniform("pointLights[3].linear", [ 0.090000003576279 ])
node2.set_uniform("pointLights[3].quadratic", [ 0.032000001519918 ])
node2.set_uniform("pointLights[3].ambient", [ 0.050000000745058, 0.050000000745058, 0.050000000745058 ])
node2.set_uniform("pointLights[3].diffuse", [ 0.80000001192093, 0.80000001192093, 0.80000001192093 ])
node2.set_uniform("pointLights[3].specular", [ 1, 1, 1 ])
node2.set_uniform("spotLight.constant", [ 1 ])
node2.set_uniform("spotLight.linear", [ 0.090000003576279 ])
node2.set_uniform("spotLight.quadratic", [ 0.032000001519918 ])
node2.set_uniform("spotLight.ambient", [ 0, 0, 0 ])
node2.set_uniform("spotLight.diffuse", [ 1, 1, 1 ])
node2.set_uniform("spotLight.specular", [ 1, 1, 1 ])
node2.set_uniform("material.shininess", [ 32 ])

_editor.add_node(node2, -28.13900606574, -416.07408335719)

var node3 = VertexArray()

node3.data = [ -0.5, -0.5, -0.5, 0, 0, -1, 0, 0, 0.5, -0.5, -0.5, 0, 0, -1, 1, 0, 0.5, 0.5, -0.5, 0, 0, -1, 1, 1, 0.5, 0.5, -0.5, 0, 0, -1, 1, 1, -0.5, 0.5, -0.5, 0, 0, -1, 0, 1, -0.5, -0.5, -0.5, 0, 0, -1, 0, 0, -0.5, -0.5, 0.5, 0, 0, 1, 0, 0, 0.5, -0.5, 0.5, 0, 0, 1, 1, 0, 0.5, 0.5, 0.5, 0, 0, 1, 1, 1, 0.5, 0.5, 0.5, 0, 0, 1, 1, 1, -0.5, 0.5, 0.5, 0, 0, 1, 0, 1, -0.5, -0.5, 0.5, 0, 0, 1, 0, 0, -0.5, 0.5, 0.5, -1, 0, 0, 1, 0, -0.5, 0.5, -0.5, -1, 0, 0, 1, 1, -0.5, -0.5, -0.5, -1, 0, 0, 0, 1, -0.5, -0.5, -0.5, -1, 0, 0, 0, 1, -0.5, -0.5, 0.5, -1, 0, 0, 0, 0, -0.5, 0.5, 0.5, -1, 0, 0, 1, 0, 0.5, 0.5, 0.5, 1, 0, 0, 1, 0, 0.5, 0.5, -0.5, 1, 0, 0, 1, 1, 0.5, -0.5, -0.5, 1, 0, 0, 0, 1, 0.5, -0.5, -0.5, 1, 0, 0, 0, 1, 0.5, -0.5, 0.5, 1, 0, 0, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0, 1, 0, -0.5, -0.5, -0.5, 0, -1, 0, 0, 1, 0.5, -0.5, -0.5, 0, -1, 0, 1, 1, 0.5, -0.5, 0.5, 0, -1, 0, 1, 0, 0.5, -0.5, 0.5, 0, -1, 0, 1, 0, -0.5, -0.5, 0.5, 0, -1, 0, 0, 0, -0.5, -0.5, -0.5, 0, -1, 0, 0, 1, -0.5, 0.5, -0.5, 0, 1, 0, 0, 1, 0.5, 0.5, -0.5, 0, 1, 0, 1, 1, 0.5, 0.5, 0.5, 0, 1, 0, 1, 0, 0.5, 0.5, 0.5, 0, 1, 0, 1, 0, -0.5, 0.5, 0.5, 0, 1, 0, 0, 0, -0.5, 0.5, -0.5, 0, 1, 0, 0, 1 ]
node3.attrs = [ 3, 3, 2 ]

_editor.add_node(node3, 89.784036363636, 554.99683636364)

var node4 = Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 102.21896362305

_editor.add_node(node4, -266.57469947408, 589.44236363636)

var node5 = Rotate()

node5.angle = 0
node5.axis_x = 1
node5.axis_y = 0.3
node5.axis_z = 0.5

_editor.add_node(node5, -460.42982143452, 846.31688727089)

var node6 = Matrix()

_editor.add_node(node6, -661.37629885782, 895.82455351986)

var node7 = Texture()
node7.gamma_correction = false
node7.init_texture("resources/textures/container2.png")
node7.set_sampler("linear repeat")

_editor.add_node(node7, -493.88806912096, -371.21357625846)

var node8 = Array()

node8.list = [ [ 0, 0, 0 ], [ 2, 5, -15 ], [ -1.5, -2.2, -2.5 ], [ -3.8, -2, -12.3 ], [ 2.4, -0.4, -3.5 ], [ -1.7, 3, -7.5 ], [ 1.3, -2, -2.5 ], [ 1.5, 2, -2.5 ], [ 1.5, 0.2, -1.5 ], [ -1.3, 1, -1.5 ] ]

_editor.add_node(node8, -427.29169299308, 725.44785590434)

var node9 = Translate()

node9.dx = -1.3
node9.dy = 1
node9.dz = -1.5

_editor.add_node(node9, -284.00764496961, 855.27001366027)

var node10 = Texture()
node10.gamma_correction = false
node10.init_texture("resources/textures/container2_specular.png")
node10.set_sampler("linear repeat")

_editor.add_node(node10, -253.59817387506, -374.8919737293)

var node11 = Camera3D()

node11.position.set(1.5812811868422, 5.2809154655564, 1.8444331164479)
node11.yaw = -101.8
node11.pitch = -50.8
node11.zoom = 45
node11.update_camera_vectors()
node11.speed = 0.080249026417732

_editor.add_node(node11, -479.23482522613, 408.01306884794)

var node12 = Cos()

_editor.add_node(node12, -201.89371715875, -139.47645189627)

var node13 = Radians()

_editor.add_node(node13, -328.83536477254, -139.1791590264)

var node14 = Number()

node14.value = 12.5

_editor.add_node(node14, -457.9131889982, -148.33446618543)

var node15 = Cos()

_editor.add_node(node15, -199.768113278, -196.70424868557)

var node16 = Radians()

_editor.add_node(node16, -326.70976089179, -196.4069558157)

var node17 = Number()

node17.value = 15

_editor.add_node(node17, -455.78758511745, -217.82536228672)

var node18 = Array()

node18.list = [ 20, 40, 60, 80, 100, 120, 140, 160, 180, 200 ]

_editor.add_node(node18, -622.57750650973, 731.91681214566)

Blueprint.connect(node1.exports[0], node0.imports[0])
Blueprint.connect(node2.exports[0], node0.imports[1])
Blueprint.connect(node3.exports[0], node0.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[2])
Blueprint.connect(node5.exports[0], node9.imports[0])
Blueprint.connect(node6.exports[0], node5.imports[0])
Blueprint.connect(node7.exports[0], node2.imports[47])
Blueprint.connect(node8.exports[0], node9.imports[1])
Blueprint.connect(node9.exports[0], node2.imports[0])
Blueprint.connect(node10.exports[0], node2.imports[48])
Blueprint.connect(node11.exports[0], node2.imports[1])
Blueprint.connect(node11.exports[1], node4.imports[0])
Blueprint.connect(node11.exports[3], node2.imports[3])
Blueprint.connect(node11.exports[3], node2.imports[36])
Blueprint.connect(node11.exports[4], node2.imports[37])
Blueprint.connect(node12.exports[0], node2.imports[38])
Blueprint.connect(node13.exports[0], node12.imports[0])
Blueprint.connect(node14.exports[0], node13.imports[0])
Blueprint.connect(node15.exports[0], node2.imports[39])
Blueprint.connect(node16.exports[0], node15.imports[0])
Blueprint.connect(node17.exports[0], node16.imports[0])
Blueprint.connect(node18.exports[0], node5.imports[1])
