var node0 = Draw()
test.add_node(node0, 112.6602691073, 592.02207064843)

node0.set_prim_type("tri_strip")
node0.render_state = { "depth_test" : true, "depth_func" : "less", "cull" : "disable" }

var node1 = Clear()
test.add_node(node1, -235.20616450689, 821.44547068941)

node1.masks = [ "depth", "color" ]
node1.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

var node2 = Shader()
test.add_node(node2, -223.02084396036, 500.98962464862)

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} vs_out;

uniform UBO
{
    mat4 projection;
    mat4 view;
    mat4 model;

    vec3 lightPos;
    vec3 viewPos;    
};

void main()
{
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));   
    vs_out.TexCoords = aTexCoords;   
    
    vec3 T = normalize(mat3(model) * aTangent);
    vec3 B = normalize(mat3(model) * aBitangent);
    vec3 N = normalize(mat3(model) * aNormal);
    mat3 TBN = transpose(mat3(T, B, N));

    vs_out.TangentLightPos = TBN * lightPos;
    vs_out.TangentViewPos  = TBN * viewPos;
    vs_out.TangentFragPos  = TBN * vs_out.FragPos;
    
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform UBO
{
    float heightScale;    
};

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    // number of depth layers
    const float minLayers = 8;
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    vec2 P = viewDir.xy / viewDir.z * heightScale; 
    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = texture(depthMap, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = texture(depthMap, currentTexCoords).r;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  
    }
    
    return currentTexCoords;
}

void main()
{           
    // offset texture coordinates with Parallax Mapping
    vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
    vec2 texCoords = fs_in.TexCoords;
    
    texCoords = ParallaxMapping(fs_in.TexCoords,  viewDir);       
    if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
        discard;

    // obtain normal from normal map
    vec3 normal = texture(normalMap, texCoords).rgb;
    normal = normalize(normal * 2.0 - 1.0);   
   
    // get diffuse color
    vec3 color = texture(diffuseMap, texCoords).rgb;
    // ambient
    vec3 ambient = 0.1 * color;
    // diffuse
    vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * color;
    // specular    
    vec3 reflectDir = reflect(-lightDir, normal);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

    vec3 specular = vec3(0.2) * spec;
    FragColor = vec4(ambient + diffuse + specular, 1.0);
}
"
node2.execute()

var node3 = PrimitiveShape()
test.add_node(node3, -61.59003669645, 571.22430472335)

node3.type = "quad"
node3.layout = [ "position", "texture", "normal", "tangent_bitangent" ]

var node4 = Texture()
test.add_node(node4, -665.77154359778, 433.17806618088)

node4.initTexture("resources/textures/bricks2_normal.jpg")
node4.sampler_selected = 3

var node5 = Texture()
test.add_node(node5, -442.87683262093, 433.50267736584)

node5.initTexture("resources/textures/bricks2.jpg")
node5.sampler_selected = 3

var node6 = Perspective()
test.add_node(node6, -448.78666929949, 806.55757003711)

node6.fovy = 45
node6.aspect = 0
node6.znear = 0.10000000149012
node6.zfar = 100

var node7 = Camera3D()
test.add_node(node7, -680.71588643819, 779.63233375858)

node7.position.set(0.65770197180239, -0.49830661589627, 2.5018698946975)
node7.yaw = -104.9
node7.pitch = 10.2
node7.zoom = 45
node7.update_camera_vectors()

var node8 = Texture()
test.add_node(node8, -898.23686906632, 435.03630216515)

node8.initTexture("resources/textures/bricks2_disp.jpg")
node8.sampler_selected = 3

var node9 = Number3()
test.add_node(node9, -649.35635423969, 631.55999766207)

node9.value.set(0.5, 1, 0.30000001192093)

var node10 = Number()
test.add_node(node10, -498.15807362937, 577.71171913289)

node10.value = 0.10000000149012

Blueprint.connect(node1.exports[0], node0.imports[0])
Blueprint.connect(node2.exports[0], node0.imports[1])
Blueprint.connect(node3.exports[0], node0.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[7])
Blueprint.connect(node5.exports[0], node2.imports[8])
Blueprint.connect(node6.exports[0], node2.imports[0])
Blueprint.connect(node7.exports[0], node2.imports[1])
Blueprint.connect(node7.exports[1], node6.imports[0])
Blueprint.connect(node7.exports[3], node2.imports[4])
Blueprint.connect(node8.exports[0], node2.imports[6])
Blueprint.connect(node9.exports[0], node2.imports[3])
Blueprint.connect(node10.exports[0], node2.imports[5])
