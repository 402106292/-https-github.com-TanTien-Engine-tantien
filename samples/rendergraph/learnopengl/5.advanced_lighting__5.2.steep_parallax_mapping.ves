var node0 = ::rendergraph::nodes::draw::Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "depth_test" : true, "depth_func" : "less", "cull" : "disable" }
node0.skip = false

_editor.add_node(node0, 112.6602691073, 592.02207064843)

var node1 = ::rendergraph::nodes::clear::Clear()

node1.masks = [ "depth", "color" ]
node1.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node1, -235.20616450689, 821.44547068941)

var node2 = ::rendergraph::nodes::shader::Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} vs_out;

uniform UBO
{
    mat4 projection;
    mat4 view;
    mat4 model;

    vec3 lightPos;
    vec3 viewPos;    
};

void main()
{
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));   
    vs_out.TexCoords = aTexCoords;   
    
    vec3 T = normalize(mat3(model) * aTangent);
    vec3 B = normalize(mat3(model) * aBitangent);
    vec3 N = normalize(mat3(model) * aNormal);
    mat3 TBN = transpose(mat3(T, B, N));

    vs_out.TangentLightPos = TBN * lightPos;
    vs_out.TangentViewPos  = TBN * viewPos;
    vs_out.TangentFragPos  = TBN * vs_out.FragPos;
    
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node2.tcs = ""
node2.tes = ""
node2.gs = ""
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform UBO
{
    float heightScale;    
};

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    // number of depth layers
    const float minLayers = 8;
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    vec2 P = viewDir.xy / viewDir.z * heightScale; 
    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = texture(depthMap, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = texture(depthMap, currentTexCoords).r;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  
    }
    
    return currentTexCoords;
}

void main()
{           
    // offset texture coordinates with Parallax Mapping
    vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
    vec2 texCoords = fs_in.TexCoords;
    
    texCoords = ParallaxMapping(fs_in.TexCoords,  viewDir);       
    if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
        discard;

    // obtain normal from normal map
    vec3 normal = texture(normalMap, texCoords).rgb;
    normal = normalize(normal * 2.0 - 1.0);   
   
    // get diffuse color
    vec3 color = texture(diffuseMap, texCoords).rgb;
    // ambient
    vec3 ambient = 0.1 * color;
    // diffuse
    vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * color;
    // specular    
    vec3 reflectDir = reflect(-lightDir, normal);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

    vec3 specular = vec3(0.2) * spec;
    FragColor = vec4(ambient + diffuse + specular, 1.0);
}
"
node2.cs = ""
node2.render_gen()

_editor.add_node(node2, -223.02084396036, 500.98962464862)

var node3 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node3.type = "quad"
node3.layout = [ "position", "texture", "normal", "tangent_bitangent" ]
node3.shape_params = {  }

_editor.add_node(node3, -61.59003669645, 571.22430472335)

var node4 = ::rendergraph::nodes::texture::Texture()
node4.query_param("unif_name").value = "u_tex"
node4.gamma_correction = false
node4.init_texture("resources/textures/bricks2_normal.jpg")

_editor.add_node(node4, -665.77154359778, 433.17806618088)

var node5 = ::rendergraph::nodes::texture::Texture()
node5.query_param("unif_name").value = "u_tex"
node5.gamma_correction = false
node5.init_texture("resources/textures/bricks2.jpg")

_editor.add_node(node5, -442.87683262093, 433.50267736584)

var node6 = ::blueprint::nodes::perspective::Perspective()

node6.fovy = 45
node6.aspect = 0
node6.znear = 0.10000000149012
node6.zfar = 100

_editor.add_node(node6, -448.78666929949, 806.55757003711)

var node7 = ::blueprint::nodes::camera3d::Camera3d()

node7.cam.position.set(0.65770197180239, -0.49830661589627, 2.5018698946975)
node7.cam.yaw = -104.9
node7.cam.pitch = 10.2
node7.cam.zoom = 45
node7.cam.update_vectors()
node7.speed = 0.01

_editor.add_node(node7, -680.71588643819, 779.63233375858)

var node8 = ::rendergraph::nodes::texture::Texture()
node8.query_param("unif_name").value = "u_tex"
node8.gamma_correction = false
node8.init_texture("resources/textures/bricks2_disp.jpg")

_editor.add_node(node8, -898.23686906632, 435.03630216515)

var node9 = ::blueprint::nodes::number3::Number3()

node9.value.set(0.5, 1, 0.30000001192093)

_editor.add_node(node9, -649.35635423969, 631.55999766207)

var node10 = ::blueprint::nodes::number::Number()

node10.value = 0.10000000149012

_editor.add_node(node10, -498.15807362937, 577.71171913289)

Blueprint.connect(node7, "zoom", node6, "fovy")
Blueprint.connect(node6, "mat", node2, "projection")
Blueprint.connect(node7, "mat", node2, "view")
Blueprint.connect(node9, "v3", node2, "lightPos")
Blueprint.connect(node7, "pos", node2, "viewPos")
Blueprint.connect(node10, "v", node2, "heightScale")
Blueprint.connect(node8, "tex", node2, "depthMap")
Blueprint.connect(node4, "tex", node2, "normalMap")
Blueprint.connect(node5, "tex", node2, "diffuseMap")
Blueprint.connect(node1, "next", node0, "prev")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
