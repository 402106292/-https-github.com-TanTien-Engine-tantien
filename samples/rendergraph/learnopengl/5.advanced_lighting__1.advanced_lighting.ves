var node0 = Clear()
test.add_node(node0, 156.90238929685, 219.18522882334)

node0.masks = [ "color", "depth" ]
node0.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

var node1 = Draw()
test.add_node(node1, 384.35404057273, 85.636402239849)

node1.prim_type = "triangles"
node1.render_state = { "depth_test" : true, "cull" : "disable" }

var node2 = Shader()
test.add_node(node2, 31.392354250067, -40.131581182307)

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

// declare an interface block; see 'Advanced GLSL' for what these are.
out VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} vs_out;

uniform UBO
{
	mat4 projection;
	mat4 view;	
};

void main()
{
    vs_out.FragPos = aPos;
    vs_out.Normal = aNormal;
    vs_out.TexCoords = aTexCoords;
    gl_Position = projection * view * vec4(aPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

uniform sampler2D floorTexture;

uniform UBO
{
	vec3 lightPos;
	vec3 viewPos;
	bool blinn;	
};

void main()
{           
    vec3 color = texture(floorTexture, fs_in.TexCoords).rgb;
    // ambient
    vec3 ambient = 0.05 * color;
    // diffuse
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    vec3 normal = normalize(fs_in.Normal);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * color;
    // specular
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    if(blinn)
    {
        vec3 halfwayDir = normalize(lightDir + viewDir);  
        spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
    }
    else
    {
        vec3 reflectDir = reflect(-lightDir, normal);
        spec = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);
    }
    vec3 specular = vec3(0.3) * spec; // assuming bright white light color
    FragColor = vec4(ambient + diffuse + specular, 1.0);
}
"
node2.execute()
node2.setUniform("lightPos", [ 0.16230723261833, 0.15119603276253, 0.10675159096718 ])
node2.setUniform("viewPos", [ 0.28452935814857, 0.55119603872299, 0.61786270141602 ])
node2.setUniform("blinn", [ 0 ])

var node3 = VertexArray()
test.add_node(node3, 239.2417436206, 54.33978971928)

node3.data = [ 10, -0.5, 10, 0, 1, 0, 10, 0, -10, -0.5, 10, 0, 1, 0, 0, 0, -10, -0.5, -10, 0, 1, 0, 0, 10, 10, -0.5, 10, 0, 1, 0, 10, 0, -10, -0.5, -10, 0, 1, 0, 0, 10, 10, -0.5, -10, 0, 1, 0, 10, 10 ]
node3.attrs = [ 3, 3, 2 ]

var node4 = Perspective()
test.add_node(node4, -232.64462809917, 215.03695102794)

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 100

var node5 = LookAt()
test.add_node(node5, -228.16132777816, 123.21180247251)

node5.eye.set(0, 0, 3)
node5.center.set(0, 0, 0)
node5.up.set(0, 1, 0)

var node6 = Texture()
test.add_node(node6, -224.53483258756, 6.5953025564666)

node6.initTexture("resources/textures/wood.png")
node6.sampler_selected = 3

Blueprint.connect(node0.exports[0], node1.imports[0])
Blueprint.connect(node2.exports[0], node1.imports[1])
Blueprint.connect(node3.exports[0], node1.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[0])
Blueprint.connect(node5.exports[0], node2.imports[1])
Blueprint.connect(node6.exports[0], node2.imports[5])
