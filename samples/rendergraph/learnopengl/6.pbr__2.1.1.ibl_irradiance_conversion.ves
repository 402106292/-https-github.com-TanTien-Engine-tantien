var node0 = Clear()
_editor.add_node(node0, -303.38767843727, 804.93296222935)

node0.masks = [ "depth", "color" ]
node0.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

var node1 = Draw()
_editor.add_node(node1, -51, 593.5)

node1.set_prim_type("triangles")
node1.render_state = { "depth_test" : true, "depth_func" : "less", "cull" : "back" }

var node2 = Shader()
_editor.add_node(node2, -397.16704193754, -13.140775401506)

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 WorldPos;
out vec3 Normal;

uniform UBO
{
	mat4 projection;
	mat4 view;
	mat4 model;	
};

void main()
{
    WorldPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(model) * aNormal;   

    gl_Position =  projection * view * vec4(WorldPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;
in vec3 WorldPos;
in vec3 Normal;

uniform UBO
{
	// material parameters
	vec3 albedo;
	float metallic;
	float roughness;
	float ao;

	// lights
	vec3 lightPositions[4];
	vec3 lightColors[4];

	vec3 camPos;
};

const float PI = 3.14159265359;
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom, 0.0000001); // prevent divide by zero for roughness=0.0 and NdotH=1.0
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}
// ----------------------------------------------------------------------------
void main()
{       
    vec3 N = normalize(Normal);
    vec3 V = normalize(camPos - WorldPos);

    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i) 
    {
        // calculate per-light radiance
        vec3 L = normalize(lightPositions[i] - WorldPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);   
        float G   = GeometrySmith(N, V, L, roughness);      
        vec3 F    = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
           
        vec3 nominator    = NDF * G * F; 
        float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
        vec3 specular = nominator / max(denominator, 0.001); // prevent divide by zero for NdotV=0.0 or NdotL=0.0
        
        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;     

        // scale light by NdotL
        float NdotL = max(dot(N, L), 0.0);        

        // add to outgoing radiance Lo
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    }   
    
    // ambient lighting (note that the next IBL tutorial will replace 
    // this ambient lighting with environment lighting).
    vec3 ambient = vec3(0.03) * albedo * ao;

    vec3 color = ambient + Lo;

    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);
}
"
node2.execute()
node2.setUniform("albedo", [ 0.5, 0, 0 ])
node2.setUniform("ao", [ 1 ])
node2.setUniform("lightPositions[0]", [ -10, 10, 10 ])
node2.setUniform("lightPositions[1]", [ 10, 10, 10 ])
node2.setUniform("lightPositions[2]", [ -10, -10, 10 ])
node2.setUniform("lightPositions[3]", [ 10, -10, 10 ])
node2.setUniform("lightColors[0]", [ 300, 300, 300 ])
node2.setUniform("lightColors[1]", [ 300, 300, 300 ])
node2.setUniform("lightColors[2]", [ 300, 300, 300 ])
node2.setUniform("lightColors[3]", [ 300, 300, 300 ])

var node3 = PrimitiveShape()
_editor.add_node(node3, -231.47232292876, 502.84410764292)

node3.type = "sphere"
node3.layout = [ "position", "normal" ]

var node4 = Perspective()
_editor.add_node(node4, -733.34811374976, 659.17193283298)

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 100

var node5 = Camera3D()
_editor.add_node(node5, -907.18250114434, 483.8883574907)

node5.position.set(-2.0833028954365, 1.744076305107, 21.570873673811)
node5.yaw = -1166.9
node5.pitch = -7.2
node5.zoom = 45
node5.update_camera_vectors()
node5.speed = 0.35880517959595

var node6 = For()
_editor.add_node(node6, 194.42221763255, 598.2649711854)

node6.start = 0
node6.end = 7

var node7 = Translate()
_editor.add_node(node7, -664.48324813534, 204.08319612336)

node7.dx = 6.25
node7.dy = 6.25
node7.dz = 0

var node8 = Matrix()
_editor.add_node(node8, -790.35250328923, 289.53033074482)

var node9 = For()
_editor.add_node(node9, 443, 599.5)

node9.start = 0
node9.end = 7

var node10 = Divide()
_editor.add_node(node10, 778.46466448305, 286.51801919656)

var node11 = Divide()
_editor.add_node(node11, 448.5059962251, 283.4289767011)

var node12 = Clamp()
_editor.add_node(node12, 584.61301386352, 271.62706446635)

node12.min = 0.05
node12.max = 1

var node13 = Draw()
_editor.add_node(node13, -210.824827, 1526.7601465446)

node13.set_prim_type("triangles")
node13.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

var node14 = Pass()
_editor.add_node(node14, 276.75071422327, 1574.3742604557)

node14.once = true

var node15 = Shader()
_editor.add_node(node15, -401.79191738021, 1557.7810142062)

node15.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out vec3 WorldPos;

uniform UBO
{
    mat4 projection;
    mat4 view;    
};

void main()
{
    WorldPos = aPos;
    gl_Position =  projection * view * vec4(WorldPos, 1.0);
}
"
node15.fs = "
#version 330 core
out vec4 FragColor;
in vec3 WorldPos;

uniform sampler2D equirectangularMap;

const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 SampleSphericalMap(vec3 v)
{
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

void main()
{       
    vec2 uv = SampleSphericalMap(normalize(WorldPos));
    vec3 color = texture(equirectangularMap, uv).rgb;
    
    FragColor = vec4(color, 1.0);
    //FragColor = vec4(1,1,0, 1.0);
}
"
node15.execute()

var node16 = PrimitiveShape()
_editor.add_node(node16, -394.83103603082, 1423.7456986508)

node16.type = "cube"
node16.layout = [ "position" ]

var node17 = Perspective()
_editor.add_node(node17, -608.76743687972, 1679.5855045399)

node17.fovy = 90
node17.aspect = 1
node17.znear = 0.1
node17.zfar = 10

var node18 = Clear()
_editor.add_node(node18, -418.53390179914, 1706.3538434784)

node18.masks = [ "color" ]
node18.values = { "color" : [ 255, 255, 255, 255 ] }

var node19 = RenderTarget()
_editor.add_node(node19, -425.69322175206, 1126.7644498459)

node19.width = 512
node19.height = 512
node19.rbo_depth = false
node19.rbo_color = false

var node20 = Texture()
_editor.add_node(node20, -628.8639514092, 1399.7177524708)
node20.gamma_correction = false
node20.init_texture("resources/textures/hdr/newport_loft.hdr")
node20.set_sampler("linear repeat")

var node21 = For()
_editor.add_node(node21, 7.1346417895149, 1552.3675167654)

node21.start = 0
node21.end = 6

var node22 = Fetch()
_editor.add_node(node22, -581.73466967732, 1175.8420132006)

var node23 = Custom()
_editor.add_node(node23, -732.19213033801, 1527.9438266754)

node23.code = "
import \"maths\" for Matrix44
import \"maths.vector\" for Vector3
var capture_views = [
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 1.0,  0.0,  0.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3(-1.0,  0.0,  0.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  1.0,  0.0), Vector3(0.0,  0.0,  1.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0, -1.0,  0.0), Vector3(0.0,  0.0, -1.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  0.0,  1.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  0.0, -1.0), Vector3(0.0, -1.0,  0.0))
]
_editor.script_stack.clear()
_editor.script_stack.add(capture_views)
"
node23.init_ports(0, 1)

var node24 = Custom()
_editor.add_node(node24, -812.90593243376, 127.18911322842)

node24.code = "
import \"maths.vector\" for Vector3
if (_editor.script_stack.count == 4)
{
    var x_i = _editor.script_stack[0]
    var x_n = _editor.script_stack[1]
    var y_i = _editor.script_stack[2]
    var y_n = _editor.script_stack[3]

    var space = 2.5
    var x = (x_i - x_n / 2) * space
    var y = (y_i - y_n / 2) * space

    _editor.script_stack.clear()
    _editor.script_stack.add(Vector3(x, y, 0))
}
"
node24.init_ports(4, 1)

var node25 = Fetch()
_editor.add_node(node25, -578.22866879974, 1546.441927614)

var node26 = Draw()
_editor.add_node(node26, 859.02442333661, 1278.2686045515)

node26.set_prim_type("triangles")
node26.render_state = { "depth_test" : true, "depth_func" : "lequal", "cull" : "disable" }

var node27 = Shader()
_editor.add_node(node27, 611.21259112752, 1340.7218065168)

node27.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

uniform UBO
{
    mat4 projection;
    mat4 view;    
};

out vec3 WorldPos;

void main()
{
    WorldPos = aPos;

    mat4 rotView = mat4(mat3(view));
    vec4 clipPos = projection * rotView * vec4(WorldPos, 1.0);

    gl_Position = clipPos.xyww;
}
"
node27.fs = "
#version 330 core
out vec4 FragColor;
in vec3 WorldPos;

uniform samplerCube environmentMap;

void main()
{       
    vec3 envColor = texture(environmentMap, WorldPos).rgb;
    
    // HDR tonemap and gamma correct
    envColor = envColor / (envColor + vec3(1.0));
    envColor = pow(envColor, vec3(1.0/2.2)); 
    
    FragColor = vec4(envColor, 1.0);
}
"
node27.execute()

var node28 = PrimitiveShape()
_editor.add_node(node28, 612.14832271402, 1215.0541800323)

node28.type = "cube"
node28.layout = [ "position" ]

var node29 = Cubemap()
_editor.add_node(node29, -745.69992388719, 1054.3599903791)

node29.init_texture(512, 512, "rgb16f")

Blueprint.connect(node0.exports[0], node9.imports[0])
Blueprint.connect(node1.exports[0], node6.imports[1])
Blueprint.connect(node2.exports[0], node1.imports[1])
Blueprint.connect(node3.exports[0], node1.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[0])
Blueprint.connect(node4.exports[0], node27.imports[0])
Blueprint.connect(node5.exports[0], node2.imports[1])
Blueprint.connect(node5.exports[0], node27.imports[1])
Blueprint.connect(node5.exports[1], node4.imports[0])
Blueprint.connect(node5.exports[3], node2.imports[15])
Blueprint.connect(node6.exports[0], node9.imports[1])
Blueprint.connect(node6.exports[1], node11.imports[0])
Blueprint.connect(node6.exports[1], node24.imports[1])
Blueprint.connect(node6.exports[2], node11.imports[1])
Blueprint.connect(node6.exports[2], node24.imports[2])
Blueprint.connect(node7.exports[0], node2.imports[2])
Blueprint.connect(node8.exports[0], node7.imports[0])
Blueprint.connect(node9.exports[0], node26.imports[0])
Blueprint.connect(node9.exports[1], node10.imports[0])
Blueprint.connect(node9.exports[1], node24.imports[3])
Blueprint.connect(node9.exports[2], node10.imports[1])
Blueprint.connect(node9.exports[2], node24.imports[4])
Blueprint.connect(node10.exports[0], node2.imports[4])
Blueprint.connect(node11.exports[0], node12.imports[0])
Blueprint.connect(node12.exports[0], node2.imports[5])
Blueprint.connect(node13.exports[0], node21.imports[1])
Blueprint.connect(node15.exports[0], node13.imports[1])
Blueprint.connect(node16.exports[0], node13.imports[2])
Blueprint.connect(node17.exports[0], node15.imports[0])
Blueprint.connect(node18.exports[0], node13.imports[0])
Blueprint.connect(node19.exports[0], node13.imports[3])
Blueprint.connect(node20.exports[0], node15.imports[2])
Blueprint.connect(node21.exports[0], node14.imports[0])
Blueprint.connect(node21.exports[1], node22.imports[1])
Blueprint.connect(node21.exports[1], node25.imports[1])
Blueprint.connect(node22.exports[0], node19.imports[0])
Blueprint.connect(node23.exports[1], node25.imports[0])
Blueprint.connect(node24.exports[1], node7.imports[1])
Blueprint.connect(node25.exports[0], node15.imports[1])
Blueprint.connect(node27.exports[0], node26.imports[1])
Blueprint.connect(node28.exports[0], node26.imports[2])
Blueprint.connect(node29.exports[0], node27.imports[2])
Blueprint.connect(node29.exports[1], node22.imports[0])
