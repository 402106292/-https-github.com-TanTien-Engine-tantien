var node0 = Clear()

node0.masks = [ "depth", "color" ]
node0.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node0, -303.38767843727, 804.93296222935)

var node1 = Draw()

node1.set_prim_type("triangles")
node1.render_state = { "depth_test" : true, "depth_func" : "less", "cull" : "back" }

_editor.add_node(node1, -51, 593.5)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 WorldPos;
out vec3 Normal;

uniform UBO
{
	mat4 projection;
	mat4 view;
	mat4 model;	
};

void main()
{
    WorldPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(model) * aNormal;   

    gl_Position =  projection * view * vec4(WorldPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;
in vec3 WorldPos;
in vec3 Normal;

uniform UBO
{
	// material parameters
	vec3 albedo;
	float metallic;
	float roughness;
	float ao;

	// lights
	vec3 lightPositions[4];
	vec3 lightColors[4];

	vec3 camPos;
};

const float PI = 3.14159265359;
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom, 0.0000001); // prevent divide by zero for roughness=0.0 and NdotH=1.0
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}
// ----------------------------------------------------------------------------
void main()
{       
    vec3 N = normalize(Normal);
    vec3 V = normalize(camPos - WorldPos);

    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i) 
    {
        // calculate per-light radiance
        vec3 L = normalize(lightPositions[i] - WorldPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);   
        float G   = GeometrySmith(N, V, L, roughness);      
        vec3 F    = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
           
        vec3 nominator    = NDF * G * F; 
        float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
        vec3 specular = nominator / max(denominator, 0.001); // prevent divide by zero for NdotV=0.0 or NdotL=0.0
        
        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;     

        // scale light by NdotL
        float NdotL = max(dot(N, L), 0.0);        

        // add to outgoing radiance Lo
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    }   
    
    // ambient lighting (note that the next IBL tutorial will replace 
    // this ambient lighting with environment lighting).
    vec3 ambient = vec3(0.03) * albedo * ao;

    vec3 color = ambient + Lo;

    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);
}
"
node2.gs = ""
node2.render_gen()
node2.set_uniform("albedo", [ 0.5, 0, 0 ])
node2.set_uniform("ao", [ 1 ])
node2.set_uniform("lightPositions[0]", [ -10, 10, 10 ])
node2.set_uniform("lightPositions[1]", [ 10, 10, 10 ])
node2.set_uniform("lightPositions[2]", [ -10, -10, 10 ])
node2.set_uniform("lightPositions[3]", [ 10, -10, 10 ])
node2.set_uniform("lightColors[0]", [ 300, 300, 300 ])
node2.set_uniform("lightColors[1]", [ 300, 300, 300 ])
node2.set_uniform("lightColors[2]", [ 300, 300, 300 ])
node2.set_uniform("lightColors[3]", [ 300, 300, 300 ])

_editor.add_node(node2, -397.16704193754, -13.140775401506)

var node3 = PrimitiveShape()

node3.type = "sphere"
node3.layout = [ "position", "normal" ]

_editor.add_node(node3, -231.47232292876, 502.84410764292)

var node4 = Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 100

_editor.add_node(node4, -733.34811374976, 659.17193283298)

var node5 = Camera3d()

node5.cam.position.set(-2.0833028954365, 1.744076305107, 21.570873673811)
node5.cam.yaw = -1166.9
node5.cam.pitch = -7.2
node5.cam.zoom = 45
node5.cam.update_vectors()
node5.speed = 0.35880517959595

_editor.add_node(node5, -907.18250114434, 483.8883574907)

var node6 = Loop()

node6.start = 0
node6.end = 7

_editor.add_node(node6, 194.42221763255, 598.2649711854)

var node7 = Translate()

node7.dx = 6.25
node7.dy = 6.25
node7.dz = 0

_editor.add_node(node7, -664.48324813534, 204.08319612336)

var node8 = Matrix()

_editor.add_node(node8, -790.35250328923, 289.53033074482)

var node9 = Loop()

node9.start = 0
node9.end = 7

_editor.add_node(node9, 474.9, 553.3)

var node10 = Divide()

_editor.add_node(node10, 778.46466448305, 286.51801919656)

var node11 = Divide()

_editor.add_node(node11, 448.5059962251, 283.4289767011)

var node12 = Clamp()

node12.min = 0.05
node12.max = 1

_editor.add_node(node12, 584.61301386352, 271.62706446635)

var node13 = Texture()
node13.gamma_correction = false
node13.init_texture("resources/textures/hdr/newport_loft.hdr")


_editor.add_node(node13, 484.73265029081, 1207.7693353708)

var node14 = Custom()

node14.code = "
import \"maths.vector\" for Vector3
if (_editor.script_stack.count == 4)
{
    var x_i = _editor.script_stack[0]
    var x_n = _editor.script_stack[1]
    var y_i = _editor.script_stack[2]
    var y_n = _editor.script_stack[3]

    var space = 2.5
    var x = (x_i - x_n / 2) * space
    var y = (y_i - y_n / 2) * space

    _editor.script_stack.clear()
    _editor.script_stack.add(Vector3(x, y, 0))
}
"
node14.init_ports(4, 1)

_editor.add_node(node14, -812.90593243376, 127.18911322842)

var node15 = Subgraph()
node15.load_from_file(_editor, "assets/blueprints/rendergraph/equirectangular_to_cubemap.ves")

_editor.add_node(node15, 796.00860281038, 1220.7973339574)

var node16 = Subgraph()
node16.load_from_file(_editor, "assets/blueprints/rendergraph/draw_skybox.ves")
node16.set_prop_value("tonemap", 1)
node16.set_prop_value("gamma_correct", 1)

_editor.add_node(node16, 1146.0922038555, 1196.9984063273)

var node17 = Pass()

node17.once = false

_editor.add_node(node17, 1513.8875085742, 1206.7759571086)

Blueprint.connect(node0, "next", node9, "prev")
Blueprint.connect(node1, "next", node6, "do")
Blueprint.connect(node2, "out", node1, "shader")
Blueprint.connect(node3, "out", node1, "va")
Blueprint.connect(node4, "mat", node2, "projection")
Blueprint.connect(node4, "mat", node16, "projection")
Blueprint.connect(node5, "mat", node2, "view")
Blueprint.connect(node5, "zoom", node4, "fovy")
Blueprint.connect(node5, "rot", node16, "view")
Blueprint.connect(node5, "pos", node2, "camPos")
Blueprint.connect(node6, "next", node9, "do")
Blueprint.connect(node6, "index", node11, "a")
Blueprint.connect(node6, "index", node14, "in0")
Blueprint.connect(node6, "num", node11, "b")
Blueprint.connect(node6, "num", node14, "in1")
Blueprint.connect(node7, "mat", node2, "model")
Blueprint.connect(node8, "mat", node7, "mat")
Blueprint.connect(node9, "next", node16, "prev")
Blueprint.connect(node9, "index", node10, "a")
Blueprint.connect(node9, "index", node14, "in2")
Blueprint.connect(node9, "num", node10, "b")
Blueprint.connect(node9, "num", node14, "in3")
Blueprint.connect(node10, "v", node2, "metallic")
Blueprint.connect(node11, "v", node12, "v")
Blueprint.connect(node12, "v", node2, "roughness")
Blueprint.connect(node13, "tex", node15, "equirectangularMap")
Blueprint.connect(node14, "out0", node7, "offset")
Blueprint.connect(node15, "tex", node16, "skybox")
Blueprint.connect(node16, "next", node17, "prev")
