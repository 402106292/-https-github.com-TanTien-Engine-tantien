var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "front", "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less" }

_editor.add_node(node0, -1401.9242056538, 580.37564076121)

var node1 = Shader()

node1.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec3 FragPos;
out vec2 TexCoords;
out vec3 Normal;

uniform UBO
{
uniform bool invertedNormals;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
};

void main()
{
    vec4 viewPos = view * model * vec4(aPos, 1.0);
    FragPos = viewPos.xyz; 
    TexCoords = aTexCoords;
    
    mat3 normalMatrix = transpose(inverse(mat3(view * model)));
    Normal = normalMatrix * (invertedNormals ? -aNormal : aNormal);
    
    gl_Position = projection * viewPos;
}
"
node1.fs = "
#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec3 gAlbedo;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;

void main()
{    
    // store the fragment position vector in the first gbuffer texture
    gPosition = FragPos;
    // also store the per-fragment normals into the gbuffer
    gNormal = normalize(Normal);
    // and the diffuse per-fragment color
    gAlbedo.rgb = vec3(0.95);
}
"
node1.gs = ""
node1.execute()
node1.set_uniform("invertedNormals", [ 1 ])

_editor.add_node(node1, -1686.82868361, 537.75318556)

var node2 = PrimitiveShape()

node2.type = "cube"
node2.layout = [ "position", "normal", "texture" ]

_editor.add_node(node2, -1700.4045861133, 390.53323629282)

var node3 = Perspective()

node3.fovy = 45
node3.aspect = 0
node3.znear = 0.1
node3.zfar = 100

_editor.add_node(node3, -1659.5750835156, 169.08908390428)

var node4 = Camera3D()

node4.position.set(2.9275415847963, 3.4257589476801, -4.4182111362291)
node4.yaw = 130.2
node4.pitch = -34.3
node4.zoom = 45
node4.update_camera_vectors()
node4.speed = 0.27363935112953

_editor.add_node(node4, -1918.518198901, 193.11241379891)

var node5 = Clear()

node5.masks = [ "depth", "color" ]
node5.values = { "color" : [ 0, 0, 0, 255 ] }

_editor.add_node(node5, -1715.0485583161, 718.32356807654)

var node6 = Translate()

node6.dx = 0
node6.dy = 7
node6.dz = 0

_editor.add_node(node6, -1878.0342086306, 526.23273206971)

var node7 = Scale()

node7.sx = 7.5
node7.sy = 7.5
node7.sz = 7.5

_editor.add_node(node7, -2031.4908083895, 507.42743994813)

var node8 = Pass()

node8.once = false

_editor.add_node(node8, -170.4709474426, 597.91144585079)

var node9 = RenderTarget()

node9.width = 1024
node9.height = 1024

_editor.add_node(node9, -965.35579367255, -21.153362486896)

var node10 = Texture()
node10.gamma_correction = false
node10.init_texture(1024, 1024, "rgba16f")
node10.set_sampler("linear repeat")

_editor.add_node(node10, -1226.0157369071, -154.63894728592)

var node11 = Texture()
node11.gamma_correction = false
node11.init_texture(1024, 1024, "rgba16f")
node11.set_sampler("linear repeat")

_editor.add_node(node11, -1227.4204235625, -291.73992812789)

var node12 = Texture()
node12.gamma_correction = false
node12.init_texture(1024, 1024, "rgba8")
node12.set_sampler("linear repeat")

_editor.add_node(node12, -1226.5310248313, -433.19889696575)

var node13 = RenderBuffer()

node13.init_rbo(1024, 1024, "depth_component")

_editor.add_node(node13, -1219.201321549, -31.849163146555)

var node14 = Draw()

node14.set_prim_type("tri_strip")
node14.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less" }

_editor.add_node(node14, 757.61062753091, -1035.9455550128)

var node15 = Shader()

node15.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;

out vec2 TexCoords;

void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}
"
node15.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D ssao;

struct Light {
    vec3 Position;
    vec3 Color;
    
    float Linear;
    float Quadratic;
};

uniform UBO
{
	Light light;	
};

void main()
{             
    // retrieve data from gbuffer
    vec3 FragPos = texture(gPosition, TexCoords).rgb;
    vec3 Normal = texture(gNormal, TexCoords).rgb;
    vec3 Diffuse = texture(gAlbedo, TexCoords).rgb;
    float AmbientOcclusion = texture(ssao, TexCoords).r;
    
    // then calculate lighting as usual
    vec3 ambient = vec3(0.3 * Diffuse * AmbientOcclusion);
    vec3 lighting  = ambient; 
    vec3 viewDir  = normalize(-FragPos); // viewpos is (0.0.0)
    // diffuse
    vec3 lightDir = normalize(light.Position - FragPos);
    vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * light.Color;
    // specular
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(Normal, halfwayDir), 0.0), 8.0);
    vec3 specular = light.Color * spec;
    // attenuation
    float distance = length(light.Position - FragPos);
    float attenuation = 1.0 / (1.0 + light.Linear * distance + light.Quadratic * distance * distance);
    diffuse *= attenuation;
    specular *= attenuation;
    lighting += diffuse + specular;

    FragColor = vec4(lighting, 1.0);
}
"
node15.gs = ""
node15.execute()
node15.set_uniform("light.Color", [ 0.2, 0.2, 0.7 ])
node15.set_uniform("light.Linear", [ 0.09 ])
node15.set_uniform("light.Quadratic", [ 0.032 ])

_editor.add_node(node15, 334.52814148315, -1181.7351338639)

var node16 = Clear()

node16.masks = [ "depth", "color" ]
node16.values = { "color" : [ 0, 0, 0, 255 ] }

_editor.add_node(node16, 570.42037967935, -998.71967126457)

var node17 = Draw()

node17.set_prim_type("tri_strip")
node17.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less" }

_editor.add_node(node17, 732.33890811453, -26.217808827344)

var node18 = Shader()

node18.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;

out vec2 TexCoords;

void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}
"
node18.fs = "
#version 330 core
out float FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D texNoise;

const int KERNEL_SIZE = 64;

uniform UBO
{
	vec3 samples[KERNEL_SIZE];
	mat4 projection;	
};

// parameters (you'd probably want to use them as uniforms to more easily tweak the effect)
float radius = 0.5;
float bias = 0.025;

// tile noise texture over screen based on screen dimensions divided by noise size
const vec2 noiseScale = vec2(800.0/4.0, 600.0/4.0); 

void main()
{
    // get input for SSAO algorithm
    vec3 fragPos = texture(gPosition, TexCoords).xyz;
    vec3 normal = normalize(texture(gNormal, TexCoords).rgb);
    vec3 randomVec = normalize(texture(texNoise, TexCoords * noiseScale).xyz);
    // create TBN change-of-basis matrix: from tangent-space to view-space
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);
    // iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < KERNEL_SIZE; ++i)
    {
        // get sample position
        vec3 samplePos = TBN * samples[i]; // from tangent to view-space
        samplePos = fragPos + samplePos * radius; 
        
        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samplePos, 1.0);
        offset = projection * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0
        
        // get sample depth
        float sampleDepth = texture(gPosition, offset.xy).z; // get depth value of kernel sample
        
        // range check & accumulate
        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
        occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;           
    }
    occlusion = 1.0 - (occlusion / KERNEL_SIZE);
    
    FragColor = occlusion;
}
"
node18.gs = ""
node18.execute()

_editor.add_node(node18, 291.27836976106, 16.348702334033)

var node19 = RenderTarget()

node19.width = 1024
node19.height = 1024

_editor.add_node(node19, 568.78820394771, -201.04090826722)

var node20 = Texture()
node20.gamma_correction = false
node20.init_texture(1024, 1024, "r16")
node20.set_sampler("linear repeat")

_editor.add_node(node20, 328.5776183198, -266.87720262011)

var node21 = PrimitiveShape()

node21.type = "quad"
node21.layout = [ "position", "texture" ]

_editor.add_node(node21, 512.82488187157, -40.435175972858)

var node22 = Clear()

node22.masks = [ "depth", "color" ]
node22.values = { "color" : [ 255, 255, 255, 255 ] }

_editor.add_node(node22, 508.10475483127, 131.77510052458)

var node23 = Draw()

node23.set_prim_type("tri_strip")
node23.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less" }

_editor.add_node(node23, 1866.0212492244, -128.14635129783)

var node24 = Shader()

node24.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;

out vec2 TexCoords;

void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}
"
node24.fs = "
#version 330 core
out float FragColor;

in vec2 TexCoords;

uniform sampler2D ssaoInput;

void main() 
{
    vec2 texelSize = 1.0 / vec2(textureSize(ssaoInput, 0));
    float result = 0.0;
    for (int x = -2; x < 2; ++x) 
    {
        for (int y = -2; y < 2; ++y) 
        {
            vec2 offset = vec2(float(x), float(y)) * texelSize;
            result += texture(ssaoInput, TexCoords + offset).r;
        }
    }
    FragColor = result / (4.0 * 4.0);
}  
"
node24.gs = ""
node24.execute()

_editor.add_node(node24, 1475.5838403342, -79.31137686777)

var node25 = RenderTarget()

node25.width = 1024
node25.height = 1024

_editor.add_node(node25, 1723.3766836847, -307.04029421507)

var node26 = Texture()
node26.gamma_correction = false
node26.init_texture(1024, 1024, "r16")
node26.set_sampler("linear repeat")

_editor.add_node(node26, 1488.5403444624, -294.41300928077)

var node27 = PrimitiveShape()

node27.type = "quad"
node27.layout = [ "position", "texture" ]

_editor.add_node(node27, 1645.4612455079, -139.52608506377)

var node28 = PrimitiveShape()

node28.type = "quad"
node28.layout = [ "position", "texture" ]

_editor.add_node(node28, 584.55051459884, -1168.5254498365)

var node29 = Draw()

node29.set_prim_type("triangles")
node29.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "back", "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less" }

_editor.add_node(node29, -469.21905463955, 597.36254008502)

var node30 = Shader()

node30.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec3 FragPos;
out vec2 TexCoords;
out vec3 Normal;

uniform UBO
{
uniform bool invertedNormals;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
};

void main()
{
    vec4 viewPos = view * model * vec4(aPos, 1.0);
    FragPos = viewPos.xyz; 
    TexCoords = aTexCoords;
    
    mat3 normalMatrix = transpose(inverse(mat3(view * model)));
    Normal = normalMatrix * (invertedNormals ? -aNormal : aNormal);
    
    gl_Position = projection * viewPos;
}
"
node30.fs = "
#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec3 gAlbedo;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;

void main()
{    
    // store the fragment position vector in the first gbuffer texture
    gPosition = FragPos;
    // also store the per-fragment normals into the gbuffer
    gNormal = normalize(Normal);
    // and the diffuse per-fragment color
    gAlbedo.rgb = vec3(0.95);
}
"
node30.gs = ""
node30.execute()
node30.set_uniform("invertedNormals", [ 0 ])

_editor.add_node(node30, -661.2445163592, 593.80801792987)

var node31 = Model()
node31.init_model("resources/objects/backpack/backpack.obj")

_editor.add_node(node31, -628.45158158564, 492.62189104828)

var node32 = Translate()

node32.dx = 0
node32.dy = 0.5
node32.dz = 0

_editor.add_node(node32, -831.19578795876, 582.8614535436)

var node33 = Rotate()

node33.angle = -90
node33.axis_x = 1
node33.axis_y = 0
node33.axis_z = 0

_editor.add_node(node33, -1007.1497619326, 573.62460529087)

var node34 = Custom()

node34.code = "
import \"random\" for Random
import \"maths.vector\" for Vector3
var random = Random.init(12345)
var ssao_kernel = []
for (var i in 0..64)
{
    var sample = Vector3()
    sample.x = random.float(1) * 2 - 1
    sample.y = random.float(1) * 2 - 1
    sample.z = random.float(1)
    sample.normalize()
    var r = random.float(1)
    sample.x = sample.x * r
    sample.y = sample.y * r
    sample.z = sample.z * r
    var s = i / 64.0 
    s = 0.1 + s * s * (1.0 - 0.1)
    sample.x = sample.x * s
    sample.y = sample.y * s
    sample.z = sample.z * s
    ssao_kernel.add(sample)
}
_editor.script_stack.clear()
_editor.script_stack.add(ssao_kernel)
"
node34.init_ports(0, 1)
node34.use_cache = true

_editor.add_node(node34, 59.378242829207, 101.89349911426)

var node35 = Custom()

node35.code = "
import \"random\" for Random
import \"maths.vector\" for Vector3
import \"render\" for Texture2D
import \"rendergraph.variant\" for VarTexture
var random = Random.init(12345)
var ssao_noise = []
for (var i in 0..16)
{
    var x = random.float(1) * 2 - 1
    var y = random.float(1) * 2 - 1
    var z = 0
    ssao_noise.add(x)
    ssao_noise.add(y)
    ssao_noise.add(z)    
}
var tex = Texture2D.init(4, 4, \"rgb16f\")
tex.upload(ssao_noise, 0, 0, 4, 4)
var v_tex = VarTexture()
v_tex.tex = tex
_editor.script_stack.clear()
_editor.script_stack.add(v_tex)
"
node35.init_ports(0, 1)
node35.use_cache = true

_editor.add_node(node35, 76.72235109499, -87.623807279695)

var node36 = Number3()

node36.value.set(2, 4, -2)

_editor.add_node(node36, -41.131255289157, -1189.4616508918)

var node37 = Multiply()

_editor.add_node(node37, 105.69757518568, -1171.7688056592)

Blueprint.connect(node0, "next", node29, "prev")
Blueprint.connect(node1, "out", node0, "shader")
Blueprint.connect(node2, "out", node0, "va")
Blueprint.connect(node3, "mat", node1, "projection")
Blueprint.connect(node3, "mat", node30, "projection")
Blueprint.connect(node3, "mat", node18, "projection")
Blueprint.connect(node4, "mat", node1, "view")
Blueprint.connect(node4, "mat", node30, "view")
Blueprint.connect(node4, "mat", node37, "b")
Blueprint.connect(node4, "zoom", node3, "fovy")
Blueprint.connect(node5, "next", node0, "prev")
Blueprint.connect(node6, "mat", node1, "model")
Blueprint.connect(node7, "mat", node6, "mat")
Blueprint.connect(node9, "fbo", node8, "fbo")
Blueprint.connect(node10, "tex", node9, "col0")
Blueprint.connect(node10, "tex", node15, "gPosition")
Blueprint.connect(node10, "tex", node18, "gPosition")
Blueprint.connect(node11, "tex", node9, "col1")
Blueprint.connect(node11, "tex", node15, "gNormal")
Blueprint.connect(node11, "tex", node18, "gNormal")
Blueprint.connect(node12, "tex", node9, "col2")
Blueprint.connect(node12, "tex", node15, "gAlbedo")
Blueprint.connect(node13, "rbo", node9, "depth")
Blueprint.connect(node15, "out", node14, "shader")
Blueprint.connect(node16, "next", node14, "prev")
Blueprint.connect(node17, "next", node23, "prev")
Blueprint.connect(node18, "out", node17, "shader")
Blueprint.connect(node19, "fbo", node17, "fbo")
Blueprint.connect(node20, "tex", node19, "col0")
Blueprint.connect(node20, "tex", node24, "ssaoInput")
Blueprint.connect(node21, "out", node17, "va")
Blueprint.connect(node22, "next", node17, "prev")
Blueprint.connect(node23, "next", node16, "prev")
Blueprint.connect(node24, "out", node23, "shader")
Blueprint.connect(node25, "fbo", node23, "fbo")
Blueprint.connect(node26, "tex", node25, "col0")
Blueprint.connect(node26, "tex", node15, "ssao")
Blueprint.connect(node27, "out", node23, "va")
Blueprint.connect(node28, "out", node14, "va")
Blueprint.connect(node29, "next", node8, "prev")
Blueprint.connect(node30, "out", node29, "shader")
Blueprint.connect(node31, "model", node29, "model")
Blueprint.connect(node32, "mat", node30, "model")
Blueprint.connect(node33, "mat", node32, "mat")
Blueprint.connect(node34, "out0", node18, "samples")
Blueprint.connect(node35, "out0", node18, "texNoise")
Blueprint.connect(node36, "v2", node37, "a")
Blueprint.connect(node37, "v", node15, "light.Position")
