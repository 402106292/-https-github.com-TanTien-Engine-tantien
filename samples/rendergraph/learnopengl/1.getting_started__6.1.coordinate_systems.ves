var node0 = Clear()
test.add_node(node0, -179.72643, 200.18856)

node0.masks = [ "color" ]
node0.values = { "color" : [ 0.20000000298023, 0.30000001192093, 0.30000001192093, 1 ] }

var node1 = Draw()
test.add_node(node1, 134, 19)

node1.prim_type = "triangles"
node1.render_state = { "depth_test" : false, "cull" : "disable" }

var node2 = Shader()
test.add_node(node2, -23.5, -3)

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
	gl_Position = projection * view * model * vec4(aPos, 1.0);
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in vec3 ourColor;
in vec2 TexCoord;

// texture samplers
uniform sampler2D texture1;
uniform sampler2D texture2;

void main()
{
	// linearly interpolate between both textures (80 container, 20 awesomeface)
	FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);
}
"
node2.execute()

var node3 = VertexArray()
test.add_node(node3, -29, -122)

node3.data = [ 0.5, 0.5, 0, 1, 1, 0.5, -0.5, 0, 1, 0, -0.5, -0.5, 0, 0, 0, -0.5, 0.5, 0, 0, 1 ]
node3.attrs = [ 3, 2 ]

node3.ibuf = [ 0, 1, 3, 1, 2, 3 ]

var node4 = Texture()
test.add_node(node4, -216.01303761499, -185.85417691026)

node4.initTexture("resources/textures/container.jpg")
node4.sampler_selected = 3

var node5 = Texture()
test.add_node(node5, -218.75427120745, -257.11461344574)

node5.initTexture("resources/textures/awesomeface.png")
node5.sampler_selected = 3

var node6 = Perspective()
test.add_node(node6, -180.04958677686, -80.04958677686)

node6.fovy = 180
node6.aspect = 0
node6.znear = 0.10000000149012
node6.zfar = 100

var node7 = Translate()
test.add_node(node7, -170.49750700089, 42.441363294857)

node7.dx = 5.1663904190063
node7.dy = 5.0552792549133
node7.dz = 0

var node8 = Matrix()
test.add_node(node8, -314.44491496482, 74.486851990984)

Blueprint.connect(node0.exports[0], node1.imports[0])
Blueprint.connect(node2.exports[0], node1.imports[1])
Blueprint.connect(node3.exports[0], node1.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[3])
Blueprint.connect(node5.exports[0], node2.imports[4])
Blueprint.connect(node6.exports[0], node2.imports[2])
Blueprint.connect(node7.exports[0], node2.imports[1])
Blueprint.connect(node8.exports[0], node7.imports[0])
