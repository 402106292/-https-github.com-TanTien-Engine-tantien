var node0 = Clear()
_editor.add_node(node0, -303.38767843727, 804.93296222935)

node0.masks = [ "color", "depth" ]
node0.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

var node1 = Draw()
_editor.add_node(node1, -51, 593.5)

node1.set_prim_type("triangles")
node1.render_state = { "depth_test" : true, "depth_func" : "less", "cull" : "back" }

var node2 = Shader()
_editor.add_node(node2, -413.1123015137, -279.00686750897)

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec2 TexCoords;
out vec3 WorldPos;
out vec3 Normal;

uniform UBO
{
    mat4 projection;
    mat4 view;
    mat4 model;    
};

void main()
{
    TexCoords = aTexCoords;
    WorldPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(model) * aNormal;   

    gl_Position =  projection * view * vec4(WorldPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;
in vec2 TexCoords;
in vec3 WorldPos;
in vec3 Normal;

// material parameters
uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D metallicMap;
uniform sampler2D roughnessMap;
uniform sampler2D aoMap;

uniform UBO
{
    // lights
    vec3 lightPositions[4];
    vec3 lightColors[4];

    vec3 camPos;    
};

const float PI = 3.14159265359;
// ----------------------------------------------------------------------------
// Easy trick to get tangent-normals to world-space to keep PBR code simplified.
// Don't worry if you don't get what's going on; you generally want to do normal 
// mapping the usual way for performance anways; I do plan make a note of this 
// technique somewhere later in the normal mapping tutorial.
vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalMap, TexCoords).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(WorldPos);
    vec3 Q2  = dFdy(WorldPos);
    vec2 st1 = dFdx(TexCoords);
    vec2 st2 = dFdy(TexCoords);

    vec3 N   = normalize(Normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}
// ----------------------------------------------------------------------------
void main()
{       
    vec3 albedo     = pow(texture(albedoMap, TexCoords).rgb, vec3(2.2));
    float metallic  = texture(metallicMap, TexCoords).r;
    float roughness = texture(roughnessMap, TexCoords).r;
    float ao        = texture(aoMap, TexCoords).r;

    vec3 N = getNormalFromMap();
    vec3 V = normalize(camPos - WorldPos);

    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i) 
    {
        // calculate per-light radiance
        vec3 L = normalize(lightPositions[i] - WorldPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);   
        float G   = GeometrySmith(N, V, L, roughness);      
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);
           
        vec3 nominator    = NDF * G * F; 
        float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; // 0.001 to prevent divide by zero.
        vec3 specular = nominator / denominator;
        
        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;     

        // scale light by NdotL
        float NdotL = max(dot(N, L), 0.0);        

        // add to outgoing radiance Lo
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    }   
    
    // ambient lighting (note that the next IBL tutorial will replace 
    // this ambient lighting with environment lighting).
    vec3 ambient = vec3(0.03) * albedo * ao;
    
    vec3 color = ambient + Lo;

    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);
}
"
node2.execute()
node2.setUniform("lightPositions[0]", [ 0, 10, 0 ])
node2.setUniform("lightPositions[1]", [ 0, 10, 0 ])
node2.setUniform("lightPositions[2]", [ 0, 10, 0 ])
node2.setUniform("lightPositions[3]", [ 0, 10, 0 ])
node2.setUniform("lightColors[0]", [ 150, 150, 150 ])
node2.setUniform("lightColors[1]", [ 150, 150, 150 ])
node2.setUniform("lightColors[2]", [ 150, 150, 150 ])
node2.setUniform("lightColors[3]", [ 150, 150, 150 ])

var node3 = PrimitiveShape()
_editor.add_node(node3, -262.51838908172, 570.01650531932)

node3.type = "sphere"
node3.layout = [ "position", "normal", "texture" ]

var node4 = Perspective()
_editor.add_node(node4, -733.34811374976, 659.17193283298)

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 100

var node5 = Camera3D()
_editor.add_node(node5, -907.18250114434, 483.8883574907)

node5.position.set(-0.42811923858109, 5.7014535195037, 19.394480938735)
node5.yaw = -450.3
node5.pitch = -15.9
node5.zoom = 45
node5.update_camera_vectors()
node5.speed = 0.35880517959595

var node6 = For()
_editor.add_node(node6, 194.42221763255, 598.2649711854)

node6.start = 0
node6.end = 7

var node7 = Pass()
_editor.add_node(node7, 662.68143889079, 627.62939136237)

var node8 = Translate()
_editor.add_node(node8, -664.48324813534, 204.08319612336)

node8.dx = 6.3883465528488
node8.dy = 6.3883465528488
node8.dz = 0

var node9 = Matrix()
_editor.add_node(node9, -811.25250328923, 251.03033074482)

var node10 = Combine()
_editor.add_node(node10, -806.27272727273, 158.37603305785)

var node11 = Multiply()
_editor.add_node(node11, -975.74403516263, 221.48146098655)

var node12 = Number()
_editor.add_node(node12, -1120.3249339547, 152.94591821439)

node12.value = 2.5553386211395

var node13 = For()
_editor.add_node(node13, 443, 599.5)

node13.start = 0
node13.end = 7

var node14 = Multiply()
_editor.add_node(node14, -969.15062129383, 114.79182514253)

var node15 = Subtract()
_editor.add_node(node15, -1270.2883819412, 218.52491633086)

var node16 = Number()
_editor.add_node(node16, -1705.7037273907, 214.79837753259)

node16.value = 2

var node17 = Subtract()
_editor.add_node(node17, -1264.6679735388, 63.932178676942)

var node18 = Divide()
_editor.add_node(node18, -1546.0441618494, 248.16449261414)

var node19 = Texture()
_editor.add_node(node19, -1327.8678453635, -223.87367779038)
node19.gamma_correction = false
node19.init_texture("resources/textures/pbr/rusted_iron/albedo.png")
node19.set_sampler("linear repeat")

var node20 = Texture()
_editor.add_node(node20, -1572.1986852476, -227.43500956547)
node20.gamma_correction = false
node20.init_texture("resources/textures/pbr/rusted_iron/normal.png")
node20.set_sampler("linear repeat")

var node21 = Texture()
_editor.add_node(node21, -1102.6654502296, -220.95168450524)
node21.gamma_correction = false
node21.init_texture("resources/textures/pbr/rusted_iron/metallic.png")
node21.set_sampler("linear repeat")

var node22 = Texture()
_editor.add_node(node22, -882.5167360562, -220.26535977602)
node22.gamma_correction = false
node22.init_texture("resources/textures/pbr/rusted_iron/roughness.png")
node22.set_sampler("linear repeat")

var node23 = Texture()
_editor.add_node(node23, -658.14071167281, -217.45724846892)
node23.gamma_correction = false
node23.init_texture("resources/textures/pbr/rusted_iron/ao.png")
node23.set_sampler("linear repeat")

Blueprint.connect(node0.exports[0], node13.imports[0])
Blueprint.connect(node1.exports[0], node6.imports[1])
Blueprint.connect(node2.exports[0], node1.imports[1])
Blueprint.connect(node3.exports[0], node1.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[0])
Blueprint.connect(node5.exports[0], node2.imports[1])
Blueprint.connect(node5.exports[1], node4.imports[0])
Blueprint.connect(node5.exports[3], node2.imports[11])
Blueprint.connect(node6.exports[0], node13.imports[1])
Blueprint.connect(node6.exports[1], node15.imports[0])
Blueprint.connect(node6.exports[2], node18.imports[0])
Blueprint.connect(node8.exports[0], node2.imports[2])
Blueprint.connect(node9.exports[0], node8.imports[0])
Blueprint.connect(node10.exports[1], node8.imports[1])
Blueprint.connect(node11.exports[0], node10.imports[0])
Blueprint.connect(node12.exports[0], node11.imports[1])
Blueprint.connect(node12.exports[0], node14.imports[1])
Blueprint.connect(node13.exports[0], node7.imports[0])
Blueprint.connect(node13.exports[1], node17.imports[0])
Blueprint.connect(node14.exports[0], node10.imports[1])
Blueprint.connect(node15.exports[0], node11.imports[0])
Blueprint.connect(node16.exports[0], node18.imports[1])
Blueprint.connect(node17.exports[0], node14.imports[0])
Blueprint.connect(node18.exports[0], node15.imports[1])
Blueprint.connect(node18.exports[0], node17.imports[1])
Blueprint.connect(node19.exports[0], node2.imports[13])
Blueprint.connect(node20.exports[0], node2.imports[12])
Blueprint.connect(node21.exports[0], node2.imports[14])
Blueprint.connect(node22.exports[0], node2.imports[15])
Blueprint.connect(node23.exports[0], node2.imports[16])
