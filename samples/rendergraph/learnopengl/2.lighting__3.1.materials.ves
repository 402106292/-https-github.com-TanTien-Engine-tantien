var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "depth_test" : true, "cull" : "disable" }

_editor.add_node(node0, 157, 414)

var node1 = Clear()

node1.masks = [ "color", "depth" ]
node1.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node1, -198, 619.5)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 FragPos;
out vec3 Normal;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
} ubo_vs;

void main()
{
    FragPos = vec3(ubo_vs.model * vec4(aPos, 1.0));
    Normal = aNormal;  
    
    gl_Position = ubo_vs.projection * ubo_vs.view * vec4(FragPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;    
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 FragPos;  
in vec3 Normal;

uniform UBO
{
    vec3 viewPos;
    Material material;
    Light light;    
} ubo_fs;

void main()
{
    // ambient
    vec3 ambient = ubo_fs.light.ambient * ubo_fs.material.ambient;
    
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(ubo_fs.light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = ubo_fs.light.diffuse * (diff * ubo_fs.material.diffuse);
    
    // specular
    vec3 viewDir = normalize(ubo_fs.viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), ubo_fs.material.shininess);
    vec3 specular = ubo_fs.light.specular * (spec * ubo_fs.material.specular);  
        
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
} 
"
node2.gs = ""
node2.render_run()
node2.set_uniform("ubo_fs.viewPos", [ 0.61252337694168, 0.53474563360214, 0.52363449335098 ])
node2.set_uniform("ubo_fs.material.ambient", [ 0.22363451123238, 0.55696785449982, 0.52363449335098 ])
node2.set_uniform("ubo_fs.material.diffuse", [ 0.19030117988586, 0.52363449335098, 0.53474563360214 ])
node2.set_uniform("ubo_fs.material.specular", [ 0.65696781873703, 0.56807893514633, 0.55696785449982 ])
node2.set_uniform("ubo_fs.material.shininess", [ 0.66807895898819 ])
node2.set_uniform("ubo_fs.light.position", [ 0.55696785449982, 0, 0 ])
node2.set_uniform("ubo_fs.light.ambient", [ 0.59030115604401, 0, 0 ])
node2.set_uniform("ubo_fs.light.diffuse", [ 0.54585671424866, 0, 0 ])
node2.set_uniform("ubo_fs.light.specular", [ 0.54585671424866, 0, 0 ])

_editor.add_node(node2, -68.127097378661, 373.1309566719)

var node3 = VertexArray()

node3.data = [ -0.5, -0.5, -0.5, 0, 0, -1, 0.5, -0.5, -0.5, 0, 0, -1, 0.5, 0.5, -0.5, 0, 0, -1, 0.5, 0.5, -0.5, 0, 0, -1, -0.5, 0.5, -0.5, 0, 0, -1, -0.5, -0.5, -0.5, 0, 0, -1, -0.5, -0.5, 0.5, 0, 0, 1, 0.5, -0.5, 0.5, 0, 0, 1, 0.5, 0.5, 0.5, 0, 0, 1, 0.5, 0.5, 0.5, 0, 0, 1, -0.5, 0.5, 0.5, 0, 0, 1, -0.5, -0.5, 0.5, 0, 0, 1, -0.5, 0.5, 0.5, -1, 0, 0, -0.5, 0.5, -0.5, -1, 0, 0, -0.5, -0.5, -0.5, -1, 0, 0, -0.5, -0.5, -0.5, -1, 0, 0, -0.5, -0.5, 0.5, -1, 0, 0, -0.5, 0.5, 0.5, -1, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0, 0.5, 0.5, -0.5, 1, 0, 0, 0.5, -0.5, -0.5, 1, 0, 0, 0.5, -0.5, -0.5, 1, 0, 0, 0.5, -0.5, 0.5, 1, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0, -0.5, -0.5, -0.5, 0, -1, 0, 0.5, -0.5, -0.5, 0, -1, 0, 0.5, -0.5, 0.5, 0, -1, 0, 0.5, -0.5, 0.5, 0, -1, 0, -0.5, -0.5, 0.5, 0, -1, 0, -0.5, -0.5, -0.5, 0, -1, 0, -0.5, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0.5, 0, 1, 0, 0.5, 0.5, 0.5, 0, 1, 0, -0.5, 0.5, 0.5, 0, 1, 0, -0.5, 0.5, -0.5, 0, 1, 0 ]
node3.attrs = [ 3, 3 ]

_editor.add_node(node3, 29.784036363636, 169.99683636364)

var node4 = Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 102.21896362305

_editor.add_node(node4, -233.29969947408, 155.53636363636)

var node5 = Lookat()

node5.eye.set(0, 0, 3)
node5.center.set(0, 0, 0)
node5.up.set(0, 1, 0)

_editor.add_node(node5, -235.50754100588, 278.85523609615)

var node6 = Rotate()

node6.angle = 3.4918446540833
node6.axis_x = 0
node6.axis_y = 0.35777792334557
node6.axis_z = 1

_editor.add_node(node6, -303.04235920302, 428.51565368456)

var node7 = Matrix()

_editor.add_node(node7, -504.63278341107, 477.61685065856)

Blueprint.connect(node1, "next", node0, "prev")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
Blueprint.connect(node4, "mat", node2, "ubo_vs.projection")
Blueprint.connect(node5, "mat", node2, "ubo_vs.view")
Blueprint.connect(node6, "mat", node2, "ubo_vs.model")
Blueprint.connect(node7, "mat", node6, "mat")
