var node0 = Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "depth_test" : true, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node0, 112.6602691073, 592.02207064843)

var node1 = Clear()

node1.masks = [ "depth", "color" ]
node1.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node1, -235.20616450689, 821.44547068941)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} vs_out;

uniform UBO
{
	mat4 projection;
	mat4 view;
	mat4 model;	

	vec3 lightPos;
	vec3 viewPos;
};

void main()
{
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));   
    vs_out.TexCoords = aTexCoords;
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 T = normalize(normalMatrix * aTangent);
    vec3 N = normalize(normalMatrix * aNormal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    
    mat3 TBN = transpose(mat3(T, B, N));    
    vs_out.TangentLightPos = TBN * lightPos;
    vs_out.TangentViewPos  = TBN * viewPos;
    vs_out.TangentFragPos  = TBN * vs_out.FragPos;
        
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;

void main()
{           
     // obtain normal from normal map in range [0,1]
    vec3 normal = texture(normalMap, fs_in.TexCoords).rgb;
    // transform normal vector to range [-1,1]
    normal = normalize(normal * 2.0 - 1.0);  // this normal is in tangent space
   
    // get diffuse color
    vec3 color = texture(diffuseMap, fs_in.TexCoords).rgb;
    // ambient
    vec3 ambient = 0.1 * color;
    // diffuse
    vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * color;
    // specular
    vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

    vec3 specular = vec3(0.2) * spec;
    FragColor = vec4(ambient + diffuse + specular, 1.0);
}
"
node2.gs = ""
node2.render_run()
node2.set_uniform("lightPos", [ 0.5, 1, 0.3 ])

_editor.add_node(node2, -243.84018158955, 504.07397096406)

var node3 = PrimitiveShape()

node3.type = "quad"
node3.layout = [ "position", "texture", "normal", "tangent_bitangent" ]

_editor.add_node(node3, -61.59003669645, 571.22430472335)

var node4 = Texture()
node4.gamma_correction = false
node4.init_texture("resources/textures/brickwall_normal.jpg")


_editor.add_node(node4, -668.77680280139, 525.58978669177)

var node5 = Texture()
node5.gamma_correction = false
node5.init_texture("resources/textures/brickwall.jpg")


_editor.add_node(node5, -451.89261023175, 513.14204626141)

var node6 = Perspective()

node6.fovy = 45
node6.aspect = 0
node6.znear = 0.10000000149012
node6.zfar = 100

_editor.add_node(node6, -448.78666929949, 806.55757003711)

var node7 = Camera3d()

node7.cam.position.set(0, 0, 3)
node7.cam.yaw = -90
node7.cam.pitch = 0
node7.cam.zoom = 45
node7.cam.update_vectors()
node7.speed = 0.19082772731781

_editor.add_node(node7, -680.71588643819, 779.63233375858)

Blueprint.connect(node1, "next", node0, "prev")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
Blueprint.connect(node4, "tex", node2, "normalMap")
Blueprint.connect(node5, "tex", node2, "diffuseMap")
Blueprint.connect(node6, "mat", node2, "projection")
Blueprint.connect(node7, "mat", node2, "view")
Blueprint.connect(node7, "zoom", node6, "fovy")
Blueprint.connect(node7, "pos", node2, "viewPos")
