var node0 = ::rendergraph::nodes::clear::Clear()

node0.masks = [ "color", "depth" ]
node0.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node0, 589.48794468871, 1202.8844857871)

var node1 = ::rendergraph::nodes::draw::Draw()

node1.set_prim_type("triangles")
node1.render_state = { "blend" : false, "depth_test" : true, "depth_func" : "less", "cull" : "front", "clip_plane" : false }
node1.skip = false

_editor.add_node(node1, 935.31906563355, 1068.3723616911)

var node2 = ::rendergraph::nodes::shader::Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} vs_out;

uniform UBO
{
	mat4 projection;
	mat4 view;
	mat4 model;

	bool inverse_normals;	
};

void main()
{
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));   
    vs_out.TexCoords = aTexCoords;
    
    vec3 n = inverse_normals ? -aNormal : aNormal;
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vs_out.Normal = normalize(normalMatrix * n);
    
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node2.tcs = ""
node2.tes = ""
node2.gs = ""
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

uniform sampler2D diffuseTexture;

struct Light {
    vec3 Position;
    vec3 Color;
};

uniform UBO
{
	Light lights[4];
	vec3 viewPos;	
};

void main()
{           
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);
    // ambient
    vec3 ambient = 0.0 * color;
    // lighting
    vec3 lighting = vec3(0.0);
    for(int i = 0; i < 16; i++)
    {
        // diffuse
        vec3 lightDir = normalize(lights[i].Position - fs_in.FragPos);
        float diff = max(dot(lightDir, normal), 0.0);
        vec3 diffuse = lights[i].Color * diff * color;      
        vec3 result = diffuse;        
        // attenuation (use quadratic as we have gamma correction)
        float distance = length(fs_in.FragPos - lights[i].Position);
        result *= 1.0 / (distance * distance);
        lighting += result;
                
    }
    FragColor = vec4(ambient + lighting, 1.0);
}
"
node2.cs = ""
node2.render_gen()
node2.set_uniform("inverse_normals", [ 1 ])
node2.set_uniform("lights[0].Position", [ 0, 0, 49.5 ])
node2.set_uniform("lights[0].Color", [ 200, 200, 200 ])
node2.set_uniform("lights[1].Position", [ -1.4, -1.9, 9 ])
node2.set_uniform("lights[1].Color", [ 0.10000000149012, 0, 0 ])
node2.set_uniform("lights[2].Position", [ 0, -1.8, 4 ])
node2.set_uniform("lights[2].Color", [ 0, 0, 0.20000000298023 ])
node2.set_uniform("lights[3].Position", [ 0.80000001192093, -1.7, 6 ])
node2.set_uniform("lights[3].Color", [ 0, 0.10000000149012, 0 ])

_editor.add_node(node2, 413.13138604836, 972.7902740235)

var node3 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node3.type = "cube"
node3.layout = [ "position", "normal", "texture" ]
node3.shape_params = {  }

_editor.add_node(node3, 631.40680943366, 1000.1336081569)

var node4 = ::blueprint::nodes::perspective::Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 100

_editor.add_node(node4, 194.80103815578, 1301.328619194)

var node5 = ::blueprint::nodes::camera3d::Camera3d()

node5.cam.position.set(0, 0, -5)
node5.cam.yaw = 106.5
node5.cam.pitch = 10.1
node5.cam.zoom = 45
node5.cam.update_vectors()
node5.speed = 0.15786197781563

_editor.add_node(node5, 35.484207376581, 1176.5395186669)

var node6 = ::rendergraph::nodes::texture::Texture()
node6.query_param("unif_name").value = "u_tex"
node6.gamma_correction = true
node6.init_texture("resources/textures/wood.png")

_editor.add_node(node6, 197.97315773143, 820.22708988489)

var node7 = ::blueprint::nodes::matrix::Matrix()

_editor.add_node(node7, -153.02985696782, 1028.8621600286)

var node8 = ::blueprint::nodes::translate::Translate()

node8.dx = 0
node8.dy = 0
node8.dz = 25

_editor.add_node(node8, 120.29525106577, 986.7112378913)

var node9 = ::blueprint::nodes::scale::Scale()

node9.sx = 2.5
node9.sy = 2.5
node9.sz = 27.5

_editor.add_node(node9, -17.75318399467, 967.3684025666)

var node10 = ::rendergraph::nodes::render_target::RenderTarget()

node10.width = 2048
node10.height = 2048

_editor.add_node(node10, 473.29907932805, 573.48879895375)

var node11 = ::rendergraph::nodes::texture::Texture()
node11.query_param("unif_name").value = "u_tex"
node11.gamma_correction = false
node11.init_texture(1024, 1024, "rgb16f")

_editor.add_node(node11, 268.6802316, 473.9216684)

var node12 = ::rendergraph::nodes::clear::Clear()

node12.masks = [ "color", "depth" ]
node12.values = { "color" : [ 0.1, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node12, 837.82674678098, 326.82641675839)

var node13 = ::rendergraph::nodes::draw::Draw()

node13.set_prim_type("tri_strip")
node13.render_state = { "blend" : false, "depth_test" : false, "depth_func" : "less", "cull" : "disable", "clip_plane" : false }
node13.skip = false

_editor.add_node(node13, 1024.6775243903, 208.37670708748)

var node14 = ::rendergraph::nodes::shader::Shader()

node14.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;

out vec2 TexCoords;

void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}
"
node14.tcs = ""
node14.tes = ""
node14.gs = ""
node14.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D hdrBuffer;

uniform UBO
{
    bool hdr;
    float exposure;    
};

void main()
{             
    const float gamma = 2.2;
    vec3 hdrColor = texture(hdrBuffer, TexCoords).rgb;
    if(hdr)
    {
        // reinhard
        // vec3 result = hdrColor / (hdrColor + vec3(1.0));
        // exposure
        vec3 result = vec3(1.0) - exp(-hdrColor * exposure);
        // also gamma correct while we're at it       
        result = pow(result, vec3(1.0 / gamma));
        FragColor = vec4(result, 1.0);
    }
    else
    {
        vec3 result = pow(hdrColor, vec3(1.0 / gamma));
        FragColor = vec4(result, 1.0);
    }
}
"
node14.cs = ""
node14.render_gen()
node14.set_uniform("hdr", [ 4.9407715797424 ])
node14.set_uniform("exposure", [ 4 ])

_editor.add_node(node14, 774.23585837122, 140.36010587332)

var node15 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node15.type = "quad"
node15.layout = [ "position", "texture" ]
node15.shape_params = {  }

_editor.add_node(node15, 827.32380302086, -25.789321553849)

var node16 = ::blueprint::nodes::commentary::Commentary()

node16.set_size(558.55627441406, 536.59167480469)
node16.title = "render floating point color buffer to 2D quad"

_editor.add_node(node16, 944.63607241471, 436.41018801791)

var node17 = ::blueprint::nodes::commentary::Commentary()

node17.set_size(1502.1302490234, 892.02185058594)
node17.title = "render scene into floating point framebuffer"

_editor.add_node(node17, 522.50754201832, 1399.7012922021)

var node18 = ::rendergraph::nodes::pass::Pass()

node18.once = false

_editor.add_node(node18, 1105.5095011364, 1145.0710456143)

var node19 = ::rendergraph::nodes::pass::Pass()

node19.once = false

_editor.add_node(node19, 1156.7590186996, 288.73775212148)

Blueprint.connect(node13, "next", node19, "do")
Blueprint.connect(node1, "next", node18, "do")
Blueprint.connect(node10, "fbo", node18, "fbo")
Blueprint.connect(node11, "tex", node14, "hdrBuffer")
Blueprint.connect(node12, "next", node13, "prev")
Blueprint.connect(node14, "out", node13, "shader")
Blueprint.connect(node15, "out", node13, "va")
Blueprint.connect(node11, "tex", node10, "col0")
Blueprint.connect(node7, "mat", node9, "mat")
Blueprint.connect(node9, "mat", node8, "mat")
Blueprint.connect(node5, "zoom", node4, "fovy")
Blueprint.connect(node4, "mat", node2, "projection")
Blueprint.connect(node5, "mat", node2, "view")
Blueprint.connect(node8, "mat", node2, "model")
Blueprint.connect(node5, "pos", node2, "viewPos")
Blueprint.connect(node6, "tex", node2, "diffuseTexture")
Blueprint.connect(node0, "next", node1, "prev")
Blueprint.connect(node2, "out", node1, "shader")
Blueprint.connect(node3, "out", node1, "va")
