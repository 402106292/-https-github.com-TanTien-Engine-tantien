var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "depth_test" : false, "depth_func" : "less", "cull" : "disable" }

_editor.add_node(node0, 201.5802241559, 331.0448724385)

var node1 = Pass()

node1.once = true

_editor.add_node(node1, 622.79212901553, -78.613740923133)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out vec3 WorldPos;

uniform UBO
{
    mat4 projection;
    mat4 view;    
};

void main()
{
    WorldPos = aPos;
    gl_Position =  projection * view * vec4(WorldPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;
in vec3 WorldPos;

uniform sampler2D equirectangularMap;

const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 SampleSphericalMap(vec3 v)
{
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

void main()
{       
    vec2 uv = SampleSphericalMap(normalize(WorldPos));
    vec3 color = texture(equirectangularMap, uv).rgb;
    
    FragColor = vec4(color, 1.0);
    //FragColor = vec4(1,1,0, 1.0);
}
"
node2.execute()

_editor.add_node(node2, 10.613133775691, 362.0657401001)

var node3 = PrimitiveShape()

node3.type = "cube"
node3.layout = [ "position" ]

_editor.add_node(node3, 17.574015125081, 228.0304245447)

var node4 = Perspective()

node4.fovy = 90
node4.aspect = 1
node4.znear = 0.1
node4.zfar = 10

_editor.add_node(node4, -196.36238572382, 483.8702304338)

var node5 = Clear()

node5.masks = [ "color" ]
node5.values = { "color" : [ 255, 255, 255, 255 ] }

_editor.add_node(node5, -2.4988506432387, 519.1085693723)

var node6 = RenderTarget()

node6.width = 512
node6.height = 512
node6.rbo_depth = false
node6.rbo_color = false

_editor.add_node(node6, 16.711829403841, 38.321903012524)

var node7 = Texture()
node7.gamma_correction = false
node7.init_texture("resources/textures/hdr/newport_loft.hdr")
node7.set_sampler("linear repeat")

_editor.add_node(node7, -648.46491077171, 149.15649789888)

var node8 = For()

node8.start = 0
node8.end = 6

_editor.add_node(node8, 428.63060203633, -97.89321188616)

var node9 = Fetch()

_editor.add_node(node9, -170.23870943051, 20.126739094496)

var node10 = Custom()

node10.code = "
import \"maths\" for Matrix44
import \"maths.vector\" for Vector3
var capture_views = [
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 1.0,  0.0,  0.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3(-1.0,  0.0,  0.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  1.0,  0.0), Vector3(0.0,  0.0,  1.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0, -1.0,  0.0), Vector3(0.0,  0.0, -1.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  0.0,  1.0), Vector3(0.0, -1.0,  0.0)),
    Matrix44.init().lookat(Vector3(0.0, 0.0, 0.0), Vector3( 0.0,  0.0, -1.0), Vector3(0.0, -1.0,  0.0))
]
_editor.script_stack.clear()
_editor.script_stack.add(capture_views)
"
node10.init_ports(0, 1)

_editor.add_node(node10, -319.78707918211, 332.2285525693)

var node11 = Fetch()

_editor.add_node(node11, -165.82361764384, 350.7266535079)

var node12 = Cubemap()

node12.init_texture(512, 512, "rgb16f")

_editor.add_node(node12, -340.65024463212, -12.842887032788)

var node13 = Input()

node13.var_name = "equirectangularMap"
node13.var_type = "texture"

_editor.add_node(node13, -164.62846374512, 245.71807861328)

var node14 = Output()

node14.var_name = "tex"
node14.var_type = "texture"

_editor.add_node(node14, -189.10556446422, 82.644868393575)

Blueprint.connect(node0.exports[0], node8.imports[1])
Blueprint.connect(node2.exports[0], node0.imports[1])
Blueprint.connect(node3.exports[0], node0.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[0])
Blueprint.connect(node5.exports[0], node0.imports[0])
Blueprint.connect(node6.exports[0], node0.imports[3])
Blueprint.connect(node8.exports[0], node1.imports[0])
Blueprint.connect(node8.exports[1], node9.imports[1])
Blueprint.connect(node8.exports[1], node11.imports[1])
Blueprint.connect(node9.exports[0], node6.imports[0])
Blueprint.connect(node10.exports[1], node11.imports[0])
Blueprint.connect(node11.exports[0], node2.imports[1])
Blueprint.connect(node12.exports[0], node14.imports[0])
Blueprint.connect(node12.exports[1], node9.imports[0])
Blueprint.connect(node13.exports[0], node2.imports[2])
