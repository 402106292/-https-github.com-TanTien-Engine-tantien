var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "depth_test" : true, "cull" : "disable" }

_editor.add_node(node0, 288, 419)

var node1 = Clear()

node1.masks = [ "depth", "color" ]
node1.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

_editor.add_node(node1, 104.61577275634, 720.28026537048)

var node2 = Shader()

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;

uniform UBO
{
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo_vs;

void main()
{
    FragPos = vec3(ubo_vs.model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(ubo_vs.model))) * aNormal;  
    TexCoords = aTexCoords;
    
    gl_Position = ubo_vs.projection * ubo_vs.view * vec4(FragPos, 1.0);
}
"
node2.fs = "
#version 330 core
out vec4 FragColor;

struct Material {
    //sampler2D diffuse;
    vec3 specular;    
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;

uniform UBO
{
    vec3 viewPos;
    Material material;
    Light light;
} ubo_fs;

uniform sampler2D mat_diffuse;

void main()
{
    // ambient
    vec3 ambient = ubo_fs.light.ambient * texture(mat_diffuse, TexCoords).rgb;
    
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(ubo_fs.light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = ubo_fs.light.diffuse * diff * texture(mat_diffuse, TexCoords).rgb;  
    
    // specular
    vec3 viewDir = normalize(ubo_fs.viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), ubo_fs.material.shininess);
    vec3 specular = ubo_fs.light.specular * (spec * ubo_fs.material.specular);  
        
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
} 
"
node2.gs = ""
node2.execute()
node2.set_uniform("ubo_fs.viewPos", [ 0.61252337694168, 0.53474563360214, 0.52363449335098 ])
node2.set_uniform("ubo_fs.material.specular", [ 0.5, 0.5, 0.5 ])
node2.set_uniform("ubo_fs.material.shininess", [ 64 ])
node2.set_uniform("ubo_fs.light.position", [ 1.2, 1, 2 ])
node2.set_uniform("ubo_fs.light.ambient", [ 0.20000000298023, 0.20000000298023, 0.20000000298023 ])
node2.set_uniform("ubo_fs.light.diffuse", [ 0.5, 0.5, 0.5 ])
node2.set_uniform("ubo_fs.light.specular", [ 1, 1, 1 ])

_editor.add_node(node2, -53.127097378661, 373.1309566719)

var node3 = VertexArray()

node3.data = [ -0.5, -0.5, -0.5, 0, 0, -1, 0, 0, 0.5, -0.5, -0.5, 0, 0, -1, 1, 0, 0.5, 0.5, -0.5, 0, 0, -1, 1, 1, 0.5, 0.5, -0.5, 0, 0, -1, 1, 1, -0.5, 0.5, -0.5, 0, 0, -1, 0, 1, -0.5, -0.5, -0.5, 0, 0, -1, 0, 0, -0.5, -0.5, 0.5, 0, 0, 1, 0, 0, 0.5, -0.5, 0.5, 0, 0, 1, 1, 0, 0.5, 0.5, 0.5, 0, 0, 1, 1, 1, 0.5, 0.5, 0.5, 0, 0, 1, 1, 1, -0.5, 0.5, 0.5, 0, 0, 1, 0, 1, -0.5, -0.5, 0.5, 0, 0, 1, 0, 0, -0.5, 0.5, 0.5, -1, 0, 0, 1, 0, -0.5, 0.5, -0.5, -1, 0, 0, 1, 1, -0.5, -0.5, -0.5, -1, 0, 0, 0, 1, -0.5, -0.5, -0.5, -1, 0, 0, 0, 1, -0.5, -0.5, 0.5, -1, 0, 0, 0, 0, -0.5, 0.5, 0.5, -1, 0, 0, 1, 0, 0.5, 0.5, 0.5, 1, 0, 0, 1, 0, 0.5, 0.5, -0.5, 1, 0, 0, 1, 1, 0.5, -0.5, -0.5, 1, 0, 0, 0, 1, 0.5, -0.5, -0.5, 1, 0, 0, 0, 1, 0.5, -0.5, 0.5, 1, 0, 0, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0, 1, 0, -0.5, -0.5, -0.5, 0, -1, 0, 0, 1, 0.5, -0.5, -0.5, 0, -1, 0, 1, 1, 0.5, -0.5, 0.5, 0, -1, 0, 1, 0, 0.5, -0.5, 0.5, 0, -1, 0, 1, 0, -0.5, -0.5, 0.5, 0, -1, 0, 0, 0, -0.5, -0.5, -0.5, 0, -1, 0, 0, 1, -0.5, 0.5, -0.5, 0, 1, 0, 0, 1, 0.5, 0.5, -0.5, 0, 1, 0, 1, 1, 0.5, 0.5, 0.5, 0, 1, 0, 1, 0, 0.5, 0.5, 0.5, 0, 1, 0, 1, 0, -0.5, 0.5, 0.5, 0, 1, 0, 0, 0, -0.5, 0.5, -0.5, 0, 1, 0, 0, 1 ]
node3.attrs = [ 3, 3, 2 ]

_editor.add_node(node3, 142.36267687706, 407.49150265223)

var node4 = Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.0061240303330123
node4.zfar = 194.57363891602

_editor.add_node(node4, -278.51163020742, 506.32078183062)

var node5 = Lookat()

node5.eye.set(0, 0, 3)
node5.center.set(0, 0, 0)
node5.up.set(0, 1, 0)

_editor.add_node(node5, -285.28779525623, 642.42103089521)

var node6 = Rotate()

node6.angle = 1.5880110263824
node6.axis_x = 0
node6.axis_y = 0
node6.axis_z = 1

_editor.add_node(node6, -262.75812027475, 815.24195641983)

var node7 = Matrix()

_editor.add_node(node7, -418.17726423899, 862.68965707053)

var node8 = Texture()
node8.gamma_correction = false
node8.init_texture("resources/textures/container2.png")
node8.set_sampler("linear repeat")

_editor.add_node(node8, -284.1, 401.1)

var node9 = Camera3d()

node9.cam.position.set(-1.0053784736365, 0.69616852151278, 1.6192541116902)
node9.cam.yaw = -56.9
node9.cam.pitch = -21.4
node9.cam.zoom = 45
node9.cam.update_vectors()
node9.speed = 0.01

_editor.add_node(node9, -486.04661747465, 690.35946552221)

Blueprint.connect(node1, "next", node0, "prev")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
Blueprint.connect(node4, "mat", node2, "ubo_vs.projection")
Blueprint.connect(node6, "mat", node2, "ubo_vs.model")
Blueprint.connect(node7, "mat", node6, "mat")
Blueprint.connect(node8, "tex", node2, "mat_diffuse")
Blueprint.connect(node9, "mat", node2, "ubo_vs.view")
Blueprint.connect(node9, "zoom", node4, "fovy")
