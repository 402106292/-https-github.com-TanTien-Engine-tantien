var node0 = Clear()
_editor.add_node(node0, -200.43573774767, 631.67841863758)

node0.masks = [ "color", "depth" ]
node0.values = { "color" : [ 0.10000000149012, 0.10000000149012, 0.10000000149012, 1 ] }

var node1 = Draw()
_editor.add_node(node1, 552.9563554402, 239.42053138446)

node1.prim_type = "triangles"
node1.render_state = { "depth_test" : true, "cull" : "disable", "depth_func" : "lequal" }

var node2 = Shader()
_editor.add_node(node2, 199.81066867017, 149.1705484598)

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out vec3 TexCoords;

uniform UBO
{
	mat4 projection;
	mat4 view;	
};

void main()
{
    TexCoords = aPos;
    vec4 pos = projection * view * vec4(aPos, 1.0);
    gl_Position = pos.xyww;
}  
"
node2.fs = "
#version 330 core
out vec4 FragColor;

in vec3 TexCoords;

uniform samplerCube skybox;

void main()
{    
    FragColor = texture(skybox, TexCoords);
}
"
node2.execute()

var node3 = VertexArray()
_editor.add_node(node3, 288.72472322712, 25.284319090099)

node3.data = [ -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1 ]
node3.attrs = [ 3 ]

var node4 = Perspective()
_editor.add_node(node4, -226.66667039799, 354.01688134166)

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.10000000149012
node4.zfar = 100

var node5 = Camera3D()
_editor.add_node(node5, -228.42572228673, 161.51669967898)

node5.position.set(-0.27234520209997, 0.036161024863114, 2.3934017740659)
node5.yaw = -90
node5.pitch = -12.5
node5.zoom = 45
node5.update_camera_vectors()

var node6 = Cubemap()
_editor.add_node(node6, -231.12609547622, 6.2469702202117)

var node7 = Texture()
_editor.add_node(node7, -976.99946713661, 224.98787820459)

node7.init_texture("resources/textures/skybox/right.jpg")
node7.set_sampler("linear repeat")

var node8 = Texture()
_editor.add_node(node8, -753.70320074161, 216.30149273506)

node8.init_texture("resources/textures/skybox/left.jpg")
node8.set_sampler("linear repeat")

var node9 = Texture()
_editor.add_node(node9, -539.8609837257, 205.1527637084)

node9.init_texture("resources/textures/skybox/top.jpg")
node9.set_sampler("linear repeat")

var node10 = Texture()
_editor.add_node(node10, -968.72004304781, -54.883981697497)

node10.init_texture("resources/textures/skybox/bottom.jpg")
node10.set_sampler("linear repeat")

var node11 = Texture()
_editor.add_node(node11, -756.21683439839, -56.773890242972)

node11.init_texture("resources/textures/skybox/front.jpg")
node11.set_sampler("linear repeat")

var node12 = Texture()
_editor.add_node(node12, -536.27214499221, -51.279392452607)

node12.init_texture("resources/textures/skybox/back.jpg")
node12.set_sampler("linear repeat")

var node13 = Draw()
_editor.add_node(node13, 359.27463888888, 357.54985651473)

node13.prim_type = "triangles"
node13.render_state = { "depth_test" : true, "cull" : "disable", "depth_func" : "less" }

var node14 = Shader()
_editor.add_node(node14, 158.40993225748, 429.8237266456)

node14.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 Normal;
out vec3 Position;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;	
};

void main()
{
    Normal = mat3(transpose(inverse(model))) * aNormal;
    Position = vec3(model * vec4(aPos, 1.0));
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node14.fs = "
#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 Position;

uniform UBO
{
    vec3 cameraPos;    
};
uniform samplerCube skybox;

void main()
{    
    vec3 I = normalize(Position - cameraPos);
    vec3 R = reflect(I, normalize(Normal));
    FragColor = vec4(texture(skybox, R).rgb, 1.0);
}
"
node14.execute()

var node15 = VertexArray()
_editor.add_node(node15, 175.50352993772, 305.39869979075)

node15.data = [ -0.5, -0.5, -0.5, 0, 0, -1, 0.5, -0.5, -0.5, 0, 0, -1, 0.5, 0.5, -0.5, 0, 0, -1, 0.5, 0.5, -0.5, 0, 0, -1, -0.5, 0.5, -0.5, 0, 0, -1, -0.5, -0.5, -0.5, 0, 0, -1, -0.5, -0.5, 0.5, 0, 0, 1, 0.5, -0.5, 0.5, 0, 0, 1, 0.5, 0.5, 0.5, 0, 0, 1, 0.5, 0.5, 0.5, 0, 0, 1, -0.5, 0.5, 0.5, 0, 0, 1, -0.5, -0.5, 0.5, 0, 0, 1, -0.5, 0.5, 0.5, -1, 0, 0, -0.5, 0.5, -0.5, -1, 0, 0, -0.5, -0.5, -0.5, -1, 0, 0, -0.5, -0.5, -0.5, -1, 0, 0, -0.5, -0.5, 0.5, -1, 0, 0, -0.5, 0.5, 0.5, -1, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0, 0.5, 0.5, -0.5, 1, 0, 0, 0.5, -0.5, -0.5, 1, 0, 0, 0.5, -0.5, -0.5, 1, 0, 0, 0.5, -0.5, 0.5, 1, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0, -0.5, -0.5, -0.5, 0, -1, 0, 0.5, -0.5, -0.5, 0, -1, 0, 0.5, -0.5, 0.5, 0, -1, 0, 0.5, -0.5, 0.5, 0, -1, 0, -0.5, -0.5, 0.5, 0, -1, 0, -0.5, -0.5, -0.5, 0, -1, 0, -0.5, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0.5, 0, 1, 0, 0.5, 0.5, 0.5, 0, 1, 0, -0.5, 0.5, 0.5, 0, 1, 0, -0.5, 0.5, -0.5, 0, 1, 0 ]
node15.attrs = [ 3, 3 ]

Blueprint.connect(node0.exports[0], node13.imports[0])
Blueprint.connect(node2.exports[0], node1.imports[1])
Blueprint.connect(node3.exports[0], node1.imports[2])
Blueprint.connect(node4.exports[0], node2.imports[0])
Blueprint.connect(node4.exports[0], node14.imports[2])
Blueprint.connect(node5.exports[0], node14.imports[1])
Blueprint.connect(node5.exports[1], node4.imports[0])
Blueprint.connect(node5.exports[2], node2.imports[1])
Blueprint.connect(node5.exports[3], node14.imports[3])
Blueprint.connect(node6.exports[0], node2.imports[2])
Blueprint.connect(node6.exports[0], node14.imports[4])
Blueprint.connect(node7.exports[0], node6.imports[0])
Blueprint.connect(node8.exports[0], node6.imports[1])
Blueprint.connect(node9.exports[0], node6.imports[2])
Blueprint.connect(node10.exports[0], node6.imports[3])
Blueprint.connect(node11.exports[0], node6.imports[4])
Blueprint.connect(node12.exports[0], node6.imports[5])
Blueprint.connect(node13.exports[0], node1.imports[0])
Blueprint.connect(node14.exports[0], node13.imports[1])
Blueprint.connect(node15.exports[0], node13.imports[2])
