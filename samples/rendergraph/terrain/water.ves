var node0 = ::rendergraph::nodes::draw::Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less", "clip_plane" : false }
node0.skip = false

_editor.add_node(node0, 1787.2998622665, -294.00749126529)

var node1 = ::rendergraph::nodes::clear::Clear()

node1.masks = [ "color", "depth" ]
node1.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node1, -40.096956301563, 415.37335808587)

var node2 = ::rendergraph::nodes::shader::Shader()

node2.vs = "
#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out VS_OUT {
    vec3 fragpos;
    vec2 texcoord;
} vs_out;

uniform UBO
{
    mat4 projection;
    mat4 view;
    mat4 model;   
};

void main()
{
	vs_out.fragpos = vec3(model * vec4(aPos.xzy, 1.0));
	vs_out.texcoord = vec2(aTexCoord.x, aTexCoord.y);
	gl_Position = projection * view * model * vec4(aPos.xzy, 1.0);
}
"
node2.tcs = ""
node2.tes = ""
node2.gs = ""
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 fragpos;
    vec2 texcoord;
} fs_in;

uniform sampler2D norm_tex;
uniform sampler2D refracted_tex;
uniform sampler2D reflected_tex;
uniform sampler2D noise_tex;
uniform sampler1D fresnel_tex;
uniform samplerCube sky_tex;

uniform UBO
{
	float time;
	vec2 tilling;
	float speed;
	vec3 light_dir;
	vec3 cam_pos;
	vec3 color_compose;
	float shininess;
	vec2 viewport_size;
	vec2 sun_pos;
};

vec3 blend_linear(vec3 n0, vec3 n1)
{
	return normalize(n0 + n1);
}

vec2 rotate2d(vec2 dir, float angle)
{
	float c = cos(angle);
	float s = sin(angle);
	return vec2(dir.x * c - dir.y * s, dir.x * s + dir.y * c);
}

vec3 calc_normal(vec2 uv, vec2 speed, vec2 tilling, float time, vec2 uv_offset, float height)
{
	uv -= time * speed;
	vec2 xy = texture(norm_tex, uv * tilling + uv_offset).xy * vec2(2.0, 2.0) - vec2(1.0, 1.0);
	float z = sqrt(1.0 - dot(xy, xy)) + 1.0;
	//z = 1.0;
	z = z * height;
//	return normalize(vec3(xy, z)).xzy;
	return vec3(xy, z).xzy;
}

void main()
{
    vec2 uv = fs_in.texcoord;

	vec3 norm0 = calc_normal(uv, vec2(speed * 0.01, 0.0), vec2(tilling.y * 0.8, tilling.y), time, vec2(0.5, 0), 0.75);
	vec3 norm1 = calc_normal(uv, vec2(0.0, speed * 0.003), vec2(tilling.y, tilling.y) * 1.3, time, vec2(0, 0), 1.5);
	vec3 norm2 = calc_normal(uv, vec2(0.0, -speed * 0.002), vec2(tilling.y, tilling.y) * 1.8, time, vec2(0.0, 0.5), 1.5);
	norm0 = vec3(-norm0.x, norm0.y, -norm0.z);

	vec3 norm12 = vec3(-norm1.x-norm2.x, norm1.y, -norm1.z-norm2.z);
	vec3 norm012 = blend_linear(norm0, norm12);

	vec3 normal	= normalize(norm012);

	vec3 view_dir = normalize(cam_pos - fs_in.fragpos);
	float n_dot_v = clamp(dot(normal, view_dir),0.0,1.0);

	vec3 half_angle = normalize(normalize(light_dir - vec3(5.0)) + view_dir);
	float n_dot_h = clamp(dot(normal, half_angle),0.0,1.0);
    
    vec3 diffuse_color = vec3(0.157, 0.157, 0.2);
    vec3 specular_color = vec3(0.3, 0.3, 0.4);

	vec3 ambient = diffuse_color * vec3(n_dot_v);
	vec3 specular = specular_color * pow(n_dot_h, shininess * 100);
    //return ambient * 5 + specular * 0.62;
    vec3 final = color_compose.y * ambient + color_compose.z * specular;

	vec3 R = normalize(reflect(view_dir, normal));		
//	float f = texture(fresnel_tex, dot(R, -normal)).r;
	float f = 1.0 - dot(R, -normal);

    vec2 tc = gl_FragCoord.xy / viewport_size;
    //vec3 tc_n = 2 * texture(noise_tex, tc - time * vec2(speed * 0.025, 0.0)).rgb - 1;
    //tc -= tc_n.xz * 0.005;
    tc -= normal.xz * 0.05;

    vec4 refr = texture(refracted_tex, tc);
    vec4 refl = texture(reflected_tex, tc);

    vec2 s_pos = sun_pos - vec2(5.0);
    vec3 sun_vec = vec3(cos(s_pos.y) * sin(s_pos.x), sin(s_pos.y), cos(s_pos.y) * cos(s_pos.x));
	float sun_strength = 700;
	float sun_shininess = 3500;
	vec3 sunlight = sun_strength * pow(clamp(dot(R, sun_vec), 0.0, 1.0), sun_shininess) * vec3(1.2, 0.4, 0.1);
	vec3 skyrefl = texture(sky_tex, R).rgb;

	//vec3 col = mix(skyrefl + sunlight, refl.rgb, refl.a);
	vec3 col = mix(skyrefl + sunlight, refl.rgb, 0.5);
	final = mix(mix(refr.rgb, final, 0.7), col, f);

	FragColor = vec4(final, 1.0);    

	//FragColor = texture(norm_tex, fs_in.texcoord);
}
"
node2.cs = ""
node2.render_gen()
node2.set_uniform("tilling", [ 2.4607975482941, 5.8607974052429 ])
node2.set_uniform("speed", [ 0.66079765558243 ])
node2.set_uniform("light_dir", [ 5.4341630935669, 6.1674962043762, 3.4030623435974 ])
node2.set_uniform("color_compose", [ 0, 2.2030622959137, 1.203062415123 ])
node2.set_uniform("shininess", [ 0.13639576733112 ])
node2.set_uniform("sun_pos", [ 1.9060709476471, 4.3727374076843 ])

_editor.add_node(node2, 1390.1191960905, -626.14379066019)

var node3 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node3.type = "quad"
node3.layout = [ "position", "texture" ]
node3.shape_params = {  }

_editor.add_node(node3, 1574.2480686021, -322.28411620549)

var node4 = ::rendergraph::nodes::texture::Texture()
node4.query_param("unif_name").value = "u_tex"
node4.gamma_correction = false
node4.init_texture("assets/textures/water/normal.png")
node4.set_sampler("linear_repeat")

_editor.add_node(node4, 830.22526460956, -351.24934017479)

var node5 = ::blueprint::nodes::perspective::Perspective()

node5.fovy = 45
node5.aspect = 0
node5.znear = 0.1
node5.zfar = 100

_editor.add_node(node5, 191.81796625368, -206.50454287129)

var node6 = ::blueprint::nodes::camera3d::Camera3d()

node6.cam.position.set(-0.50815893218389, 0.6854959593749, -0.81100480857262)
node6.cam.yaw = 63.9
node6.cam.pitch = -38.6
node6.cam.zoom = 45
node6.cam.update_vectors()
node6.speed = 0.14950735867023

_editor.add_node(node6, -79.711328393299, -417.27111654576)

var node7 = ::blueprint::nodes::time::Time()

_editor.add_node(node7, 1178.5215789638, -230.71648587209)

var node8 = ::rendergraph::nodes::texture::Texture()
node8.query_param("unif_name").value = "u_tex"
node8.gamma_correction = false
node8.init_texture("gale.png")

_editor.add_node(node8, -438.71575328427, 150.53536626626)

var node9 = ::blueprint::nodes::subgraph::Subgraph()
node9.load_from_file(_editor, "../../../assets/blueprints/rendergraph/draw_terrain_splatmap.ves")
node9.set_prop_value("tes.clip_plane", [ 0, 0, 0, 0 ])

_editor.add_node(node9, 358.80155234678, 430.92507543136)

var node10 = ::rendergraph::nodes::pass::Pass()

node10.once = false

_editor.add_node(node10, 1292.6569208136, 451.61858998212)

var node11 = ::blueprint::nodes::subgraph::Subgraph()
node11.load_from_file(_editor, "../../../assets/blueprints/rendergraph/draw_terrain_splatmap.ves")
node11.set_prop_value("tes.clip_plane", [ 0, -1, 0, 0.002 ])

_editor.add_node(node11, 855.6633041419, 421.85788016954)

var node12 = ::rendergraph::nodes::render_target::RenderTarget()

node12.width = 1024
node12.height = 1024

_editor.add_node(node12, 1094.498273964, 295.7220605907)

var node13 = ::rendergraph::nodes::texture::Texture()
node13.query_param("unif_name").value = "u_tex"
node13.gamma_correction = false
node13.init_texture(1024, 1024, "rgb")

_editor.add_node(node13, 867.7377845548, 213.07742828627)

var node14 = ::rendergraph::nodes::pass::Pass()

node14.once = false

_editor.add_node(node14, 604.87714417687, 463.40232189476)

var node15 = ::rendergraph::nodes::pass::Pass()

node15.once = false

_editor.add_node(node15, 2252.4897310166, 469.86439664097)

var node16 = ::blueprint::nodes::subgraph::Subgraph()
node16.load_from_file(_editor, "../../../assets/blueprints/rendergraph/draw_terrain_splatmap.ves")
node16.set_prop_value("tes.clip_plane", [ 0, -1, 0, 0 ])

_editor.add_node(node16, 1814.6696680639, 440.10368682839)

var node17 = ::rendergraph::nodes::render_target::RenderTarget()

node17.width = 1024
node17.height = 1024

_editor.add_node(node17, 2054.331084167, 313.96786724955)

var node18 = ::rendergraph::nodes::texture::Texture()
node18.query_param("unif_name").value = "u_tex"
node18.gamma_correction = false
node18.init_texture(1024, 1024, "rgb")

_editor.add_node(node18, 1827.5705947578, 231.32323494512)

var node19 = ::rendergraph::nodes::pass::Pass()

node19.once = false

_editor.add_node(node19, 1971.11816306, -202.66251087259)

var node20 = ::rendergraph::nodes::texture::Texture()
node20.query_param("unif_name").value = "u_tex"
node20.gamma_correction = false
node20.init_texture("assets/textures/water/XZnoise.png")
node20.set_sampler("linear_repeat")

_editor.add_node(node20, 1046.3228057329, -360.53503372859)

var node21 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node21, 1169.1283766132, -293.86999630429)

var node22 = ::blueprint::nodes::scale::Scale()

node22.sx = 1
node22.sy = -1
node22.sz = 1

_editor.add_node(node22, 1589.9146690647, 280.40126804793)

var node23 = ::rendergraph::nodes::texture::Texture()
node23.query_param("unif_name").value = "u_tex"
node23.gamma_correction = false
node23.init_texture("assets/textures/water/fresnel.bmp")

_editor.add_node(node23, 867.24181985306, -720.25677194469)

var node24 = ::blueprint::nodes::commentary::Commentary()

node24.set_size(797.67498779297, 273.26251220703)
node24.title = "terrain"

_editor.add_node(node24, 280.20370109496, 561.15791039383)

var node25 = ::blueprint::nodes::commentary::Commentary()

node25.set_size(655.79791259766, 587.53125)
node25.title = "refract"

_editor.add_node(node25, 1037.6435810038, 539.18213425465)

var node26 = ::blueprint::nodes::commentary::Commentary()

node26.set_size(813.64581298828, 554.57086181641)
node26.title = "reflect"

_editor.add_node(node26, 1919.1626812886, 542.52732847383)

var node27 = ::blueprint::nodes::commentary::Commentary()

node27.set_size(1371.1125488281, 1020.1583251953)
node27.title = "water"

_editor.add_node(node27, 1391.241044775, -120.4459521498)

Blueprint.connect(node18, "tex", node17, "col0")
Blueprint.connect(node9, "next", node14, "do")
Blueprint.connect(node14, "next", node10, "prev")
Blueprint.connect(node11, "next", node10, "do")
Blueprint.connect(node12, "fbo", node10, "fbo")
Blueprint.connect(node10, "next", node15, "prev")
Blueprint.connect(node16, "next", node15, "do")
Blueprint.connect(node17, "fbo", node15, "fbo")
Blueprint.connect(node15, "next", node19, "prev")
Blueprint.connect(node0, "next", node19, "do")
Blueprint.connect(node13, "tex", node12, "col0")
Blueprint.connect(node8, "tex", node16, "tes_heightmap")
Blueprint.connect(node22, "mat", node16, "tcs.model")
Blueprint.connect(node6, "this", node16, "view_cam")
Blueprint.connect(node8, "tex", node11, "tes_heightmap")
Blueprint.connect(node6, "this", node11, "view_cam")
Blueprint.connect(node6, "zoom", node5, "fovy")
Blueprint.connect(node5, "mat", node2, "projection")
Blueprint.connect(node6, "mat", node2, "view")
Blueprint.connect(node7, "time", node2, "time")
Blueprint.connect(node6, "pos", node2, "cam_pos")
Blueprint.connect(node21, "size", node2, "viewport_size")
Blueprint.connect(node4, "tex", node2, "norm_tex")
Blueprint.connect(node13, "tex", node2, "refracted_tex")
Blueprint.connect(node18, "tex", node2, "reflected_tex")
Blueprint.connect(node20, "tex", node2, "noise_tex")
Blueprint.connect(node23, "tex", node2, "fresnel_tex")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
Blueprint.connect(node1, "next", node9, "prev")
Blueprint.connect(node8, "tex", node9, "tes_heightmap")
Blueprint.connect(node6, "this", node9, "view_cam")
