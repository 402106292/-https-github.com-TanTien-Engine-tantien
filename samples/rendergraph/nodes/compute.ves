var node0 = ::rendergraph::nodes::shader::Shader()

node0.vs = ""
node0.tcs = ""
node0.tes = ""
node0.gs = ""
node0.fs = ""
node0.cs = "
#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

float conv(in float[9] kernel, in float[9] data, in float denom, in float offset) 
{
   float res = 0.0;
   for (int i=0; i<9; ++i) 
   {
      res += kernel[i] * data[i];
   }
   return clamp(res/denom + offset, 0.0, 1.0);
}

struct ImageData 
{
	float avg[9];
} imageData;	

void main()
{	
	// Fetch neighbouring texels
	int n = -1;
	for (int i=-1; i<2; ++i) 
	{   
		for(int j=-1; j<2; ++j) 
		{    
			n++;    
			vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
			imageData.avg[n] = (rgb.r + rgb.g + rgb.b) / 3.0;
		}
	}

	float[9] kernel;
	kernel[0] = -1.0/8.0; kernel[1] = -1.0/8.0; kernel[2] = -1.0/8.0;
	kernel[3] = -1.0/8.0; kernel[4] =  1.0;     kernel[5] = -1.0/8.0;
	kernel[6] = -1.0/8.0; kernel[7] = -1.0/8.0; kernel[8] = -1.0/8.0;
									
	vec4 res = vec4(vec3(conv(kernel, imageData.avg, 0.1, 0.0)), 1.0);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}
"
node0.render_gen()

_editor.add_node(node0, -123, -6.5)

var node1 = ::rendergraph::nodes::compute::Compute()

node1.num_groups = [ 32, 32, 1 ]

_editor.add_node(node1, 79.658746399658, 16.651221210574)

var node2 = ::rendergraph::nodes::texture::Texture()
node2.query_param("unif_name").value = "u_tex"
node2.gamma_correction = false
node2.init_texture("samples/rendergraph/learnopengl/resources/textures/awesomeface.png")

_editor.add_node(node2, -420.05183797811, 189.15165029763)

var node3 = ::rendergraph::nodes::texture::Texture()
node3.query_param("unif_name").value = "u_tex"
node3.gamma_correction = false
node3.init_texture(512, 512, "rgba8")

_editor.add_node(node3, -425.86781575686, -191.88570829273)

var node4 = ::blueprint::nodes::subgraph::Subgraph()
node4.load_from_file(_editor, "../../../assets/blueprints/rendergraph/draw_tex_quad.ves")

_editor.add_node(node4, 74.226862932426, -215.71472321059)

var node5 = ::rendergraph::nodes::pass::Pass()

node5.once = false

_editor.add_node(node5, 326.53439759814, -213.67057169764)

Blueprint.connect(node4, "next", node5, "do")
Blueprint.connect(node3, "tex", node4, "texture1")
Blueprint.connect(node2, "tex", node0, "inputImage")
Blueprint.connect(node3, "tex", node0, "resultImage")
Blueprint.connect(node0, "out", node1, "shader")
