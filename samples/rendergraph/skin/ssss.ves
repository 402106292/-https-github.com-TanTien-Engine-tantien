
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.*"
import "rendergraph.nodes.*"
var node0 = Draw()

node0.set_prim_type("triangles")
node0.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less", "clip_plane" : false }
node0.skip = false

_editor.add_node(node0, 459.36940964728, -315.54832714451)

var node1 = Clear()

node1.masks = [ "depth", "color" ]
node1.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node1, 92.484360811818, -191.35373661108)

var node2 = Model()
node2.init_model("Head2.fbx")

_editor.add_node(node2, 114.97490047047, -382.18764616475)

var node3 = Shader()

node3.vs = "
#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out VS_OUT 
{
	vec2 TexCoords;
	vec3 WorldPos;
	vec3 Normal;
} vs_out;

uniform UBO
{
	mat4 projection;
	mat4 view;
	mat4 model;	
};

void main()
{
    vs_out.TexCoords = aTexCoords;
    vs_out.WorldPos = vec3(model * vec4(aPos, 1.0));
    vs_out.Normal = mat3(model) * aNormal;   
    gl_Position =  projection * view * vec4(vs_out.WorldPos, 1.0);
}
"
node3.tcs = ""
node3.tes = ""
node3.gs = ""
node3.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT 
{
	vec2 TexCoords;
	vec3 WorldPos;
	vec3 Normal;
} fs_in;

#define N_LIGHTS 3

struct Light {
    vec3 position;
    vec3 direction;
    float falloffStart;
    float falloffWidth;
    vec3 color;
    float attenuation;
    float farPlane;
    float bias;
    //mat4 viewProjection;
};

uniform UBO
{
    Light lights[N_LIGHTS];
    vec3 viewPos;
    float specularFresnel;
    float ambient;
};

uniform sampler2D diffuseTex;
uniform sampler2D normalTex;
uniform sampler2D aoTex;
uniform sampler2D beckmannTex;

float Fresnel(vec3 _half, float f0) 
{
    float base = 1.0 - dot(viewPos, _half);
    float exponential = pow(base, 5.0);
    return exponential + f0 * (1.0 - exponential);
}

float SpecularKSK(vec3 normal, vec3 light, float roughness) 
{
    vec3 _half = viewPos + light;
    vec3 halfn = normalize(_half);

    float ndotl = max(dot(normal, light), 0.0);
    float ndoth = max(dot(normal, halfn), 0.0);

    float ph = pow(2.0 * texture(beckmannTex, vec2(ndoth, roughness)).r, 10.0);
    float f = mix(0.25, Fresnel(halfn, 0.028), specularFresnel);
    float ksk = max(ph * f / dot(_half, _half), 0.0);

    return ndotl * ksk;   
}

void main()
{
    vec3 N = normalize(fs_in.Normal);
    vec3 V = normalize(viewPos - fs_in.WorldPos);
    vec3 normal = N;

    vec4 albedo = texture(diffuseTex, vec2(fs_in.TexCoords.x, 1.0 - fs_in.TexCoords.y));

    float occlusion = texture(aoTex, fs_in.TexCoords).r;
    float intensity = 0.5;
    float roughness = 0.5;

    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);

    for (int i = 0; i < N_LIGHTS; i++) 
    {
        vec3 light = lights[i].position - fs_in.WorldPos;
        float dist = length(light);
        light /= dist;

        float spot = dot(lights[i].direction, -light);
        if (spot > lights[i].falloffStart) 
        {
            // Calculate attenuation:
            float curve = min(pow(dist / lights[i].farPlane, 6.0), 1.0);
            float attenuation = mix(1.0 / (1.0 + lights[i].attenuation * dist * dist), 0.0, curve);

            // And the spot light falloff:
            spot = clamp((spot - lights[i].falloffStart) / lights[i].falloffWidth, 0.0, 1.0);

            // Calculate some terms we will use later on:
            vec3 f1 = lights[i].color * attenuation * spot;
            vec3 f2 = albedo.rgb * f1;

            // Calculate the diffuse and specular lighting:
            vec3 diffuse = vec3(clamp(dot(light, normal), 0.0, 1.0));
            float specular = intensity * SpecularKSK(normal, light, roughness);

            // And also the shadowing:
//            float shadow = ShadowPCF(fs_in.WorldPos, i, 3, 1.0);
			float shadow = 1.0;

            // Add the diffuse and specular components:
#ifdef SEPARATE_SPECULARS
            color.rgb += shadow * f2 * diffuse;
            specularColor.rgb += shadow * f1 * specular;
#else
            color.rgb += shadow * (f2 * diffuse + f1 * specular);
#endif

            // Add the transmittance component:
//            if (sssEnabled)
//                color.rgb += f2 * SSSSTransmittance(translucency, sssWidth, fs_in.WorldPos, input.normal, light, shadowMaps[i], lights[i].viewProjection, lights[i].farPlane);
        }
    }

    // Add the ambient component:
    color.rgb += occlusion * ambient * albedo.rgb;

    color.a = 1.0;

    FragColor = color;
}

"
node3.cs = ""
node3.execute()
node3.set_uniform("lights[0].position", [ -0.425, 0.515, 0.48 ])
node3.set_uniform("lights[0].direction", [ 0.6, -0.378, -0.7 ])
node3.set_uniform("lights[0].falloffStart", [ 0.92395569947027 ])
node3.set_uniform("lights[0].falloffWidth", [ 0.05 ])
node3.set_uniform("lights[0].color", [ 0.5, 0.5, 0.5 ])
node3.set_uniform("lights[0].attenuation", [ 0.0078125 ])
node3.set_uniform("lights[0].farPlane", [ 10 ])
node3.set_uniform("lights[0].bias", [ -0.01 ])
node3.set_uniform("lights[1].position", [ 0.466, 0.457, 0.457 ])
node3.set_uniform("lights[1].direction", [ -0.519, -0.4, -0.75 ])
node3.set_uniform("lights[1].falloffStart", [ 0.92395569947027 ])
node3.set_uniform("lights[1].falloffWidth", [ 0.05 ])
node3.set_uniform("lights[1].color", [ 0.5, 0.5, 0.5 ])
node3.set_uniform("lights[1].attenuation", [ 0.0078125 ])
node3.set_uniform("lights[1].farPlane", [ 10 ])
node3.set_uniform("lights[1].bias", [ -0.01 ])
node3.set_uniform("lights[2].position", [ 0.0587, 0.59, 0.8 ])
node3.set_uniform("lights[2].direction", [ 0.075, -0.448, -0.891 ])
node3.set_uniform("lights[2].falloffStart", [ 0.92395569947027 ])
node3.set_uniform("lights[2].falloffWidth", [ 0.05 ])
node3.set_uniform("lights[2].color", [ 0.5, 0.5, 0.5 ])
node3.set_uniform("lights[2].attenuation", [ 0.0078125 ])
node3.set_uniform("lights[2].farPlane", [ 10 ])
node3.set_uniform("lights[2].bias", [ -0.01 ])
node3.set_uniform("specularFresnel", [ 1.5927958488464 ])
node3.set_uniform("ambient", [ 0.19279581308365 ])

_editor.add_node(node3, -79.891942478386, -476.55710396823)

var node4 = Texture()
node4.query_param("unif_name").value = "u_tex"
node4.gamma_correction = false
node4.init_texture("beckmannTex.jpg")

_editor.add_node(node4, -334.5423275953, -457.9743061648)

var node5 = Texture()
node5.query_param("unif_name").value = "u_tex"
node5.gamma_correction = false
node5.init_texture("Head_02_Albedo.png")

_editor.add_node(node5, -570.69423347298, -458.9236641209)

var node6 = Texture()
node6.query_param("unif_name").value = "u_tex"
node6.gamma_correction = false
node6.init_texture("Head_02_AO.png")

_editor.add_node(node6, -562.75076568459, -788.86698759433)

var node7 = Texture()
node7.query_param("unif_name").value = "u_tex"
node7.gamma_correction = false
node7.init_texture("Head_02_Normal.png")

_editor.add_node(node7, -333.63391641779, -791.13459099884)

var node8 = Perspective()

node8.fovy = 45
node8.aspect = 0
node8.znear = 0.1
node8.zfar = 100

_editor.add_node(node8, -286.52362060547, -160.71020507813)

var node9 = Camera3d()

node9.cam.position.set(-0.13016721848106, 0.33143328307611, 0.41881437280284)
node9.cam.yaw = -70.2
node9.cam.pitch = -16.8
node9.cam.zoom = 45
node9.cam.update_vectors()
node9.speed = 0.01

_editor.add_node(node9, -541.57351029216, -261.44280498609)

var node10 = RenderTarget()

node10.width = 2048
node10.height = 2048

_editor.add_node(node10, -343.3045444918, -1519.7444741702)

var node11 = Texture()
node11.query_param("unif_name").value = "u_tex"
node11.gamma_correction = false
node11.init_texture(2048, 2048, "rgba8")

_editor.add_node(node11, -568.69704443845, -1383.2660069007)

var node12 = Texture()
node12.query_param("unif_name").value = "u_tex"
node12.gamma_correction = false
node12.init_texture(2048, 2048, "depth")

_editor.add_node(node12, -568.25132555518, -1717.2989328238)

var node13 = Pass()

node13.once = false

_editor.add_node(node13, 841.29190465463, -260.48714721779)

var node14 = Commentary()

node14.set_size(1761.9114990234, 1039.30859375)
node14.title = "Lighting"

_editor.add_node(node14, 72.197703593751, -22.198881699219)

var node15 = Draw()

node15.set_prim_type("tri_strip")
node15.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less", "clip_plane" : false }
node15.skip = false

_editor.add_node(node15, 493.53521932266, -1525.3660414975)

var node16 = Clear()

node16.masks = [ "color" ]
node16.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node16, 212.87076717654, -1328.6325259291)

var node17 = Shader()

node17.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;
out vec2 TexCoord;
void main()
{
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
    gl_Position = vec4(aPos, 1.0);
}
"
node17.tcs = ""
node17.tes = ""
node17.gs = ""
node17.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform sampler2D color_tex;
uniform sampler2D depth_tex;

uniform UBO
{
	float SSSIntencity;	
};

#define SSSS_FOVY 20.0
#define SSSS_N_SAMPLES 17
vec4 kernel[] = vec4[](
    vec4(0.536343, 0.624624, 0.748867, 0),
    vec4(0.00317394, 0.000134823, 3.77269e-005, -2),
    vec4(0.0100386, 0.000914679, 0.000275702, -1.53125),
    vec4(0.0144609, 0.00317269, 0.00106399, -1.125),
    vec4(0.0216301, 0.00794618, 0.00376991, -0.78125),
    vec4(0.0347317, 0.0151085, 0.00871983, -0.5),
    vec4(0.0571056, 0.0287432, 0.0172844, -0.28125),
    vec4(0.0582416, 0.0659959, 0.0411329, -0.125),
    vec4(0.0324462, 0.0656718, 0.0532821, -0.03125),
    vec4(0.0324462, 0.0656718, 0.0532821, 0.03125),
    vec4(0.0582416, 0.0659959, 0.0411329, 0.125),
    vec4(0.0571056, 0.0287432, 0.0172844, 0.28125),
    vec4(0.0347317, 0.0151085, 0.00871983, 0.5),
    vec4(0.0216301, 0.00794618, 0.00376991, 0.78125),
    vec4(0.0144609, 0.00317269, 0.00106399, 1.125),
    vec4(0.0100386, 0.000914679, 0.000275702, 1.53125),
    vec4(0.00317394, 0.000134823, 3.77269e-005, 2)
);

vec4 SSS(vec4 SceneColor, vec2 uv, vec2 SSSIntencity) 
{
    // Fetch linear depth of current pixel
    float depth = texture(depth_tex, uv).r;                                   
    // Calculate the sssWidth scale (1.0 for a unit plane sitting on the
    // projection window):
    float distanceToProjectionWindow = 1.0 / tan(0.5 * radians(SSSS_FOVY));
    float scale = distanceToProjectionWindow / depth;
    // Calculate the final step to fetch the surrounding pixels:
    vec2 finalStep = SSSIntencity;
    finalStep *= SceneColor.a; // Modulate it using the alpha channel.
    finalStep *= 1.0 / 3.0; // Divide by 3 as the kernels range from -3 to 3.
    // Accumulate the center sample:
    vec4 colorBlurred = SceneColor;
    colorBlurred.rgb *= kernel[0].rgb;
    // Accumulate the other samples:
    for (int i = 1; i < SSSS_N_SAMPLES; i++) 
    {
        // Fetch color and depth for current sample:
        vec2 offset = uv + kernel[i].a * finalStep;
        vec4 color = texture(color_tex, offset);
        // Accumulate:
        colorBlurred.rgb += kernel[i].rgb * color.rgb;
    }
    return colorBlurred;
}

void main()
{
//    FragColor = texture(color_tex, TexCoord);
    vec4 SceneColor = texture(color_tex, TexCoord);
    //    float SSSIntencity = (_SSSScale * _CameraDepthTexture_TexelSize.x);
    vec3 BlurColor = SSS(SceneColor, TexCoord, vec2(SSSIntencity, 0)).rgb;
    FragColor = vec4(BlurColor, SceneColor.a);
}
"
node17.cs = ""
node17.execute()
node17.set_uniform("SSSIntencity", [ 0.1 ])

_editor.add_node(node17, 40.54463652302, -1476.2507685859)

var node18 = PrimitiveShape()

node18.type = "quad"
node18.layout = [ "position", "texture" ]
node18.shape_params = {  }

_editor.add_node(node18, 225.30087949626, -1584.5531578489)

var node19 = RenderTarget()

node19.width = 2048
node19.height = 2048

_editor.add_node(node19, 283.02110412109, -1775.7047040625)

var node20 = Texture()
node20.query_param("unif_name").value = "u_tex"
node20.gamma_correction = false
node20.init_texture(2048, 2048, "rgba8")

_editor.add_node(node20, 71.82115294922, -1766.9047040625)

var node21 = Draw()

node21.set_prim_type("tri_strip")
node21.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : false, "depth_func" : "less", "clip_plane" : false }
node21.skip = false

_editor.add_node(node21, 1540.0823166477, -1793.4601226795)

var node22 = Shader()

node22.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;
out vec2 TexCoord;
void main()
{
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
    gl_Position = vec4(aPos, 1.0);
}
"
node22.tcs = ""
node22.tes = ""
node22.gs = ""
node22.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoord;

uniform sampler2D color_tex;
uniform sampler2D depth_tex;

uniform UBO
{
	float SSSIntencity;	
};

#define SSSS_FOVY 20.0
#define SSSS_N_SAMPLES 17
vec4 kernel[] = vec4[](
    vec4(0.536343, 0.624624, 0.748867, 0),
    vec4(0.00317394, 0.000134823, 3.77269e-005, -2),
    vec4(0.0100386, 0.000914679, 0.000275702, -1.53125),
    vec4(0.0144609, 0.00317269, 0.00106399, -1.125),
    vec4(0.0216301, 0.00794618, 0.00376991, -0.78125),
    vec4(0.0347317, 0.0151085, 0.00871983, -0.5),
    vec4(0.0571056, 0.0287432, 0.0172844, -0.28125),
    vec4(0.0582416, 0.0659959, 0.0411329, -0.125),
    vec4(0.0324462, 0.0656718, 0.0532821, -0.03125),
    vec4(0.0324462, 0.0656718, 0.0532821, 0.03125),
    vec4(0.0582416, 0.0659959, 0.0411329, 0.125),
    vec4(0.0571056, 0.0287432, 0.0172844, 0.28125),
    vec4(0.0347317, 0.0151085, 0.00871983, 0.5),
    vec4(0.0216301, 0.00794618, 0.00376991, 0.78125),
    vec4(0.0144609, 0.00317269, 0.00106399, 1.125),
    vec4(0.0100386, 0.000914679, 0.000275702, 1.53125),
    vec4(0.00317394, 0.000134823, 3.77269e-005, 2)
);

vec4 SSS(vec4 SceneColor, vec2 uv, vec2 SSSIntencity) 
{
    // Fetch linear depth of current pixel
    float depth = texture(depth_tex, uv).r;                                   
    // Calculate the sssWidth scale (1.0 for a unit plane sitting on the
    // projection window):
    float distanceToProjectionWindow = 1.0 / tan(0.5 * radians(SSSS_FOVY));
    float scale = distanceToProjectionWindow / depth;
    // Calculate the final step to fetch the surrounding pixels:
    vec2 finalStep = SSSIntencity;
    finalStep *= SceneColor.a; // Modulate it using the alpha channel.
    finalStep *= 1.0 / 3.0; // Divide by 3 as the kernels range from -3 to 3.
    // Accumulate the center sample:
    vec4 colorBlurred = SceneColor;
    colorBlurred.rgb *= kernel[0].rgb;
    // Accumulate the other samples:
    for (int i = 1; i < SSSS_N_SAMPLES; i++) 
    {
        // Fetch color and depth for current sample:
        vec2 offset = uv + kernel[i].a * finalStep;
        vec4 color = texture(color_tex, offset);
        // Accumulate:
        colorBlurred.rgb += kernel[i].rgb * color.rgb;
    }
    return colorBlurred;
}

void main()
{
//    FragColor = texture(color_tex, TexCoord);
    vec4 SceneColor = texture(color_tex, TexCoord);
    //    float SSSIntencity = (_SSSScale * _CameraDepthTexture_TexelSize.x);
    vec3 BlurColor = SSS(SceneColor, TexCoord, vec2(0, SSSIntencity)).rgb;
    FragColor = vec4(BlurColor, SceneColor.a);
}
"
node22.cs = ""
node22.execute()
node22.set_uniform("SSSIntencity", [ 0.1 ])

_editor.add_node(node22, 1330.1649612758, -1715.9395281063)

var node23 = RenderTarget()

node23.width = 2048
node23.height = 2048

_editor.add_node(node23, 1365.7170752108, -1865.9869246794)

var node24 = Texture()
node24.query_param("unif_name").value = "u_tex"
node24.gamma_correction = false
node24.init_texture(2048, 2048, "rgba8")

_editor.add_node(node24, 1182.2460068837, -1857.7224094096)

var node25 = Commentary()

node25.set_size(1000.7395629883, 830.73748779297)
node25.title = "SSSS BlurX"

_editor.add_node(node25, 333.96583974375, -1171.4436899969)

var node26 = Commentary()

node26.set_size(863.86663818359, 340.52084350586)
node26.title = "SSSS BlurY"

_editor.add_node(node26, 1434.6913663052, -1603.1961572919)

var node27 = Commentary()

node27.set_size(486.10208129883, 672.83123779297)
node27.title = "Lighting result"

_editor.add_node(node27, -467.21601667002, -1291.5264027864)

var node28 = Pass()

node28.once = false

_editor.add_node(node28, 708.84081391345, -1444.1129464059)

var node29 = Pass()

node29.once = false

_editor.add_node(node29, 1737.3464497107, -1710.0358044858)

var node30 = Subgraph()
node30.load_from_file(_editor, "../../../assets/blueprints/rendergraph/draw_tex_quad.ves")

_editor.add_node(node30, 1795.0965687145, -2106.7946000533)

var node31 = Pass()

node31.once = false

_editor.add_node(node31, 2019.6420454545, -2107.7036243786)

Blueprint.connect(node30, "next", node31, "prev")
Blueprint.connect(node21, "next", node29, "prev")
Blueprint.connect(node23, "fbo", node29, "fbo")
Blueprint.connect(node15, "next", node28, "prev")
Blueprint.connect(node19, "fbo", node28, "fbo")
Blueprint.connect(node24, "tex", node30, "texture1")
Blueprint.connect(node24, "tex", node23, "col0")
Blueprint.connect(node20, "tex", node19, "col0")
Blueprint.connect(node0, "next", node13, "prev")
Blueprint.connect(node10, "fbo", node13, "fbo")
Blueprint.connect(node12, "tex", node22, "depth_tex")
Blueprint.connect(node20, "tex", node22, "color_tex")
Blueprint.connect(node28, "next", node21, "prev")
Blueprint.connect(node22, "out", node21, "shader")
Blueprint.connect(node18, "out", node21, "va")
Blueprint.connect(node12, "tex", node17, "depth_tex")
Blueprint.connect(node11, "tex", node17, "color_tex")
Blueprint.connect(node16, "next", node15, "prev")
Blueprint.connect(node17, "out", node15, "shader")
Blueprint.connect(node18, "out", node15, "va")
Blueprint.connect(node11, "tex", node10, "col0")
Blueprint.connect(node12, "tex", node10, "depth")
Blueprint.connect(node9, "zoom", node8, "fovy")
Blueprint.connect(node8, "mat", node3, "projection")
Blueprint.connect(node9, "mat", node3, "view")
Blueprint.connect(node9, "pos", node3, "viewPos")
Blueprint.connect(node4, "tex", node3, "beckmannTex")
Blueprint.connect(node5, "tex", node3, "diffuseTex")
Blueprint.connect(node6, "tex", node3, "aoTex")
Blueprint.connect(node7, "tex", node3, "normalTex")
Blueprint.connect(node1, "next", node0, "prev")
Blueprint.connect(node3, "out", node0, "shader")
Blueprint.connect(node2, "model", node0, "model")
